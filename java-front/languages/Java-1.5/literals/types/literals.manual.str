module languages/Java-1.5/literals/types/literals.manual

imports

  include/Java
  lib/runtime-libraries/org.spoofax.meta.runtime.libraries/nabl/-
  lib/runtime-libraries/org.spoofax.meta.runtime.libraries/task/-
  lib/runtime-libraries/org.spoofax.meta.runtime.libraries/types/-
  lib/runtime-libraries/org.spoofax.meta.runtime.libraries/properties/-
  lib/runtime-libraries/org.spoofax.meta.runtime.libraries/relations/-
  languages/Java-1.5/types/types/references.generated
  
rules
	 
  create-type-task(|ctx, uri*) :
    String(_) -> <task-create-id(|ctx)> RefType(TypeName("String"{Use(choice)}), None())
    where 
      use1   := <nabl-use-candidate(|"Java", ctx, uri*, "String")> UseCandidate(NablNsType(), [], Current(), (), ())
    ; use2   := <nabl-use-candidate(|"Java", ctx, uri*, "String")> UseCandidate(NablNsType(), [], Context(NablNsCompilationUnit(), "current", [], Current()), True(), [])
    ; choice := <task-create-choice(|ctx)> [use1, use2]
  
  create-type-task(|ctx, uri*) :
    Class(_) -> <task-create-id(|ctx)> RefType(TypeName("Class"{Use(choice)}), None())
    where 
      use1   := <nabl-use-candidate(|"Java", ctx, uri*, "Class")> UseCandidate(NablNsType(), [], Current(), (), ())
    ; use2   := <nabl-use-candidate(|"Java", ctx, uri*, "Class")> UseCandidate(NablNsType(), [], Context(NablNsCompilationUnit(), "current", [], Current()), True(), [])
    ; choice := <task-create-choice(|ctx)> [use1, use2]
