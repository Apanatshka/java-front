module languages/Java-1.5/expressions/types/boolean

imports
	
	include/Java
	lib/task/-
	lib/types/-
	languages/Java-1.5/types/types/equality
	
rules
	
	create-type-task(|ctx):
		_ -> <type-is(|ctx)> Boolean()
		where
		  ?Lt(x, y)
		+ ?Gt(x, y)
		+ ?LtEq(x, y)
		+ ?GtEq(x, y)
		with
		  x-ty     := <type-task(|ctx)> x
		; y-ty     := <type-task(|ctx)> y
		; x-is-num := <is-numerical(|ctx)> x-ty
		; y-is-num := <is-numerical(|ctx)> y-ty
		; <task-create-error-on-failure(|ctx, x-is-num, "Expected numerical")> x
		; <task-create-error-on-failure(|ctx, y-is-num, "Expected numerical")> y

	create-type-task(|ctx):
		term@_ -> <type-is(|ctx)> Boolean()
		where
		  ?Eq(x, y)
		+ ?NotEq(x, y)
		with
		  x-ty      := <type-task(|ctx)> x
		; y-ty      := <type-task(|ctx)> y
		  // Check for numerical types
		; x-is-num  := <is-numerical(|ctx)> x-ty
		; y-is-num  := <is-numerical(|ctx)> x-ty
		; are-nums  := <task-create-sequence(|ctx)> [x-is-num, y-is-num]
		  // Check for boolean types
		; x-is-bool := <is-boolean(|ctx)> x-ty
		; y-is-bool := <is-boolean(|ctx)> x-ty
		; are-bools := <task-create-sequence(|ctx)> [x-is-bool, y-is-bool]
		  // Check for reference types
		; x-is-ref  := <is-reference(|ctx)> x-ty
		; y-is-ref  := <is-reference(|ctx)> x-ty
		; are-refs  := <task-create-sequence(|ctx)> [x-is-ref, y-is-ref]
			// TODO: Check for null type
			// Validate
		; valid     := <task-create-choice(|ctx)> [are-nums, are-bools, are-refs]
		; <task-create-error-on-failure(|ctx, valid, "Cannot compare")> term
