module languages/Java-1.5/expressions/types/bitwise-logical

imports
	
	include/Java
	lib/task/-
	lib/types/-
	languages/Java-1.5/types/types/equality
	languages/Java-1.5/types/types/promotion
	
rules
	
	create-type-task(|ctx):
		term@_ -> ty
		where
		  ?And(x, y)
		+ ?ExcOr(x, y)
		+ ?Or(x, y)
		with
		  x-ty      := <type-task(|ctx)> x
		; y-ty      := <type-task(|ctx)> y
		  // Check for numerical types
		; x-is-num  := <is-numerical(|ctx)> x-ty
		; y-is-num  := <is-numerical(|ctx)> x-ty
		; are-nums  := <task-create-sequence(|ctx)> [x-is-num, y-is-num]
	  ; num-ty    := <promote-binary(|ctx)> (x-ty, y-ty)
	    // Check for boolean types
		; x-is-bool := <is-boolean(|ctx)> x-ty
		; y-is-bool := <is-boolean(|ctx)> x-ty
		; are-bools := <task-create-sequence(|ctx)> [x-is-bool, y-is-bool]
		; bool-ty   := <type-is(|ctx)> Boolean()
		  // Validate
		; ty        := <task-create-choice(|ctx)> [<task-create-sequence(|ctx)> [are-nums, num-ty], <task-create-sequence(|ctx)> [are-bools, bool-ty]]
		; <task-create-error-on-failure(|ctx, ty, "Expected numbers or booleans")> term

	// TODO: bitwise complement
	// TODO: logical negation