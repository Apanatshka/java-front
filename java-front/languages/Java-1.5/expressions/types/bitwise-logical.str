module languages/Java-1.5/expressions/types/bitwise-logical

imports
	
	include/Java
	lib/task/-
	lib/types/-
	languages/Java-1.5/types/types/equality
	languages/Java-1.5/types/types/promotion
	
rules
	
	create-type-task(|ctx):
		term@_ -> ty
		where
		  ?And(x, y)
		+ ?ExcOr(x, y)
		+ ?Or(x, y)
		with
		  x-ty      := <type-task(|ctx)> x
		; y-ty      := <type-task(|ctx)> y
		  // Check for numerical types
		; are-nums  := <task-create-sequence(|ctx)> [<is-numerical(|ctx)> x-ty, <is-numerical(|ctx)> y-ty]
		; num-ty    := <promote-binary(|ctx, x-ty)> y-ty
		  // Check for boolean types
		; are-bools := <task-create-sequence(|ctx)> [<is-boolean(|ctx)> x-ty, <is-boolean(|ctx)> y-ty]
		; bool-ty   := <type-is(|ctx)> Boolean()
		  // Validate
		; ty        := <task-create-choice(|ctx)> [<task-create-sequence(|ctx)> [are-nums, num-ty], <task-create-sequence(|ctx)> [are-bools, bool-ty]]
		; <task-create-error-on-failure(|ctx, ty, "Expected numbers or booleans")> term
		  
	create-type-task(|ctx):
		term@_ -> <type-is(|ctx, [are-bools])> Boolean()
		where
		  ?LazyAnd(x, y)
		+ ?LazyOr(x, y)
		with
		  x-ty      := <type-task(|ctx)> x
		; y-ty      := <type-task(|ctx)> y  
		; are-bools := <task-create-sequence(|ctx)> [<is-boolean(|ctx)> x-ty, <is-boolean(|ctx)> y-ty]
		; <task-create-error-on-failure(|ctx, are-bools, "Expected booleans")> term

	create-type-task(|ctx):
		term@Not(x) -> <type-is(|ctx, [is-bool])> Boolean()
		with
		  x-ty    := <type-task(|ctx)> x
		; is-bool := <is-boolean(|ctx)> x-ty
		; <task-create-error-on-failure(|ctx, is-bool, "Expected boolean")> term 
  
  create-type-task(|ctx):
		term@Complement(x) -> <type-is(|ctx, [is-int])> ty
		with
		  x-ty   := <type-task(|ctx)> x
		; is-int := <is-integral(|ctx)> x-ty
		; ty     := <promote-unary(|ctx)> x-ty
		; <task-create-error-on-failure(|ctx, is-int, "Expected integral")> term
