module languages/Java-1.5/expressions/types/arithmetic

imports
	
	include/Java
	lib/task/-
	lib/types/-
	languages/Java-1.5/types/types/promotion
	languages/Java-1.5/types/types/equality
	
rules
	
	create-type-task(|ctx):
		_ -> <type-is(|ctx, [x-is-num, y-is-num])> ty
		where
		  ?Plus(x, y) // TODO: can also be string concatenation, needs a special case
		+ ?Minus(x, y)
		+ ?Mul(x, y)
		+ ?Div(x, y)
		+ ?Mod(x, y)
		with
		  x-ty     := <type-task(|ctx)> x
		; y-ty     := <type-task(|ctx)> y
		; ty       := <promote-binary(|ctx, x-ty)> y-ty
		; x-is-num := <is-numerical(|ctx)> x-ty
		; y-is-num := <is-numerical(|ctx)> y-ty
		; <task-create-error-on-failure(|ctx, x-is-num, [x-ty], "Expected numerical")> x
		; <task-create-error-on-failure(|ctx, y-is-num, [y-ty], "Expected numerical")> y
		  
	create-type-task(|ctx):
		_ -> <type-is(|ctx, [x-is-num, y-is-int])> y-ty
		where
		  ?LeftShift(x, y)
		+ ?RightShift(x, y)
		+ ?URightShift(x, y)
		with
		  x-ty     := <type-task(|ctx)> x
		; y-ty     := <type-task(|ctx); promote-unary(|ctx)> y
		; x-is-num := <is-numerical(|ctx)> x-ty
		; y-is-int := <is-integral(|ctx)> y-ty
		; <task-create-error-on-failure(|ctx, x-is-num, [x-ty], "Expected numerical")> x
		; <task-create-error-on-failure(|ctx, y-is-int, [y-ty], "Expected integral")> y

	create-type-task(|ctx):
		term@_ -> <type-is(|ctx, [is-num])> ty
		where
		  ?Plus(e)
		+ ?Minus(e)
		with
		  ty     := <type-task(|ctx)> e
		; prom   := <promote-unary(|ctx)> ty 
		; is-num := <is-numerical(|ctx)> ty
	  ; <task-create-error-on-failure(|ctx, is-num, [ty], "Expected numerical")> term
	    
	create-type-task(|ctx):
		term@_ -> <type-is(|ctx, [is-num])> ty
		where
		  ?PreIncr(e)
		+ ?PostIncr(e)
		+ ?PreDecr(e)
		+ ?PostDecr(e)
		with
		  ty     := <type-task(|ctx)> e
		; prom   := <promote-binary(|ctx, Int())> ty
		; is-num := <is-numerical(|ctx)> prom
		; <task-create-error-on-failure(|ctx, is-num, [ty], "Expected numerical")> term
		