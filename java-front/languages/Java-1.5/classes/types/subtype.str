module languages/Java-1.5/classes/types/subtype

imports
	
	include/Java
	lib/relations/-
	lib/nabl/-
	lib/task/-

signature

	constructors
		
		Subtype    : Relation
		Implements : Relation
		Widening   : Relation

rules // Hooks to store class relations
	
	nabl-constraint(|ctx):
		ClassDec(ClassDecHead(_, c, _, SuperDec(pc), _), _) -> <fail>
		with
		  <store-subtype-relation(|ctx, c)> pc
		; <store-widening-relation(|ctx, c)> pc
			
	nabl-constraint(|ctx):
		ClassDec(ClassDecHead(_, c, _, _, implements*), _) -> <fail>
		where
			<is-list> implements*
		with
		  <map(\ImplementsDec(ic) -> <where(store-implements-relation(|ctx, c)); store-widening-relation(|ctx, c)> ic\)> implements*

	relation-is-transitive = ?Subtype() + ?Implements() + ?Widening()
	
  relation-is-reflexive  = ?Widening()

rules // Storing relation tuples
	
	store-subtype-relation(|ctx, key):
		value -> <new-rel-tuple(|ctx, Subtype(), value)> key

	store-implements-relation(|ctx, key):
		value -> <new-rel-tuple(|ctx, Implements(), value)> key

	store-widening-relation(|ctx, key):
		value -> <new-rel-tuple(|ctx, Widening(), value)> key

rules // Task factories
	
	create-subtype-lookup(|ctx):
		t -> <relation-create-lookup(|ctx, Subtype())> t

	create-widening-match(|ctx, expected):
		actual -> <relation-create-match(|ctx, Subtype(), expected)> actual


	create-implements-lookup(|ctx):
		t -> <relation-create-lookup(|ctx, Implements())> t
		
	create-implements-match(|ctx, expected):
		actual -> <relation-create-match(|ctx, Implements(), expected)> actual


	create-widening-lookup(|ctx):
		t -> <relation-create-lookup(|ctx, Widening())> t
		
	create-widening-match(|ctx, expected):
		actual -> <relation-create-match(|ctx, Widening(), expected)> actual
