module languages/Java-1.5/classes/names/classes

imports

  lib/nabl/-
  lib/task/-
  lib/properties/-
  lib/types/-
  lib/editor/-
  
  include/Java
	languages/Java-1.5/types/names/types
	languages/Java-1.5/types/types/references.generated
  types

namespaces

  Constructor
  Field
  Method 
  Variable
  Label
  
properties

	kind            of Type        : TypeKind
  parameter-types of Method      : List(Type)
  throws          of Method      : Throws
  modifiers       of Type        : List(ClassMod)
  modifiers       of Constructor : List(ConstrMod)
  modifiers       of Method      : List(MethodMod)
  modifiers       of Field       : List(FieldMod)
  modifiers       of Variable    : List(VarMod)
  type-parameters of Type        : TypeParams
  type-parameters of Method      : TypeParams

binding rules // Enums

  EnumDec(EnumDecHead(m*, e, _), _):
    defines Type e 
      of modifiers m*
    scopes Field
  
  EnumConst(e, _, _):
    defines Field e   

binding rules // Types 

  ClassDec(ClassDecHead(m*, c, tp*, None(), _), _):
    defines Type c 
      of type RefType(TypeName(c), None())
      of kind Class()
      of modifiers m*
      of type-parameters tp*
    implicitly defines Field "this" of type RefType(TypeName(c), None())
    scopes Type, TypeParam, Constructor, Field, Method
    
	// TODO: pc may only refer to a class type
  ClassDec(ClassDecHead(m*, c, tp*, SuperDec(pct@ClassType(pc, _)), _), _):
    defines Type c 
      of type RefType(TypeName(c), None())
      of kind Class()
      of modifiers m*
      of type-parameters tp*
    imports
      Field, imported Field, 
      Method, imported Method
      from Type pct
    implicitly defines Field "this" of type RefType(TypeName(c), None())
    implicitly defines Field "super" of type RefType(pc, None())
    scopes Type, TypeParam, Constructor, Field, Method
    
  // TODO: i may only refer to an interface type
  ImplementsDec(i):
    imports
      Field, imported Field, 
      Method, imported Method
      from Type i
      
binding rules // Constructors

  // TODO: implicitly define: this, super. These have a different meaning than the class ones.
  // TODO: should define a constructor with the empty string as name, but this results in an incorrect .str file.
  ConstrDec(ConstrDecHead(m*, _, c, p*, th), _):
    defines Constructor c
      of parameter-types pt*
      of throws th
      of modifiers m*
      of type t
      where p* has type pt*
      and c refers to Type t
    scopes Variable

binding rules // Fields

	// TODO: fields are subsequently scoped, but only inside the class.
  FieldDec(m*, t, VarDec(f)):
    defines Field f 
      of type t'
      of modifiers m*
      where t has type t'
      // in subsequent scope
  
  // TODO: fields are subsequently scoped, but only inside the class.
  FieldDec(m*, t, VarDec(f, _)):
    defines Field f 
      of type t'
      of modifiers m*
      where t has type t'
      // in subsequent scope 
      
binding rules // Methods

	// TODO: imports fields into body
  MethodDec(MethodDecHead(m*, tp*, t, m, p*, th), body):
    defines Method m
      of type t'
      of parameter-types pt*
      of throws th
      of modifiers m*
      of type-parameters tp*
      where p* has type pt*
      and t has type t'
    // imports Field from enclosing Type into body
    scopes Variable, Label
  
  // TODO: imports fields into body 
  MethodDec(DeprMethodDecHead(m*, tp*, t, m, p*, _, th), body):
    defines Method m
      of type t'
      of parameter-types pt*
      of throws th
      of modifiers m*
      of type-parameters tp*
      where p* has type pt*
      and t has type t'
    // imports Field from enclosing Type into body
    scopes Variable, Label
    
  Param(m*, t, p):
    defines Variable p
      of type t'
      of modifiers m*
      where t has type t'

  VarArityParam(m*, t, p):
    defines Variable p
      of type t'
      of modifiers m*
      where t has type t'
