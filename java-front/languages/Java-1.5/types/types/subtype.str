module languages/Java-1.5/types/types/subtype

imports
	
	include/Java
	lib/types/-
	lib/relations/-
	lib/task/-
	languages/Java-1.5/classes/names/classes
	
signature

	constructors
		
		Subclass     : Relation // Class extends class
		Subinterface : Relation // Interface extends interface
		Implements   : Relation // Class implements interface
		Widening     : Relation // Reference type widens to reference type

rules // Interface hooks

	relation-is-transitive = ?Subclass() + ?Subinterface() + ?Implements() + ?Widening()
	
  relation-is-reflexive  = ?Widening()

rules // Storing relation tuples
	
	store-subclass-relation(|ctx, key):
		value -> <new-rel-tuple(|ctx, Subclass(), value)> key
		
	store-subinterface-relation(|ctx, key):
		value -> <new-rel-tuple(|ctx, Subinterface(), value)> key

	store-implements-relation(|ctx, key):
		value -> <new-rel-tuple(|ctx, Implements(), value)> key

	store-widening-relation(|ctx, key):
		value -> <new-rel-tuple(|ctx, Widening(), value)> key

rules // Task factories
	
	create-subclass-lookup(|ctx):
		t -> <relation-create-lookup(|ctx, Subclass())> t

	create-subclass-match(|ctx, expected):
		actual -> <relation-create-match(|ctx, Subclass(), expected)> actual


	create-subinterface-lookup(|ctx):
		t -> <relation-create-lookup(|ctx, Subinterface())> t

	create-subinterface-match(|ctx, expected):
		actual -> <relation-create-match(|ctx, Subinterface(), expected)> actual
		

	create-implements-lookup(|ctx):
		t -> <relation-create-lookup(|ctx, Implements())> t
		
	create-implements-match(|ctx, expected):
		actual -> <relation-create-match(|ctx, Implements(), expected)> actual


	create-widening-lookup(|ctx):
		t -> <relation-create-lookup(|ctx, Widening())> t
		
	create-widening-match(|ctx, expected):
		actual -> <relation-create-match(|ctx, Widening(), expected)> actual
