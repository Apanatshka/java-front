module languages/Java-1.5/interfaces/names/interfaces

imports

  lib/nabl/-
  lib/task/-
  lib/properties/-
  lib/types/-
  lib/editor/-
  
  include/Java
	languages/Java-1.5/classes/names/classes
	languages/Java-1.5/types/names/types
	languages/Java-1.5/types/types/references
  types

properties

  modifiers of Type   : List(InterfaceMod)
  modifiers of Field  : List(ConstantMod)
  modifiers of Method : List(AbstractMethodMod)

binding rules // annotations
  
  AnnoDec(AnnoDecHead(m, a), _):
    defines Type a
      of type RefType(TypeName(a), None())
      of modifiers m
    scopes Type, Field, Method
  
  AnnoMethodDec(mod, t, m, _):
    defines Method m
      of type t
      of modifiers mod
    scopes Variable
  
  Anno(TypeName(a), ElemValPair(f, _)):
  	refers to Field f in Type a
  
binding rules // Interfaces

  InterfaceDec(InterfaceDecHead(m, i, tp*, _), _):
    defines Type i
      of type RefType(TypeName(i), None())
      of modifiers m
      of type-parameters tp*
    scopes Type, TypeParam, Field, Method
  
  // TODO: i may only refer to an inteface.
  ExtendsInterfaces(i):
    imports
      Field, imported Field, 
      Method, imported Method
      from Type i
      
binding rules // Constants

	ConstantDec(m, t, VarDec(c)):
    defines Field c
      of type t'
      of modifiers m
      in subsequent scope
      where t has type t'

  ConstantDec(m, t, VarDec(c, _)):
  	defines Field c
  	  of type t'
  	  of modifiers m
      in subsequent scope
      where t has type t'
      
binding rules // Asbtract methods

  AbstractMethodDec(mod, _, t, m, p*, th):
  	defines Method m
      of type t'
      of parameter-types pt*
      of throws th
      of modifiers mod
      where p* has type pt*
      and t has type t'
    scopes Variable

  DeprAbstractMethodDec(mod, _, t, m, p*, _, th):
    defines Method m
      of type t'
      of parameter-types pt*
      of throws th
      of modifiers mod
      where p* has type pt*
      and t has type t'
    scopes Variable
