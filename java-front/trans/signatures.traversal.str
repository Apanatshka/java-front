module signatures.traversal

imports
  
  signatures
  lib/nabl/-
  lib/properties/-
  lib/editor/-

rules // Debugging
	
	spectrav-debug(|msg) = fail
	preserve-annotations-attachments(s) = fail

rules // Built-ins
  
  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Int(sibling-uris|lang, partition, unique*, uri*)
  specific-collect-Int(sibling-uris|lang, partition, unique*, uri*) = where(is-int); match(sibling-uris|uri*)
  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-String(sibling-uris|lang, partition, unique*, uri*)
  specific-collect-String(sibling-uris|lang, partition, unique*, uri*) = where(is-string); match(sibling-uris|uri*)

rules // Sibling list traversals
	
	specific-siblings-list-OptTypeArgs0(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-OptTypeArgs0(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-OptTypeArgs0(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-OptTypeArgs0(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-OptTypeArgs0(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-OptTypeArgs0(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-Anno_ClassMod0(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-Anno_ClassMod0(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-Anno_ClassMod0(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-Anno_ClassMod0(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-Anno_ClassMod0(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-Anno_ClassMod0(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-Anno_InterfaceMod0(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-Anno_InterfaceMod0(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-Anno_InterfaceMod0(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-Anno_InterfaceMod0(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-Anno_InterfaceMod0(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-Anno_InterfaceMod0(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-Anno_AbstractMethodMod0(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-Anno_AbstractMethodMod0(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-Anno_AbstractMethodMod0(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-Anno_AbstractMethodMod0(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-Anno_AbstractMethodMod0(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-Anno_AbstractMethodMod0(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-Anno_ConstantMod0(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-Anno_ConstantMod0(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-Anno_ConstantMod0(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-Anno_ConstantMod0(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-Anno_ConstantMod0(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-Anno_ConstantMod0(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-Anno_ConstrMod0(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-Anno_ConstrMod0(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-Anno_ConstrMod0(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-Anno_ConstrMod0(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-Anno_ConstrMod0(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-Anno_ConstrMod0(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-Anno_VarMod0(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-Anno_VarMod0(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-Anno_VarMod0(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-Anno_VarMod0(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-Anno_VarMod0(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-Anno_VarMod0(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-Anno_MethodMod0(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-Anno_MethodMod0(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-Anno_MethodMod0(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-Anno_MethodMod0(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-Anno_MethodMod0(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-Anno_MethodMod0(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-Anno_FieldMod0(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-Anno_FieldMod0(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-Anno_FieldMod0(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-Anno_FieldMod0(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-Anno_FieldMod0(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-Anno_FieldMod0(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-Files(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-Files(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-Files(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-Files(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-Files(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-Files(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-File(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-File(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-File(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-File(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-File(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-File(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-TypeDec(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-TypeDec(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-TypeDec(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-TypeDec(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-TypeDec(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-TypeDec(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-ImportDec(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-ImportDec(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-ImportDec(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-ImportDec(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-ImportDec(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-ImportDec(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-LHS(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-LHS(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-LHS(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-LHS(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-LHS(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-LHS(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-CondMid(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-CondMid(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-CondMid(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-CondMid(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-CondMid(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-CondMid(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-Type(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-Type(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-Type(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-Type(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-Type(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-Type(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-FloatType(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-FloatType(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-FloatType(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-FloatType(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-FloatType(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-FloatType(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-IntType(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-IntType(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-IntType(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-IntType(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-IntType(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-IntType(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-NumType(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-NumType(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-NumType(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-NumType(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-NumType(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-NumType(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-PrimType(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-PrimType(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-PrimType(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-PrimType(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-PrimType(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-PrimType(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-MethodSpec(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-MethodSpec(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-MethodSpec(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-MethodSpec(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-MethodSpec(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-MethodSpec(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-MethodArgs(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-MethodArgs(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-MethodArgs(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-MethodArgs(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-MethodArgs(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-MethodArgs(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-ArraySubscript(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-ArraySubscript(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-ArraySubscript(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-ArraySubscript(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-ArraySubscript(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-ArraySubscript(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-ArrayAccess(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-ArrayAccess(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-ArrayAccess(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-ArrayAccess(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-ArrayAccess(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-ArrayAccess(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-FieldAccess(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-FieldAccess(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-FieldAccess(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-FieldAccess(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-FieldAccess(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-FieldAccess(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-DimExpr(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-DimExpr(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-DimExpr(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-DimExpr(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-DimExpr(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-DimExpr(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-ArrayBaseType(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-ArrayBaseType(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-ArrayBaseType(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-ArrayBaseType(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-ArrayBaseType(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-ArrayBaseType(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-ArrayCreationExpr(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-ArrayCreationExpr(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-ArrayCreationExpr(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-ArrayCreationExpr(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-ArrayCreationExpr(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-ArrayCreationExpr(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-ClassMemberDec(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-ClassMemberDec(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-ClassMemberDec(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-ClassMemberDec(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-ClassMemberDec(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-ClassMemberDec(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-ClassBodyDec(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-ClassBodyDec(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-ClassBodyDec(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-ClassBodyDec(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-ClassBodyDec(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-ClassBodyDec(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-Super(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-Super(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-Super(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-Super(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-Super(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-Super(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-ClassMod(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-ClassMod(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-ClassMod(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-ClassMod(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-ClassMod(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-ClassMod(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-ClassBody(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-ClassBody(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-ClassBody(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-ClassBody(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-ClassBody(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-ClassBody(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-InterfaceMod(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-InterfaceMod(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-InterfaceMod(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-InterfaceMod(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-InterfaceMod(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-InterfaceMod(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-InterfaceMemberDec(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-InterfaceMemberDec(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-InterfaceMemberDec(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-InterfaceMemberDec(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-InterfaceMemberDec(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-InterfaceMemberDec(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-DefaultVal(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-DefaultVal(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-DefaultVal(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-DefaultVal(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-DefaultVal(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-DefaultVal(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-AnnoElemDec(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-AnnoElemDec(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-AnnoElemDec(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-AnnoElemDec(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-AnnoElemDec(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-AnnoElemDec(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-AnnoDecHead(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-AnnoDecHead(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-AnnoDecHead(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-AnnoDecHead(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-AnnoDecHead(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-AnnoDecHead(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-AnnoDec(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-AnnoDec(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-AnnoDec(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-AnnoDec(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-AnnoDec(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-AnnoDec(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-AbstractMethodMod(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-AbstractMethodMod(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-AbstractMethodMod(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-AbstractMethodMod(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-AbstractMethodMod(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-AbstractMethodMod(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-AbstractMethodDec(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-AbstractMethodDec(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-AbstractMethodDec(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-AbstractMethodDec(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-AbstractMethodDec(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-AbstractMethodDec(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-ConstantMod(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-ConstantMod(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-ConstantMod(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-ConstantMod(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-ConstantMod(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-ConstantMod(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-EnumBodyDecs(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-EnumBodyDecs(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-EnumBodyDecs(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-EnumBodyDecs(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-EnumBodyDecs(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-EnumBodyDecs(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-EnumConstArgs(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-EnumConstArgs(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-EnumConstArgs(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-EnumConstArgs(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-EnumConstArgs(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-EnumConstArgs(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-EnumConst(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-EnumConst(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-EnumConst(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-EnumConst(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-EnumConst(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-EnumConst(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-EnumBody(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-EnumBody(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-EnumBody(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-EnumBody(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-EnumBody(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-EnumBody(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-EnumDec(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-EnumDec(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-EnumDec(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-EnumDec(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-EnumDec(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-EnumDec(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-ConstrMod(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-ConstrMod(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-ConstrMod(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-ConstrMod(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-ConstrMod(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-ConstrMod(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-ConstrInv(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-ConstrInv(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-ConstrInv(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-ConstrInv(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-ConstrInv(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-ConstrInv(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-StaticInit(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-StaticInit(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-StaticInit(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-StaticInit(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-StaticInit(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-StaticInit(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-InstanceInit(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-InstanceInit(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-InstanceInit(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-InstanceInit(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-InstanceInit(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-InstanceInit(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-MethodBody(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-MethodBody(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-MethodBody(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-MethodBody(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-MethodBody(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-MethodBody(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-ExceptionType(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-ExceptionType(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-ExceptionType(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-ExceptionType(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-ExceptionType(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-ExceptionType(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-Throws(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-Throws(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-Throws(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-Throws(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-Throws(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-Throws(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-MethodMod(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-MethodMod(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-MethodMod(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-MethodMod(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-MethodMod(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-MethodMod(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-VarMod(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-VarMod(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-VarMod(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-VarMod(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-VarMod(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-VarMod(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-ResultType(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-ResultType(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-ResultType(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-ResultType(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-ResultType(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-ResultType(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-MethodParams(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-MethodParams(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-MethodParams(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-MethodParams(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-MethodParams(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-MethodParams(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-Block(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-Block(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-Block(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-Block(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-Block(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-Block(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-CatchClause(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-CatchClause(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-CatchClause(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-CatchClause(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-CatchClause(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-CatchClause(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-SwitchLabel(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-SwitchLabel(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-SwitchLabel(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-SwitchLabel(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-SwitchLabel(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-SwitchLabel(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-SwitchGroup(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-SwitchGroup(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-SwitchGroup(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-SwitchGroup(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-SwitchGroup(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-SwitchGroup(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-SwitchBlock(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-SwitchBlock(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-SwitchBlock(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-SwitchBlock(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-SwitchBlock(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-SwitchBlock(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-FieldMod(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-FieldMod(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-FieldMod(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-FieldMod(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-FieldMod(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-FieldMod(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-VarInit(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-VarInit(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-VarInit(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-VarInit(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-VarInit(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-VarInit(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-Dim(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-Dim(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-Dim(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-Dim(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-Dim(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-Dim(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-VarDecId(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-VarDecId(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-VarDecId(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-VarDecId(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-VarDecId(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-VarDecId(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-VarDec(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-VarDec(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-VarDec(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-VarDec(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-VarDec(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-VarDec(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-ArrayInit(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-ArrayInit(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-ArrayInit(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-ArrayInit(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-ArrayInit(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-ArrayInit(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-ElemVal(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-ElemVal(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-ElemVal(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-ElemVal(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-ElemVal(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-ElemVal(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-ElemValPair(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-ElemValPair(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-ElemValPair(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-ElemValPair(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-ElemValPair(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-ElemValPair(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-Anno(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-Anno(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-Anno(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-Anno(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-Anno(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-Anno(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-ArrayType(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-ArrayType(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-ArrayType(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-ArrayType(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-ArrayType(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-ArrayType(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-TypeDecSpec(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-TypeDecSpec(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-TypeDecSpec(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-TypeDecSpec(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-TypeDecSpec(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-TypeDecSpec(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-InterfaceType(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-InterfaceType(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-InterfaceType(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-InterfaceType(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-InterfaceType(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-InterfaceType(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-ClassType(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-ClassType(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-ClassType(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-ClassType(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-ClassType(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-ClassType(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-ClassOrInterfaceType(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-ClassOrInterfaceType(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-ClassOrInterfaceType(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-ClassOrInterfaceType(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-ClassOrInterfaceType(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-ClassOrInterfaceType(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-RefType(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-RefType(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-RefType(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-RefType(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-RefType(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-RefType(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-TypeVarId(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-TypeVarId(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-TypeVarId(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-TypeVarId(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-TypeVarId(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-TypeVarId(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-TypeParams(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-TypeParams(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-TypeParams(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-TypeParams(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-TypeParams(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-TypeParams(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-TypeBound(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-TypeBound(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-TypeBound(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-TypeBound(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-TypeBound(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-TypeBound(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-TypeParam(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-TypeParam(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-TypeParam(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-TypeParam(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-TypeParam(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-TypeParam(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-WildcardBound(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-WildcardBound(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-WildcardBound(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-WildcardBound(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-WildcardBound(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-WildcardBound(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-ActualTypeArg(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-ActualTypeArg(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-ActualTypeArg(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-ActualTypeArg(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-ActualTypeArg(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-ActualTypeArg(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-TypeArgs(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-TypeArgs(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-TypeArgs(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-TypeArgs(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-TypeArgs(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-TypeArgs(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-ClassLiteral(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-ClassLiteral(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-ClassLiteral(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-ClassLiteral(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-ClassLiteral(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-ClassLiteral(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-Literal(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-Literal(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-Literal(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-Literal(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-Literal(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-Literal(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-MethodName(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-MethodName(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-MethodName(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-MethodName(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-MethodName(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-MethodName(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-ExprName(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-ExprName(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-ExprName(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-ExprName(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-ExprName(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-ExprName(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-TypeName(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-TypeName(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-TypeName(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-TypeName(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-TypeName(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-TypeName(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-AmbName(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-AmbName(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-AmbName(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-AmbName(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-AmbName(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-AmbName(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-NullLiteral(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-NullLiteral(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-NullLiteral(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-NullLiteral(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-NullLiteral(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-NullLiteral(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-StringChars(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-StringChars(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-StringChars(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-StringChars(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-StringChars(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-StringChars(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-StringPart(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-StringPart(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-StringPart(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-StringPart(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-StringPart(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-StringPart(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-StringLiteral(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-StringLiteral(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-StringLiteral(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-StringLiteral(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-StringLiteral(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-StringLiteral(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-SingleChar(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-SingleChar(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-SingleChar(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-SingleChar(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-SingleChar(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-SingleChar(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-CharContent(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-CharContent(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-CharContent(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-CharContent(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-CharContent(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-CharContent(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-CharLiteral(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-CharLiteral(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-CharLiteral(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-CharLiteral(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-CharLiteral(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-CharLiteral(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-LastOcta(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-LastOcta(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-LastOcta(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-LastOcta(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-LastOcta(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-LastOcta(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-OctaEscape(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-OctaEscape(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-OctaEscape(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-OctaEscape(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-OctaEscape(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-OctaEscape(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-NamedEscape(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-NamedEscape(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-NamedEscape(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-NamedEscape(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-NamedEscape(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-NamedEscape(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-EscapeSeq(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-EscapeSeq(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-EscapeSeq(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-EscapeSeq(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-EscapeSeq(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-EscapeSeq(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-Bool(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-Bool(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-Bool(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-Bool(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-Bool(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-Bool(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-BoolLiteral(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-BoolLiteral(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-BoolLiteral(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-BoolLiteral(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-BoolLiteral(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-BoolLiteral(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-FloatLiteral(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-FloatLiteral(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-FloatLiteral(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-FloatLiteral(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-FloatLiteral(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-FloatLiteral(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-HexaDoubleLiteral(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-HexaDoubleLiteral(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-HexaDoubleLiteral(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-HexaDoubleLiteral(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-HexaDoubleLiteral(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-HexaDoubleLiteral(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-DeciDoubleLiteral(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-DeciDoubleLiteral(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-DeciDoubleLiteral(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-DeciDoubleLiteral(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-DeciDoubleLiteral(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-DeciDoubleLiteral(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-HexaFloatLiteral(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-HexaFloatLiteral(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-HexaFloatLiteral(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-HexaFloatLiteral(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-HexaFloatLiteral(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-HexaFloatLiteral(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-DeciFloatLiteral(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-DeciFloatLiteral(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-DeciFloatLiteral(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-DeciFloatLiteral(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-DeciFloatLiteral(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-DeciFloatLiteral(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-IntLiteral(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-IntLiteral(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-IntLiteral(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-IntLiteral(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-IntLiteral(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-IntLiteral(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-OctaLiteral(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-OctaLiteral(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-OctaLiteral(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-OctaLiteral(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-OctaLiteral(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-OctaLiteral(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-HexaLiteral(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-HexaLiteral(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-HexaLiteral(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-HexaLiteral(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-HexaLiteral(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-HexaLiteral(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-DeciLiteral(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-DeciLiteral(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-DeciLiteral(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-DeciLiteral(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-DeciLiteral(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-DeciLiteral(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-StrictFP(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-StrictFP(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-StrictFP(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-StrictFP(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-StrictFP(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-StrictFP(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-Synchronized(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-Synchronized(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-Synchronized(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-Synchronized(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-Synchronized(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-Synchronized(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-Volatile(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-Volatile(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-Volatile(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-Volatile(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-Volatile(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-Volatile(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-Transient(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-Transient(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-Transient(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-Transient(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-Transient(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-Transient(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-Native(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-Native(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-Native(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-Native(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-Native(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-Native(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-Static(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-Static(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-Static(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-Static(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-Static(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-Static(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-Final(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-Final(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-Final(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-Final(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-Final(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-Final(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-Abstract(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-Abstract(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-Abstract(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-Abstract(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-Abstract(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-Abstract(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-Protected(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-Protected(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-Protected(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-Protected(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-Protected(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-Protected(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-Private(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-Private(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-Private(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-Private(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-Private(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-Private(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-Public(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-Public(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-Public(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-Public(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-Public(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-Public(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-Access(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-Access(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-Access(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-Access(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-Access(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-Access(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-Context(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-Context(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-Context(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-Context(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-Context(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-Context(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-ClassDec(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-ClassDec(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-ClassDec(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-ClassDec(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-ClassDec(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-ClassDec(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-ImplementsDec(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-ImplementsDec(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-ImplementsDec(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-ImplementsDec(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-ImplementsDec(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-ImplementsDec(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-FieldDec(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-FieldDec(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-FieldDec(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-FieldDec(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-FieldDec(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-FieldDec(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-MethodDec(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-MethodDec(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-MethodDec(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-MethodDec(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-MethodDec(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-MethodDec(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-ConstrDec(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-ConstrDec(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-ConstrDec(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-ConstrDec(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-ConstrDec(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-ConstrDec(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-ConstrBody(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-ConstrBody(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-ConstrBody(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-ConstrBody(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-ConstrBody(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-ConstrBody(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-InterfaceDec(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-InterfaceDec(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-InterfaceDec(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-InterfaceDec(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-InterfaceDec(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-InterfaceDec(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-ExtendsInterface(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-ExtendsInterface(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-ExtendsInterface(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-ExtendsInterface(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-ExtendsInterface(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-ExtendsInterface(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-ConstantDec(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-ConstantDec(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-ConstantDec(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-ConstantDec(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-ConstantDec(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-ConstantDec(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-CompilationUnit(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-CompilationUnit(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-CompilationUnit(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-CompilationUnit(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-CompilationUnit(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-CompilationUnit(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-PackageDec(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-PackageDec(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-PackageDec(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-PackageDec(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-PackageDec(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-PackageDec(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-PackageName(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-PackageName(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-PackageName(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-PackageName(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-PackageName(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-PackageName(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-ID(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-ID(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-ID(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-ID(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-ID(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-ID(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-PackageOrTypeName(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-PackageOrTypeName(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-PackageOrTypeName(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-PackageOrTypeName(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-PackageOrTypeName(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-PackageOrTypeName(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-BlockStm(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-BlockStm(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-BlockStm(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-BlockStm(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-BlockStm(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-BlockStm(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-Stm(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-Stm(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-Stm(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-Stm(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-Stm(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-Stm(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-Expr(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-Expr(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-Expr(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-Expr(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-LocalVarDec(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-LocalVarDec(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-LocalVarDec(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-LocalVarDec(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-LocalVarDec(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-LocalVarDec(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-FormalParam(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-FormalParam(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-FormalParam(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-FormalParam(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-FormalParam(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-FormalParam(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-EnumDecHead(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-EnumDecHead(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-EnumDecHead(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-EnumDecHead(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-EnumDecHead(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-EnumDecHead(sibling-uris|lang, partition, unique*, uri*)
	
	specific-siblings-list-UnicodeEscape(|lang, partition, unique*, uri*) =
	  []
	+ [ specific-collect-UnicodeEscape(?sibling-uri*|lang, partition, unique*, uri*)
	  | specific-siblings-list-UnicodeEscape(|lang, partition, unique*, sibling-uri*) ]
	
	specific-siblings-option-UnicodeEscape(sibling-uris|lang, partition, unique*, uri*) =
	  (None(); match(sibling-uris|uri*))
	+ Some(specific-collect-UnicodeEscape(sibling-uris|lang, partition, unique*, uri*))
	+ specific-collect-UnicodeEscape(sibling-uris|lang, partition, unique*, uri*)
	
	

rules // Constructor Some-1, Sort OptTypeArgs0

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-OptTypeArgs0(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-OptTypeArgs0(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Some-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Some-1(sibling-uris|lang, partition, unique*, uri*) =
    ?Some(_) 
  ; nabl-state-pop(?state*)
  ; try(Some-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Some-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Some-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Some-1-state-site)
  ; try(Some-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-Some-1(|lang, partition, unique*, child-uri*)
  ; try(Some-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Some-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Some-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Some-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Some-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Some-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-Some-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); Some(
        spectrav-debug(|"b-0 "); specific-collect-TypeArgs(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  Some-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Some-1-scoping-site = fail
  Some-1-new-scoping-site = fail
  Some-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Some-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Some-1-state-site = fail
  Some-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  Some-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Some-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Some-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  Some-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor None-0, Sort OptTypeArgs0

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-OptTypeArgs0(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-OptTypeArgs0(sibling-uris|lang, partition, unique*, uri*) = specific-collect-None-0(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-None-0(sibling-uris|lang, partition, unique*, uri*) =
    ?None() 
  ; nabl-state-pop(?state*)
  ; try(None-0-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      None-0-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(None-0-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(None-0-state-site)
  ; try(None-0-collect-rewrite(|lang, partition, uri*, uri'*))
  
  ; try(None-0-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(None-0-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(None-0-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(None-0-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(None-0-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(None-0-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  
    
  None-0-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  None-0-scoping-site = fail
  None-0-new-scoping-site = fail
  None-0-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  None-0-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  None-0-state-site = fail
  None-0-use-site(|lang, partition, unique*, uri*, state*) = fail
  None-0-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  None-0-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  None-0-import-site(|lang, partition, unique*, uri*, state*) = fail
  None-0-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Sort OptTypeArgs0, injected into TypeArgs

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-OptTypeArgs0(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-OptTypeArgs0(sibling-uris|lang, partition, unique*, uri*) = specific-collect-TypeArgs(sibling-uris|lang, partition, unique*, uri*)

rules // Sort Anno_ClassMod0, injected into ClassMod

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Anno_ClassMod0(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-Anno_ClassMod0(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ClassMod(sibling-uris|lang, partition, unique*, uri*)

rules // Sort Anno_ClassMod0, injected into Anno

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Anno_ClassMod0(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-Anno_ClassMod0(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Anno(sibling-uris|lang, partition, unique*, uri*)

rules // Sort Anno_InterfaceMod0, injected into InterfaceMod

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Anno_InterfaceMod0(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-Anno_InterfaceMod0(sibling-uris|lang, partition, unique*, uri*) = specific-collect-InterfaceMod(sibling-uris|lang, partition, unique*, uri*)

rules // Sort Anno_InterfaceMod0, injected into Anno

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Anno_InterfaceMod0(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-Anno_InterfaceMod0(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Anno(sibling-uris|lang, partition, unique*, uri*)

rules // Sort Anno_AbstractMethodMod0, injected into AbstractMethodMod

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Anno_AbstractMethodMod0(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-Anno_AbstractMethodMod0(sibling-uris|lang, partition, unique*, uri*) = specific-collect-AbstractMethodMod(sibling-uris|lang, partition, unique*, uri*)

rules // Sort Anno_AbstractMethodMod0, injected into Anno

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Anno_AbstractMethodMod0(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-Anno_AbstractMethodMod0(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Anno(sibling-uris|lang, partition, unique*, uri*)

rules // Sort Anno_ConstantMod0, injected into ConstantMod

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Anno_ConstantMod0(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-Anno_ConstantMod0(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ConstantMod(sibling-uris|lang, partition, unique*, uri*)

rules // Sort Anno_ConstantMod0, injected into Anno

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Anno_ConstantMod0(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-Anno_ConstantMod0(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Anno(sibling-uris|lang, partition, unique*, uri*)

rules // Sort Anno_ConstrMod0, injected into ConstrMod

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Anno_ConstrMod0(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-Anno_ConstrMod0(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ConstrMod(sibling-uris|lang, partition, unique*, uri*)

rules // Sort Anno_ConstrMod0, injected into Anno

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Anno_ConstrMod0(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-Anno_ConstrMod0(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Anno(sibling-uris|lang, partition, unique*, uri*)

rules // Sort Anno_VarMod0, injected into VarMod

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Anno_VarMod0(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-Anno_VarMod0(sibling-uris|lang, partition, unique*, uri*) = specific-collect-VarMod(sibling-uris|lang, partition, unique*, uri*)

rules // Sort Anno_VarMod0, injected into Anno

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Anno_VarMod0(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-Anno_VarMod0(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Anno(sibling-uris|lang, partition, unique*, uri*)

rules // Sort Anno_MethodMod0, injected into MethodMod

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Anno_MethodMod0(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-Anno_MethodMod0(sibling-uris|lang, partition, unique*, uri*) = specific-collect-MethodMod(sibling-uris|lang, partition, unique*, uri*)

rules // Sort Anno_MethodMod0, injected into Anno

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Anno_MethodMod0(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-Anno_MethodMod0(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Anno(sibling-uris|lang, partition, unique*, uri*)

rules // Sort Anno_FieldMod0, injected into FieldMod

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Anno_FieldMod0(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-Anno_FieldMod0(sibling-uris|lang, partition, unique*, uri*) = specific-collect-FieldMod(sibling-uris|lang, partition, unique*, uri*)

rules // Sort Anno_FieldMod0, injected into Anno

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Anno_FieldMod0(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-Anno_FieldMod0(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Anno(sibling-uris|lang, partition, unique*, uri*)

rules // Constructor Files-1, Sort Files

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Files(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Files(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Files-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Files-1(sibling-uris|lang, partition, unique*, uri*) =
    ?Files(_) 
  ; nabl-state-pop(?state*)
  ; try(Files-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Files-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Files-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Files-1-state-site)
  ; try(Files-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-Files-1(|lang, partition, unique*, child-uri*)
  ; try(Files-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Files-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Files-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Files-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Files-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Files-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-Files-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); Files(
        spectrav-debug(|"b-0 "); specific-siblings-list-File(|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  Files-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Files-1-scoping-site = fail
  Files-1-new-scoping-site = fail
  Files-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Files-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Files-1-state-site = fail
  Files-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  Files-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Files-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Files-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  Files-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor File-1, Sort File

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-File(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-File(sibling-uris|lang, partition, unique*, uri*) = specific-collect-File-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-File-1(sibling-uris|lang, partition, unique*, uri*) =
    ?File(_) 
  ; nabl-state-pop(?state*)
  ; try(File-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      File-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(File-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(File-1-state-site)
  ; try(File-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-File-1(|lang, partition, unique*, child-uri*)
  ; try(File-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(File-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(File-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(File-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(File-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(File-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-File-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); File(
        spectrav-debug(|"b-0 "); specific-collect-CompilationUnit(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  File-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  File-1-scoping-site = fail
  File-1-new-scoping-site = fail
  File-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  File-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  File-1-state-site = fail
  File-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  File-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  File-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  File-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  File-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Semicolon-0, Sort TypeDec

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-TypeDec(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-TypeDec(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Semicolon-0(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Semicolon-0(sibling-uris|lang, partition, unique*, uri*) =
    ?Semicolon() 
  ; nabl-state-pop(?state*)
  ; try(Semicolon-0-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Semicolon-0-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Semicolon-0-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Semicolon-0-state-site)
  ; try(Semicolon-0-collect-rewrite(|lang, partition, uri*, uri'*))
  
  ; try(Semicolon-0-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Semicolon-0-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Semicolon-0-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Semicolon-0-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Semicolon-0-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Semicolon-0-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  
    
  Semicolon-0-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Semicolon-0-scoping-site = fail
  Semicolon-0-new-scoping-site = fail
  Semicolon-0-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Semicolon-0-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Semicolon-0-state-site = fail
  Semicolon-0-use-site(|lang, partition, unique*, uri*, state*) = fail
  Semicolon-0-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Semicolon-0-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Semicolon-0-import-site(|lang, partition, unique*, uri*, state*) = fail
  Semicolon-0-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Sort TypeDec, injected into InterfaceDec

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-TypeDec(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-TypeDec(sibling-uris|lang, partition, unique*, uri*) = specific-collect-InterfaceDec(sibling-uris|lang, partition, unique*, uri*)

rules // Sort TypeDec, injected into ClassDec

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-TypeDec(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-TypeDec(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ClassDec(sibling-uris|lang, partition, unique*, uri*)

rules // Constructor StaticImportOnDemandDec-1, Sort ImportDec

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ImportDec(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-ImportDec(sibling-uris|lang, partition, unique*, uri*) = specific-collect-StaticImportOnDemandDec-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-StaticImportOnDemandDec-1(sibling-uris|lang, partition, unique*, uri*) =
    ?StaticImportOnDemandDec(_) 
  ; nabl-state-pop(?state*)
  ; try(StaticImportOnDemandDec-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      StaticImportOnDemandDec-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(StaticImportOnDemandDec-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(StaticImportOnDemandDec-1-state-site)
  ; try(StaticImportOnDemandDec-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-StaticImportOnDemandDec-1(|lang, partition, unique*, child-uri*)
  ; try(StaticImportOnDemandDec-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(StaticImportOnDemandDec-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(StaticImportOnDemandDec-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(StaticImportOnDemandDec-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(StaticImportOnDemandDec-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(StaticImportOnDemandDec-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-StaticImportOnDemandDec-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); StaticImportOnDemandDec(
        spectrav-debug(|"b-0 "); specific-collect-TypeName(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  StaticImportOnDemandDec-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  StaticImportOnDemandDec-1-scoping-site = fail
  StaticImportOnDemandDec-1-new-scoping-site = fail
  StaticImportOnDemandDec-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  StaticImportOnDemandDec-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  StaticImportOnDemandDec-1-state-site = fail
  StaticImportOnDemandDec-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  StaticImportOnDemandDec-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  StaticImportOnDemandDec-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  StaticImportOnDemandDec-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  StaticImportOnDemandDec-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor StaticImportDec-2, Sort ImportDec

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ImportDec(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-ImportDec(sibling-uris|lang, partition, unique*, uri*) = specific-collect-StaticImportDec-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-StaticImportDec-2(sibling-uris|lang, partition, unique*, uri*) =
    ?StaticImportDec(_, _) 
  ; nabl-state-pop(?state*)
  ; try(StaticImportDec-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      StaticImportDec-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(StaticImportDec-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(StaticImportDec-2-state-site)
  ; try(StaticImportDec-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-StaticImportDec-2(|lang, partition, unique*, child-uri*)
  ; try(StaticImportDec-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(StaticImportDec-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(StaticImportDec-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(StaticImportDec-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(StaticImportDec-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(StaticImportDec-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-StaticImportDec-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); StaticImportDec(
        spectrav-debug(|"b-0 "); specific-collect-TypeName(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-ID(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  StaticImportDec-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  StaticImportDec-2-scoping-site = fail
  StaticImportDec-2-new-scoping-site = fail
  StaticImportDec-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  StaticImportDec-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  StaticImportDec-2-state-site = fail
  StaticImportDec-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  StaticImportDec-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  StaticImportDec-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  StaticImportDec-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  StaticImportDec-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor TypeImportOnDemandDec-1, Sort ImportDec

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ImportDec(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-ImportDec(sibling-uris|lang, partition, unique*, uri*) = specific-collect-TypeImportOnDemandDec-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-TypeImportOnDemandDec-1(sibling-uris|lang, partition, unique*, uri*) =
    ?TypeImportOnDemandDec(_) 
  ; nabl-state-pop(?state*)
  ; try(TypeImportOnDemandDec-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      TypeImportOnDemandDec-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(TypeImportOnDemandDec-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(TypeImportOnDemandDec-1-state-site)
  ; try(TypeImportOnDemandDec-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-TypeImportOnDemandDec-1(|lang, partition, unique*, child-uri*)
  ; try(TypeImportOnDemandDec-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(TypeImportOnDemandDec-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(TypeImportOnDemandDec-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(TypeImportOnDemandDec-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(TypeImportOnDemandDec-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(TypeImportOnDemandDec-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-TypeImportOnDemandDec-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); TypeImportOnDemandDec(
        spectrav-debug(|"b-0 "); specific-collect-PackageName(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  TypeImportOnDemandDec-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  TypeImportOnDemandDec-1-scoping-site = fail
  TypeImportOnDemandDec-1-new-scoping-site = fail
  TypeImportOnDemandDec-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  TypeImportOnDemandDec-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  TypeImportOnDemandDec-1-state-site = fail
  TypeImportOnDemandDec-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  TypeImportOnDemandDec-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  TypeImportOnDemandDec-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  TypeImportOnDemandDec-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  TypeImportOnDemandDec-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor TypeImportDec-1, Sort ImportDec

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ImportDec(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-ImportDec(sibling-uris|lang, partition, unique*, uri*) = specific-collect-TypeImportDec-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-TypeImportDec-1(sibling-uris|lang, partition, unique*, uri*) =
    ?TypeImportDec(_) 
  ; nabl-state-pop(?state*)
  ; try(TypeImportDec-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      TypeImportDec-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(TypeImportDec-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(TypeImportDec-1-state-site)
  ; try(TypeImportDec-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-TypeImportDec-1(|lang, partition, unique*, child-uri*)
  ; try(TypeImportDec-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(TypeImportDec-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(TypeImportDec-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(TypeImportDec-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(TypeImportDec-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(TypeImportDec-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-TypeImportDec-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); TypeImportDec(
        spectrav-debug(|"b-0 "); specific-collect-TypeName(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  TypeImportDec-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  TypeImportDec-1-scoping-site = fail
  TypeImportDec-1-new-scoping-site = fail
  TypeImportDec-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  TypeImportDec-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  TypeImportDec-1-state-site = fail
  TypeImportDec-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  TypeImportDec-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  TypeImportDec-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  TypeImportDec-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  TypeImportDec-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Sort LHS, injected into ArrayAccess

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-LHS(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-LHS(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ArrayAccess(sibling-uris|lang, partition, unique*, uri*)

rules // Sort LHS, injected into FieldAccess

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-LHS(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-LHS(sibling-uris|lang, partition, unique*, uri*) = specific-collect-FieldAccess(sibling-uris|lang, partition, unique*, uri*)

rules // Sort LHS, injected into ExprName

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-LHS(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-LHS(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ExprName(sibling-uris|lang, partition, unique*, uri*)

rules // Sort CondMid, injected into Expr

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-CondMid(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-CondMid(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)

rules // Sort Type, injected into RefType

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Type(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-Type(sibling-uris|lang, partition, unique*, uri*) = specific-collect-RefType(sibling-uris|lang, partition, unique*, uri*)

rules // Sort Type, injected into PrimType

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Type(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-Type(sibling-uris|lang, partition, unique*, uri*) = specific-collect-PrimType(sibling-uris|lang, partition, unique*, uri*)

rules // Constructor Double-0, Sort FloatType

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-FloatType(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-FloatType(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Double-0(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Double-0(sibling-uris|lang, partition, unique*, uri*) =
    ?Double() 
  ; nabl-state-pop(?state*)
  ; try(Double-0-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Double-0-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Double-0-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Double-0-state-site)
  ; try(Double-0-collect-rewrite(|lang, partition, uri*, uri'*))
  
  ; try(Double-0-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Double-0-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Double-0-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Double-0-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Double-0-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Double-0-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  
    
  Double-0-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Double-0-scoping-site = fail
  Double-0-new-scoping-site = fail
  Double-0-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Double-0-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Double-0-state-site = fail
  Double-0-use-site(|lang, partition, unique*, uri*, state*) = fail
  Double-0-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Double-0-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Double-0-import-site(|lang, partition, unique*, uri*, state*) = fail
  Double-0-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Float-0, Sort FloatType

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-FloatType(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-FloatType(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Float-0(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Float-0(sibling-uris|lang, partition, unique*, uri*) =
    ?Float() 
  ; nabl-state-pop(?state*)
  ; try(Float-0-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Float-0-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Float-0-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Float-0-state-site)
  ; try(Float-0-collect-rewrite(|lang, partition, uri*, uri'*))
  
  ; try(Float-0-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Float-0-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Float-0-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Float-0-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Float-0-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Float-0-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  
    
  Float-0-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Float-0-scoping-site = fail
  Float-0-new-scoping-site = fail
  Float-0-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Float-0-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Float-0-state-site = fail
  Float-0-use-site(|lang, partition, unique*, uri*, state*) = fail
  Float-0-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Float-0-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Float-0-import-site(|lang, partition, unique*, uri*, state*) = fail
  Float-0-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Char-0, Sort IntType

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-IntType(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-IntType(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Char-0(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Char-0(sibling-uris|lang, partition, unique*, uri*) =
    ?Char() 
  ; nabl-state-pop(?state*)
  ; try(Char-0-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Char-0-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Char-0-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Char-0-state-site)
  ; try(Char-0-collect-rewrite(|lang, partition, uri*, uri'*))
  
  ; try(Char-0-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Char-0-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Char-0-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Char-0-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Char-0-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Char-0-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  
    
  Char-0-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Char-0-scoping-site = fail
  Char-0-new-scoping-site = fail
  Char-0-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Char-0-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Char-0-state-site = fail
  Char-0-use-site(|lang, partition, unique*, uri*, state*) = fail
  Char-0-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Char-0-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Char-0-import-site(|lang, partition, unique*, uri*, state*) = fail
  Char-0-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Long-0, Sort IntType

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-IntType(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-IntType(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Long-0(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Long-0(sibling-uris|lang, partition, unique*, uri*) =
    ?Long() 
  ; nabl-state-pop(?state*)
  ; try(Long-0-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Long-0-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Long-0-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Long-0-state-site)
  ; try(Long-0-collect-rewrite(|lang, partition, uri*, uri'*))
  
  ; try(Long-0-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Long-0-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Long-0-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Long-0-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Long-0-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Long-0-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  
    
  Long-0-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Long-0-scoping-site = fail
  Long-0-new-scoping-site = fail
  Long-0-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Long-0-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Long-0-state-site = fail
  Long-0-use-site(|lang, partition, unique*, uri*, state*) = fail
  Long-0-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Long-0-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Long-0-import-site(|lang, partition, unique*, uri*, state*) = fail
  Long-0-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Int-0, Sort IntType

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-IntType(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-IntType(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Int-0(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Int-0(sibling-uris|lang, partition, unique*, uri*) =
    ?Int() 
  ; nabl-state-pop(?state*)
  ; try(Int-0-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Int-0-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Int-0-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Int-0-state-site)
  ; try(Int-0-collect-rewrite(|lang, partition, uri*, uri'*))
  
  ; try(Int-0-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Int-0-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Int-0-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Int-0-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Int-0-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Int-0-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  
    
  Int-0-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Int-0-scoping-site = fail
  Int-0-new-scoping-site = fail
  Int-0-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Int-0-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Int-0-state-site = fail
  Int-0-use-site(|lang, partition, unique*, uri*, state*) = fail
  Int-0-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Int-0-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Int-0-import-site(|lang, partition, unique*, uri*, state*) = fail
  Int-0-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Short-0, Sort IntType

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-IntType(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-IntType(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Short-0(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Short-0(sibling-uris|lang, partition, unique*, uri*) =
    ?Short() 
  ; nabl-state-pop(?state*)
  ; try(Short-0-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Short-0-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Short-0-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Short-0-state-site)
  ; try(Short-0-collect-rewrite(|lang, partition, uri*, uri'*))
  
  ; try(Short-0-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Short-0-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Short-0-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Short-0-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Short-0-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Short-0-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  
    
  Short-0-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Short-0-scoping-site = fail
  Short-0-new-scoping-site = fail
  Short-0-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Short-0-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Short-0-state-site = fail
  Short-0-use-site(|lang, partition, unique*, uri*, state*) = fail
  Short-0-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Short-0-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Short-0-import-site(|lang, partition, unique*, uri*, state*) = fail
  Short-0-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Byte-0, Sort IntType

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-IntType(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-IntType(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Byte-0(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Byte-0(sibling-uris|lang, partition, unique*, uri*) =
    ?Byte() 
  ; nabl-state-pop(?state*)
  ; try(Byte-0-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Byte-0-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Byte-0-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Byte-0-state-site)
  ; try(Byte-0-collect-rewrite(|lang, partition, uri*, uri'*))
  
  ; try(Byte-0-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Byte-0-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Byte-0-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Byte-0-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Byte-0-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Byte-0-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  
    
  Byte-0-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Byte-0-scoping-site = fail
  Byte-0-new-scoping-site = fail
  Byte-0-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Byte-0-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Byte-0-state-site = fail
  Byte-0-use-site(|lang, partition, unique*, uri*, state*) = fail
  Byte-0-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Byte-0-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Byte-0-import-site(|lang, partition, unique*, uri*, state*) = fail
  Byte-0-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Sort NumType, injected into FloatType

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-NumType(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-NumType(sibling-uris|lang, partition, unique*, uri*) = specific-collect-FloatType(sibling-uris|lang, partition, unique*, uri*)

rules // Sort NumType, injected into IntType

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-NumType(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-NumType(sibling-uris|lang, partition, unique*, uri*) = specific-collect-IntType(sibling-uris|lang, partition, unique*, uri*)

rules // Constructor Boolean-0, Sort PrimType

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-PrimType(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-PrimType(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Boolean-0(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Boolean-0(sibling-uris|lang, partition, unique*, uri*) =
    ?Boolean() 
  ; nabl-state-pop(?state*)
  ; try(Boolean-0-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Boolean-0-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Boolean-0-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Boolean-0-state-site)
  ; try(Boolean-0-collect-rewrite(|lang, partition, uri*, uri'*))
  
  ; try(Boolean-0-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Boolean-0-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Boolean-0-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Boolean-0-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Boolean-0-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Boolean-0-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  
    
  Boolean-0-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Boolean-0-scoping-site = fail
  Boolean-0-new-scoping-site = fail
  Boolean-0-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Boolean-0-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Boolean-0-state-site = fail
  Boolean-0-use-site(|lang, partition, unique*, uri*, state*) = fail
  Boolean-0-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Boolean-0-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Boolean-0-import-site(|lang, partition, unique*, uri*, state*) = fail
  Boolean-0-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Sort PrimType, injected into NumType

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-PrimType(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-PrimType(sibling-uris|lang, partition, unique*, uri*) = specific-collect-NumType(sibling-uris|lang, partition, unique*, uri*)

rules // Constructor GenericMethod-3, Sort MethodSpec

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-MethodSpec(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-MethodSpec(sibling-uris|lang, partition, unique*, uri*) = specific-collect-GenericMethod-3(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-GenericMethod-3(sibling-uris|lang, partition, unique*, uri*) =
    ?GenericMethod(_, _, _) 
  ; nabl-state-pop(?state*)
  ; try(GenericMethod-3-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      GenericMethod-3-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(GenericMethod-3-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(GenericMethod-3-state-site)
  ; try(GenericMethod-3-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-GenericMethod-3(|lang, partition, unique*, child-uri*)
  ; try(GenericMethod-3-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(GenericMethod-3-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(GenericMethod-3-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(GenericMethod-3-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(GenericMethod-3-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(GenericMethod-3-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-GenericMethod-3(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); GenericMethod(
        spectrav-debug(|"b-0 "); specific-collect-AmbName(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-TypeArgs(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 "), spectrav-debug(|"b-2 "); specific-collect-ID(?sibling-uri-2*|lang, partition, unique*, sibling-uri-1*); spectrav-debug(|"a-2 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  GenericMethod-3-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  GenericMethod-3-scoping-site = fail
  GenericMethod-3-new-scoping-site = fail
  GenericMethod-3-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  GenericMethod-3-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  GenericMethod-3-state-site = fail
  GenericMethod-3-use-site(|lang, partition, unique*, uri*, state*) = fail
  GenericMethod-3-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  GenericMethod-3-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  GenericMethod-3-import-site(|lang, partition, unique*, uri*, state*) = fail
  GenericMethod-3-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor QSuperMethod-3, Sort MethodSpec

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-MethodSpec(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-MethodSpec(sibling-uris|lang, partition, unique*, uri*) = specific-collect-QSuperMethod-3(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-QSuperMethod-3(sibling-uris|lang, partition, unique*, uri*) =
    ?QSuperMethod(_, _, _) 
  ; nabl-state-pop(?state*)
  ; try(QSuperMethod-3-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      QSuperMethod-3-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(QSuperMethod-3-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(QSuperMethod-3-state-site)
  ; try(QSuperMethod-3-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-QSuperMethod-3(|lang, partition, unique*, child-uri*)
  ; try(QSuperMethod-3-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(QSuperMethod-3-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(QSuperMethod-3-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(QSuperMethod-3-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(QSuperMethod-3-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(QSuperMethod-3-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-QSuperMethod-3(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); QSuperMethod(
        spectrav-debug(|"b-0 "); specific-collect-TypeName(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-OptTypeArgs0(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 "), spectrav-debug(|"b-2 "); specific-collect-ID(?sibling-uri-2*|lang, partition, unique*, sibling-uri-1*); spectrav-debug(|"a-2 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  QSuperMethod-3-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  QSuperMethod-3-scoping-site = fail
  QSuperMethod-3-new-scoping-site = fail
  QSuperMethod-3-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  QSuperMethod-3-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  QSuperMethod-3-state-site = fail
  QSuperMethod-3-use-site(|lang, partition, unique*, uri*, state*) = fail
  QSuperMethod-3-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  QSuperMethod-3-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  QSuperMethod-3-import-site(|lang, partition, unique*, uri*, state*) = fail
  QSuperMethod-3-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor SuperMethod-2, Sort MethodSpec

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-MethodSpec(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-MethodSpec(sibling-uris|lang, partition, unique*, uri*) = specific-collect-SuperMethod-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-SuperMethod-2(sibling-uris|lang, partition, unique*, uri*) =
    ?SuperMethod(_, _) 
  ; nabl-state-pop(?state*)
  ; try(SuperMethod-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      SuperMethod-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(SuperMethod-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(SuperMethod-2-state-site)
  ; try(SuperMethod-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-SuperMethod-2(|lang, partition, unique*, child-uri*)
  ; try(SuperMethod-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(SuperMethod-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(SuperMethod-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(SuperMethod-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(SuperMethod-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(SuperMethod-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-SuperMethod-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); SuperMethod(
        spectrav-debug(|"b-0 "); specific-collect-OptTypeArgs0(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-ID(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  SuperMethod-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  SuperMethod-2-scoping-site = fail
  SuperMethod-2-new-scoping-site = fail
  SuperMethod-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  SuperMethod-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  SuperMethod-2-state-site = fail
  SuperMethod-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  SuperMethod-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  SuperMethod-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  SuperMethod-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  SuperMethod-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Method-3, Sort MethodSpec

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-MethodSpec(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-MethodSpec(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Method-3(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Method-3(sibling-uris|lang, partition, unique*, uri*) =
    ?Method(_, _, _) 
  ; nabl-state-pop(?state*)
  ; try(Method-3-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Method-3-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Method-3-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Method-3-state-site)
  ; try(Method-3-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-Method-3(|lang, partition, unique*, child-uri*)
  ; try(Method-3-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Method-3-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Method-3-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Method-3-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Method-3-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Method-3-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-Method-3(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); Method(
        spectrav-debug(|"b-0 "); specific-collect-Expr(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-OptTypeArgs0(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 "), spectrav-debug(|"b-2 "); specific-collect-ID(?sibling-uri-2*|lang, partition, unique*, sibling-uri-1*); spectrav-debug(|"a-2 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  Method-3-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Method-3-scoping-site = fail
  Method-3-new-scoping-site = fail
  Method-3-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Method-3-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Method-3-state-site = fail
  Method-3-use-site(|lang, partition, unique*, uri*, state*) = fail
  Method-3-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Method-3-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Method-3-import-site(|lang, partition, unique*, uri*, state*) = fail
  Method-3-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Method-1, Sort MethodSpec

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-MethodSpec(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-MethodSpec(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Method-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Method-1(sibling-uris|lang, partition, unique*, uri*) =
    ?Method(_) 
  ; nabl-state-pop(?state*)
  ; try(Method-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Method-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Method-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Method-1-state-site)
  ; try(Method-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-Method-1(|lang, partition, unique*, child-uri*)
  ; try(Method-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Method-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Method-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Method-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Method-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Method-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-Method-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); Method(
        spectrav-debug(|"b-0 "); specific-collect-MethodName(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  Method-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Method-1-scoping-site = fail
  Method-1-new-scoping-site = fail
  Method-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Method-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Method-1-state-site = fail
  Method-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  Method-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Method-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Method-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  Method-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor MethodArgs-1, Sort MethodArgs

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-MethodArgs(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-MethodArgs(sibling-uris|lang, partition, unique*, uri*) = specific-collect-MethodArgs-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-MethodArgs-1(sibling-uris|lang, partition, unique*, uri*) =
    ?MethodArgs(_) 
  ; nabl-state-pop(?state*)
  ; try(MethodArgs-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      MethodArgs-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(MethodArgs-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(MethodArgs-1-state-site)
  ; try(MethodArgs-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-MethodArgs-1(|lang, partition, unique*, child-uri*)
  ; try(MethodArgs-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(MethodArgs-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(MethodArgs-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(MethodArgs-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(MethodArgs-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(MethodArgs-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-MethodArgs-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); MethodArgs(
        spectrav-debug(|"b-0 "); specific-siblings-list-Expr(|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  MethodArgs-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  MethodArgs-1-scoping-site = fail
  MethodArgs-1-new-scoping-site = fail
  MethodArgs-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  MethodArgs-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  MethodArgs-1-state-site = fail
  MethodArgs-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  MethodArgs-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  MethodArgs-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  MethodArgs-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  MethodArgs-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Sort ArraySubscript, injected into Expr

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ArraySubscript(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-ArraySubscript(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)

rules // Constructor ArrayAccess-2, Sort ArrayAccess

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ArrayAccess(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-ArrayAccess(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ArrayAccess-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-ArrayAccess-2(sibling-uris|lang, partition, unique*, uri*) =
    ?ArrayAccess(_, _) 
  ; nabl-state-pop(?state*)
  ; try(ArrayAccess-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      ArrayAccess-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(ArrayAccess-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(ArrayAccess-2-state-site)
  ; try(ArrayAccess-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-ArrayAccess-2(|lang, partition, unique*, child-uri*)
  ; try(ArrayAccess-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(ArrayAccess-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(ArrayAccess-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(ArrayAccess-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(ArrayAccess-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(ArrayAccess-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-ArrayAccess-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); ArrayAccess(
        spectrav-debug(|"b-0 "); specific-collect-Expr(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-ArraySubscript(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  ArrayAccess-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  ArrayAccess-2-scoping-site = fail
  ArrayAccess-2-new-scoping-site = fail
  ArrayAccess-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  ArrayAccess-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  ArrayAccess-2-state-site = fail
  ArrayAccess-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  ArrayAccess-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  ArrayAccess-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  ArrayAccess-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  ArrayAccess-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor QSuperField-2, Sort FieldAccess

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-FieldAccess(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-FieldAccess(sibling-uris|lang, partition, unique*, uri*) = specific-collect-QSuperField-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-QSuperField-2(sibling-uris|lang, partition, unique*, uri*) =
    ?QSuperField(_, _) 
  ; nabl-state-pop(?state*)
  ; try(QSuperField-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      QSuperField-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(QSuperField-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(QSuperField-2-state-site)
  ; try(QSuperField-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-QSuperField-2(|lang, partition, unique*, child-uri*)
  ; try(QSuperField-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(QSuperField-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(QSuperField-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(QSuperField-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(QSuperField-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(QSuperField-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-QSuperField-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); QSuperField(
        spectrav-debug(|"b-0 "); specific-collect-TypeName(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-ID(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  QSuperField-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  QSuperField-2-scoping-site = fail
  QSuperField-2-new-scoping-site = fail
  QSuperField-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  QSuperField-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  QSuperField-2-state-site = fail
  QSuperField-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  QSuperField-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  QSuperField-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  QSuperField-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  QSuperField-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor SuperField-1, Sort FieldAccess

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-FieldAccess(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-FieldAccess(sibling-uris|lang, partition, unique*, uri*) = specific-collect-SuperField-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-SuperField-1(sibling-uris|lang, partition, unique*, uri*) =
    ?SuperField(_) 
  ; nabl-state-pop(?state*)
  ; try(SuperField-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      SuperField-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(SuperField-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(SuperField-1-state-site)
  ; try(SuperField-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-SuperField-1(|lang, partition, unique*, child-uri*)
  ; try(SuperField-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(SuperField-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(SuperField-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(SuperField-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(SuperField-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(SuperField-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-SuperField-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); SuperField(
        spectrav-debug(|"b-0 "); specific-collect-ID(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  SuperField-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  SuperField-1-scoping-site = fail
  SuperField-1-new-scoping-site = fail
  SuperField-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  SuperField-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  SuperField-1-state-site = fail
  SuperField-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  SuperField-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  SuperField-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  SuperField-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  SuperField-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Field-2, Sort FieldAccess

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-FieldAccess(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-FieldAccess(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Field-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Field-2(sibling-uris|lang, partition, unique*, uri*) =
    ?Field(_, _) 
  ; nabl-state-pop(?state*)
  ; try(Field-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Field-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Field-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Field-2-state-site)
  ; try(Field-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-Field-2(|lang, partition, unique*, child-uri*)
  ; try(Field-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Field-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Field-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Field-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Field-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Field-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-Field-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); Field(
        spectrav-debug(|"b-0 "); specific-collect-Expr(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-ID(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  Field-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Field-2-scoping-site = fail
  Field-2-new-scoping-site = fail
  Field-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Field-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Field-2-state-site = fail
  Field-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  Field-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Field-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Field-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  Field-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Dim-1, Sort DimExpr

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-DimExpr(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-DimExpr(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Dim-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Dim-1(sibling-uris|lang, partition, unique*, uri*) =
    ?Dim(_) 
  ; nabl-state-pop(?state*)
  ; try(Dim-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Dim-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Dim-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Dim-1-state-site)
  ; try(Dim-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-Dim-1(|lang, partition, unique*, child-uri*)
  ; try(Dim-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Dim-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Dim-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Dim-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Dim-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Dim-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-Dim-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); Dim(
        spectrav-debug(|"b-0 "); specific-collect-Expr(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  Dim-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Dim-1-scoping-site = fail
  Dim-1-new-scoping-site = fail
  Dim-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Dim-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Dim-1-state-site = fail
  Dim-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  Dim-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Dim-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Dim-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  Dim-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor UnboundWld-1, Sort ArrayBaseType

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ArrayBaseType(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-ArrayBaseType(sibling-uris|lang, partition, unique*, uri*) = specific-collect-UnboundWld-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-UnboundWld-1(sibling-uris|lang, partition, unique*, uri*) =
    ?UnboundWld(_) 
  ; nabl-state-pop(?state*)
  ; try(UnboundWld-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      UnboundWld-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(UnboundWld-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(UnboundWld-1-state-site)
  ; try(UnboundWld-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-UnboundWld-1(|lang, partition, unique*, child-uri*)
  ; try(UnboundWld-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(UnboundWld-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(UnboundWld-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(UnboundWld-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(UnboundWld-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(UnboundWld-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-UnboundWld-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); UnboundWld(
        spectrav-debug(|"b-0 "); specific-collect-TypeName(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  UnboundWld-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  UnboundWld-1-scoping-site = fail
  UnboundWld-1-new-scoping-site = fail
  UnboundWld-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  UnboundWld-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  UnboundWld-1-state-site = fail
  UnboundWld-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  UnboundWld-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  UnboundWld-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  UnboundWld-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  UnboundWld-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Sort ArrayBaseType, injected into TypeName

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ArrayBaseType(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-ArrayBaseType(sibling-uris|lang, partition, unique*, uri*) = specific-collect-TypeName(sibling-uris|lang, partition, unique*, uri*)

rules // Sort ArrayBaseType, injected into PrimType

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ArrayBaseType(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-ArrayBaseType(sibling-uris|lang, partition, unique*, uri*) = specific-collect-PrimType(sibling-uris|lang, partition, unique*, uri*)

rules // Constructor NewArrayInit-3, Sort ArrayCreationExpr

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ArrayCreationExpr(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-ArrayCreationExpr(sibling-uris|lang, partition, unique*, uri*) = specific-collect-NewArrayInit-3(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-NewArrayInit-3(sibling-uris|lang, partition, unique*, uri*) =
    ?NewArrayInit(_, _, _) 
  ; nabl-state-pop(?state*)
  ; try(NewArrayInit-3-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      NewArrayInit-3-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(NewArrayInit-3-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(NewArrayInit-3-state-site)
  ; try(NewArrayInit-3-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-NewArrayInit-3(|lang, partition, unique*, child-uri*)
  ; try(NewArrayInit-3-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(NewArrayInit-3-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(NewArrayInit-3-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(NewArrayInit-3-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(NewArrayInit-3-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(NewArrayInit-3-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-NewArrayInit-3(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); NewArrayInit(
        spectrav-debug(|"b-0 "); specific-collect-ArrayBaseType(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-siblings-list-Dim(|lang, partition, unique*, uri*); spectrav-debug(|"a-1 "), spectrav-debug(|"b-2 "); specific-collect-ArrayInit(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-2 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  NewArrayInit-3-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  NewArrayInit-3-scoping-site = fail
  NewArrayInit-3-new-scoping-site = fail
  NewArrayInit-3-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  NewArrayInit-3-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  NewArrayInit-3-state-site = fail
  NewArrayInit-3-use-site(|lang, partition, unique*, uri*, state*) = fail
  NewArrayInit-3-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  NewArrayInit-3-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  NewArrayInit-3-import-site(|lang, partition, unique*, uri*, state*) = fail
  NewArrayInit-3-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Semicolon-0, Sort ClassMemberDec

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ClassMemberDec(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-ClassMemberDec(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Semicolon-0(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Semicolon-0(sibling-uris|lang, partition, unique*, uri*) =
    ?Semicolon() 
  ; nabl-state-pop(?state*)
  ; try(Semicolon-0-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Semicolon-0-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Semicolon-0-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Semicolon-0-state-site)
  ; try(Semicolon-0-collect-rewrite(|lang, partition, uri*, uri'*))
  
  ; try(Semicolon-0-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Semicolon-0-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Semicolon-0-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Semicolon-0-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Semicolon-0-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Semicolon-0-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  
    
  Semicolon-0-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Semicolon-0-scoping-site = fail
  Semicolon-0-new-scoping-site = fail
  Semicolon-0-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Semicolon-0-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Semicolon-0-state-site = fail
  Semicolon-0-use-site(|lang, partition, unique*, uri*, state*) = fail
  Semicolon-0-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Semicolon-0-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Semicolon-0-import-site(|lang, partition, unique*, uri*, state*) = fail
  Semicolon-0-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Sort ClassMemberDec, injected into InterfaceDec

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ClassMemberDec(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-ClassMemberDec(sibling-uris|lang, partition, unique*, uri*) = specific-collect-InterfaceDec(sibling-uris|lang, partition, unique*, uri*)

rules // Sort ClassMemberDec, injected into ClassDec

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ClassMemberDec(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-ClassMemberDec(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ClassDec(sibling-uris|lang, partition, unique*, uri*)

rules // Sort ClassMemberDec, injected into MethodDec

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ClassMemberDec(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-ClassMemberDec(sibling-uris|lang, partition, unique*, uri*) = specific-collect-MethodDec(sibling-uris|lang, partition, unique*, uri*)

rules // Sort ClassMemberDec, injected into FieldDec

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ClassMemberDec(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-ClassMemberDec(sibling-uris|lang, partition, unique*, uri*) = specific-collect-FieldDec(sibling-uris|lang, partition, unique*, uri*)

rules // Sort ClassBodyDec, injected into ConstrDec

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ClassBodyDec(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-ClassBodyDec(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ConstrDec(sibling-uris|lang, partition, unique*, uri*)

rules // Sort ClassBodyDec, injected into StaticInit

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ClassBodyDec(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-ClassBodyDec(sibling-uris|lang, partition, unique*, uri*) = specific-collect-StaticInit(sibling-uris|lang, partition, unique*, uri*)

rules // Sort ClassBodyDec, injected into InstanceInit

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ClassBodyDec(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-ClassBodyDec(sibling-uris|lang, partition, unique*, uri*) = specific-collect-InstanceInit(sibling-uris|lang, partition, unique*, uri*)

rules // Sort ClassBodyDec, injected into ClassMemberDec

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ClassBodyDec(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-ClassBodyDec(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ClassMemberDec(sibling-uris|lang, partition, unique*, uri*)

rules // Constructor SuperDec-1, Sort Super

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Super(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Super(sibling-uris|lang, partition, unique*, uri*) = specific-collect-SuperDec-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-SuperDec-1(sibling-uris|lang, partition, unique*, uri*) =
    ?SuperDec(_) 
  ; nabl-state-pop(?state*)
  ; try(SuperDec-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      SuperDec-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(SuperDec-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(SuperDec-1-state-site)
  ; try(SuperDec-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-SuperDec-1(|lang, partition, unique*, child-uri*)
  ; try(SuperDec-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(SuperDec-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(SuperDec-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(SuperDec-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(SuperDec-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(SuperDec-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-SuperDec-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); SuperDec(
        spectrav-debug(|"b-0 "); specific-collect-ClassType(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  SuperDec-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  SuperDec-1-scoping-site = fail
  SuperDec-1-new-scoping-site = fail
  SuperDec-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  SuperDec-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  SuperDec-1-state-site = fail
  SuperDec-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  SuperDec-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  SuperDec-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  SuperDec-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  SuperDec-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Sort ClassMod, injected into StrictFP

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ClassMod(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-ClassMod(sibling-uris|lang, partition, unique*, uri*) = specific-collect-StrictFP(sibling-uris|lang, partition, unique*, uri*)

rules // Sort ClassMod, injected into Final

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ClassMod(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-ClassMod(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Final(sibling-uris|lang, partition, unique*, uri*)

rules // Sort ClassMod, injected into Static

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ClassMod(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-ClassMod(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Static(sibling-uris|lang, partition, unique*, uri*)

rules // Sort ClassMod, injected into Private

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ClassMod(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-ClassMod(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Private(sibling-uris|lang, partition, unique*, uri*)

rules // Sort ClassMod, injected into Protected

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ClassMod(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-ClassMod(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Protected(sibling-uris|lang, partition, unique*, uri*)

rules // Sort ClassMod, injected into Public

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ClassMod(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-ClassMod(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Public(sibling-uris|lang, partition, unique*, uri*)

rules // Sort ClassMod, injected into Abstract

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ClassMod(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-ClassMod(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Abstract(sibling-uris|lang, partition, unique*, uri*)

rules // Constructor ClassBody-1, Sort ClassBody

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ClassBody(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-ClassBody(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ClassBody-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-ClassBody-1(sibling-uris|lang, partition, unique*, uri*) =
    ?ClassBody(_) 
  ; nabl-state-pop(?state*)
  ; try(ClassBody-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      ClassBody-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(ClassBody-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(ClassBody-1-state-site)
  ; try(ClassBody-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-ClassBody-1(|lang, partition, unique*, child-uri*)
  ; try(ClassBody-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(ClassBody-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(ClassBody-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(ClassBody-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(ClassBody-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(ClassBody-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-ClassBody-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); ClassBody(
        spectrav-debug(|"b-0 "); specific-siblings-list-ClassBodyDec(|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  ClassBody-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  ClassBody-1-scoping-site = fail
  ClassBody-1-new-scoping-site = fail
  ClassBody-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  ClassBody-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  ClassBody-1-state-site = fail
  ClassBody-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  ClassBody-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  ClassBody-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  ClassBody-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  ClassBody-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Sort ClassDec, injected into EnumDec

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ClassDec(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-ClassDec(sibling-uris|lang, partition, unique*, uri*) = specific-collect-EnumDec(sibling-uris|lang, partition, unique*, uri*)

rules // Sort InterfaceMod, injected into StrictFP

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-InterfaceMod(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-InterfaceMod(sibling-uris|lang, partition, unique*, uri*) = specific-collect-StrictFP(sibling-uris|lang, partition, unique*, uri*)

rules // Sort InterfaceMod, injected into Static

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-InterfaceMod(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-InterfaceMod(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Static(sibling-uris|lang, partition, unique*, uri*)

rules // Sort InterfaceMod, injected into Abstract

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-InterfaceMod(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-InterfaceMod(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Abstract(sibling-uris|lang, partition, unique*, uri*)

rules // Sort InterfaceMod, injected into Private

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-InterfaceMod(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-InterfaceMod(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Private(sibling-uris|lang, partition, unique*, uri*)

rules // Sort InterfaceMod, injected into Protected

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-InterfaceMod(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-InterfaceMod(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Protected(sibling-uris|lang, partition, unique*, uri*)

rules // Sort InterfaceMod, injected into Public

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-InterfaceMod(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-InterfaceMod(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Public(sibling-uris|lang, partition, unique*, uri*)

rules // Constructor Semicolon-0, Sort InterfaceMemberDec

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-InterfaceMemberDec(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-InterfaceMemberDec(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Semicolon-0(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Semicolon-0(sibling-uris|lang, partition, unique*, uri*) =
    ?Semicolon() 
  ; nabl-state-pop(?state*)
  ; try(Semicolon-0-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Semicolon-0-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Semicolon-0-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Semicolon-0-state-site)
  ; try(Semicolon-0-collect-rewrite(|lang, partition, uri*, uri'*))
  
  ; try(Semicolon-0-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Semicolon-0-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Semicolon-0-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Semicolon-0-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Semicolon-0-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Semicolon-0-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  
    
  Semicolon-0-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Semicolon-0-scoping-site = fail
  Semicolon-0-new-scoping-site = fail
  Semicolon-0-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Semicolon-0-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Semicolon-0-state-site = fail
  Semicolon-0-use-site(|lang, partition, unique*, uri*, state*) = fail
  Semicolon-0-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Semicolon-0-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Semicolon-0-import-site(|lang, partition, unique*, uri*, state*) = fail
  Semicolon-0-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Sort InterfaceMemberDec, injected into InterfaceDec

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-InterfaceMemberDec(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-InterfaceMemberDec(sibling-uris|lang, partition, unique*, uri*) = specific-collect-InterfaceDec(sibling-uris|lang, partition, unique*, uri*)

rules // Sort InterfaceMemberDec, injected into ClassDec

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-InterfaceMemberDec(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-InterfaceMemberDec(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ClassDec(sibling-uris|lang, partition, unique*, uri*)

rules // Sort InterfaceMemberDec, injected into AbstractMethodDec

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-InterfaceMemberDec(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-InterfaceMemberDec(sibling-uris|lang, partition, unique*, uri*) = specific-collect-AbstractMethodDec(sibling-uris|lang, partition, unique*, uri*)

rules // Sort InterfaceMemberDec, injected into ConstantDec

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-InterfaceMemberDec(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-InterfaceMemberDec(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ConstantDec(sibling-uris|lang, partition, unique*, uri*)

rules // Sort InterfaceDec, injected into AnnoDec

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-InterfaceDec(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-InterfaceDec(sibling-uris|lang, partition, unique*, uri*) = specific-collect-AnnoDec(sibling-uris|lang, partition, unique*, uri*)

rules // Constructor DefaultVal-1, Sort DefaultVal

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-DefaultVal(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-DefaultVal(sibling-uris|lang, partition, unique*, uri*) = specific-collect-DefaultVal-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-DefaultVal-1(sibling-uris|lang, partition, unique*, uri*) =
    ?DefaultVal(_) 
  ; nabl-state-pop(?state*)
  ; try(DefaultVal-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      DefaultVal-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(DefaultVal-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(DefaultVal-1-state-site)
  ; try(DefaultVal-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-DefaultVal-1(|lang, partition, unique*, child-uri*)
  ; try(DefaultVal-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(DefaultVal-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(DefaultVal-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(DefaultVal-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(DefaultVal-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(DefaultVal-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-DefaultVal-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); DefaultVal(
        spectrav-debug(|"b-0 "); specific-collect-ElemVal(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  DefaultVal-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  DefaultVal-1-scoping-site = fail
  DefaultVal-1-new-scoping-site = fail
  DefaultVal-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  DefaultVal-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  DefaultVal-1-state-site = fail
  DefaultVal-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  DefaultVal-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  DefaultVal-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  DefaultVal-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  DefaultVal-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Semicolon-0, Sort AnnoElemDec

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-AnnoElemDec(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-AnnoElemDec(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Semicolon-0(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Semicolon-0(sibling-uris|lang, partition, unique*, uri*) =
    ?Semicolon() 
  ; nabl-state-pop(?state*)
  ; try(Semicolon-0-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Semicolon-0-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Semicolon-0-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Semicolon-0-state-site)
  ; try(Semicolon-0-collect-rewrite(|lang, partition, uri*, uri'*))
  
  ; try(Semicolon-0-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Semicolon-0-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Semicolon-0-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Semicolon-0-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Semicolon-0-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Semicolon-0-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  
    
  Semicolon-0-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Semicolon-0-scoping-site = fail
  Semicolon-0-new-scoping-site = fail
  Semicolon-0-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Semicolon-0-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Semicolon-0-state-site = fail
  Semicolon-0-use-site(|lang, partition, unique*, uri*, state*) = fail
  Semicolon-0-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Semicolon-0-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Semicolon-0-import-site(|lang, partition, unique*, uri*, state*) = fail
  Semicolon-0-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Sort AnnoElemDec, injected into AnnoDec

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-AnnoElemDec(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-AnnoElemDec(sibling-uris|lang, partition, unique*, uri*) = specific-collect-AnnoDec(sibling-uris|lang, partition, unique*, uri*)

rules // Sort AnnoElemDec, injected into EnumDec

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-AnnoElemDec(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-AnnoElemDec(sibling-uris|lang, partition, unique*, uri*) = specific-collect-EnumDec(sibling-uris|lang, partition, unique*, uri*)

rules // Sort AnnoElemDec, injected into InterfaceDec

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-AnnoElemDec(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-AnnoElemDec(sibling-uris|lang, partition, unique*, uri*) = specific-collect-InterfaceDec(sibling-uris|lang, partition, unique*, uri*)

rules // Sort AnnoElemDec, injected into ClassDec

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-AnnoElemDec(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-AnnoElemDec(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ClassDec(sibling-uris|lang, partition, unique*, uri*)

rules // Sort AnnoElemDec, injected into ConstantDec

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-AnnoElemDec(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-AnnoElemDec(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ConstantDec(sibling-uris|lang, partition, unique*, uri*)

rules // Constructor AnnoMethodDec-4, Sort AnnoElemDec

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-AnnoElemDec(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-AnnoElemDec(sibling-uris|lang, partition, unique*, uri*) = specific-collect-AnnoMethodDec-4(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-AnnoMethodDec-4(sibling-uris|lang, partition, unique*, uri*) =
    ?AnnoMethodDec(_, _, _, _) 
  ; nabl-state-pop(?state*)
  ; try(AnnoMethodDec-4-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      AnnoMethodDec-4-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(AnnoMethodDec-4-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(AnnoMethodDec-4-state-site)
  ; try(AnnoMethodDec-4-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-AnnoMethodDec-4(|lang, partition, unique*, child-uri*)
  ; try(AnnoMethodDec-4-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(AnnoMethodDec-4-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(AnnoMethodDec-4-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(AnnoMethodDec-4-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(AnnoMethodDec-4-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(AnnoMethodDec-4-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-AnnoMethodDec-4(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); AnnoMethodDec(
        spectrav-debug(|"b-0 "); specific-siblings-list-AbstractMethodMod(|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-Type(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-1 "), spectrav-debug(|"b-2 "); specific-collect-ID(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-2 "), spectrav-debug(|"b-3 "); specific-siblings-option-DefaultVal(?sibling-uri-2*|lang, partition, unique*, sibling-uri-1*); spectrav-debug(|"a-3 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  AnnoMethodDec-4-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  AnnoMethodDec-4-scoping-site = fail
  AnnoMethodDec-4-new-scoping-site = fail
  AnnoMethodDec-4-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  AnnoMethodDec-4-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  AnnoMethodDec-4-state-site = fail
  AnnoMethodDec-4-use-site(|lang, partition, unique*, uri*, state*) = fail
  AnnoMethodDec-4-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  AnnoMethodDec-4-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  AnnoMethodDec-4-import-site(|lang, partition, unique*, uri*, state*) = fail
  AnnoMethodDec-4-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor AnnoDecHead-2, Sort AnnoDecHead

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-AnnoDecHead(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-AnnoDecHead(sibling-uris|lang, partition, unique*, uri*) = specific-collect-AnnoDecHead-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-AnnoDecHead-2(sibling-uris|lang, partition, unique*, uri*) =
    ?AnnoDecHead(_, _) 
  ; nabl-state-pop(?state*)
  ; try(AnnoDecHead-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      AnnoDecHead-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(AnnoDecHead-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(AnnoDecHead-2-state-site)
  ; try(AnnoDecHead-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-AnnoDecHead-2(|lang, partition, unique*, child-uri*)
  ; try(AnnoDecHead-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(AnnoDecHead-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(AnnoDecHead-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(AnnoDecHead-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(AnnoDecHead-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(AnnoDecHead-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-AnnoDecHead-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); AnnoDecHead(
        spectrav-debug(|"b-0 "); specific-siblings-list-Anno_InterfaceMod0(|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-ID(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  AnnoDecHead-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  AnnoDecHead-2-scoping-site = fail
  AnnoDecHead-2-new-scoping-site = fail
  AnnoDecHead-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  AnnoDecHead-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  AnnoDecHead-2-state-site = fail
  AnnoDecHead-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  AnnoDecHead-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  AnnoDecHead-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  AnnoDecHead-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  AnnoDecHead-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor AnnoDec-2, Sort AnnoDec

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-AnnoDec(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-AnnoDec(sibling-uris|lang, partition, unique*, uri*) = specific-collect-AnnoDec-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-AnnoDec-2(sibling-uris|lang, partition, unique*, uri*) =
    ?AnnoDec(_, _) 
  ; nabl-state-pop(?state*)
  ; try(AnnoDec-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      AnnoDec-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(AnnoDec-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(AnnoDec-2-state-site)
  ; try(AnnoDec-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-AnnoDec-2(|lang, partition, unique*, child-uri*)
  ; try(AnnoDec-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(AnnoDec-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(AnnoDec-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(AnnoDec-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(AnnoDec-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(AnnoDec-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-AnnoDec-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); AnnoDec(
        spectrav-debug(|"b-0 "); specific-collect-AnnoDecHead(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-siblings-list-AnnoElemDec(|lang, partition, unique*, uri*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  AnnoDec-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  AnnoDec-2-scoping-site = fail
  AnnoDec-2-new-scoping-site = fail
  AnnoDec-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  AnnoDec-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  AnnoDec-2-state-site = fail
  AnnoDec-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  AnnoDec-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  AnnoDec-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  AnnoDec-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  AnnoDec-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Sort AbstractMethodMod, injected into Abstract

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-AbstractMethodMod(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-AbstractMethodMod(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Abstract(sibling-uris|lang, partition, unique*, uri*)

rules // Sort AbstractMethodMod, injected into Public

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-AbstractMethodMod(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-AbstractMethodMod(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Public(sibling-uris|lang, partition, unique*, uri*)

rules // Constructor DeprAbstractMethodDec-7, Sort AbstractMethodDec

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-AbstractMethodDec(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-AbstractMethodDec(sibling-uris|lang, partition, unique*, uri*) = specific-collect-DeprAbstractMethodDec-7(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-DeprAbstractMethodDec-7(sibling-uris|lang, partition, unique*, uri*) =
    ?DeprAbstractMethodDec(_, _, _, _, _, _, _) 
  ; nabl-state-pop(?state*)
  ; try(DeprAbstractMethodDec-7-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      DeprAbstractMethodDec-7-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(DeprAbstractMethodDec-7-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(DeprAbstractMethodDec-7-state-site)
  ; try(DeprAbstractMethodDec-7-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-DeprAbstractMethodDec-7(|lang, partition, unique*, child-uri*)
  ; try(DeprAbstractMethodDec-7-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(DeprAbstractMethodDec-7-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(DeprAbstractMethodDec-7-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(DeprAbstractMethodDec-7-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(DeprAbstractMethodDec-7-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(DeprAbstractMethodDec-7-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-DeprAbstractMethodDec-7(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); DeprAbstractMethodDec(
        spectrav-debug(|"b-0 "); specific-siblings-list-Anno_AbstractMethodMod0(|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-siblings-option-TypeParams(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-1 "), spectrav-debug(|"b-2 "); specific-collect-ResultType(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-2 "), spectrav-debug(|"b-3 "); specific-collect-ID(?sibling-uri-2*|lang, partition, unique*, sibling-uri-1*); spectrav-debug(|"a-3 "), spectrav-debug(|"b-4 "); specific-collect-MethodParams(?sibling-uri-3*|lang, partition, unique*, sibling-uri-2*); spectrav-debug(|"a-4 "), spectrav-debug(|"b-5 "); specific-siblings-list-Dim(|lang, partition, unique*, uri*); spectrav-debug(|"a-5 "), spectrav-debug(|"b-6 "); specific-siblings-option-Throws(?sibling-uri-4*|lang, partition, unique*, sibling-uri-3*); spectrav-debug(|"a-6 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  DeprAbstractMethodDec-7-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  DeprAbstractMethodDec-7-scoping-site = fail
  DeprAbstractMethodDec-7-new-scoping-site = fail
  DeprAbstractMethodDec-7-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  DeprAbstractMethodDec-7-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  DeprAbstractMethodDec-7-state-site = fail
  DeprAbstractMethodDec-7-use-site(|lang, partition, unique*, uri*, state*) = fail
  DeprAbstractMethodDec-7-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  DeprAbstractMethodDec-7-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  DeprAbstractMethodDec-7-import-site(|lang, partition, unique*, uri*, state*) = fail
  DeprAbstractMethodDec-7-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor AbstractMethodDec-6, Sort AbstractMethodDec

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-AbstractMethodDec(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-AbstractMethodDec(sibling-uris|lang, partition, unique*, uri*) = specific-collect-AbstractMethodDec-6(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-AbstractMethodDec-6(sibling-uris|lang, partition, unique*, uri*) =
    ?AbstractMethodDec(_, _, _, _, _, _) 
  ; nabl-state-pop(?state*)
  ; try(AbstractMethodDec-6-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      AbstractMethodDec-6-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(AbstractMethodDec-6-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(AbstractMethodDec-6-state-site)
  ; try(AbstractMethodDec-6-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-AbstractMethodDec-6(|lang, partition, unique*, child-uri*)
  ; try(AbstractMethodDec-6-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(AbstractMethodDec-6-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(AbstractMethodDec-6-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(AbstractMethodDec-6-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(AbstractMethodDec-6-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(AbstractMethodDec-6-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-AbstractMethodDec-6(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); AbstractMethodDec(
        spectrav-debug(|"b-0 "); specific-siblings-list-Anno_AbstractMethodMod0(|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-siblings-option-TypeParams(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-1 "), spectrav-debug(|"b-2 "); specific-collect-ResultType(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-2 "), spectrav-debug(|"b-3 "); specific-collect-ID(?sibling-uri-2*|lang, partition, unique*, sibling-uri-1*); spectrav-debug(|"a-3 "), spectrav-debug(|"b-4 "); specific-collect-MethodParams(?sibling-uri-3*|lang, partition, unique*, sibling-uri-2*); spectrav-debug(|"a-4 "), spectrav-debug(|"b-5 "); specific-siblings-option-Throws(?sibling-uri-4*|lang, partition, unique*, sibling-uri-3*); spectrav-debug(|"a-5 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  AbstractMethodDec-6-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  AbstractMethodDec-6-scoping-site = fail
  AbstractMethodDec-6-new-scoping-site = fail
  AbstractMethodDec-6-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  AbstractMethodDec-6-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  AbstractMethodDec-6-state-site = fail
  AbstractMethodDec-6-use-site(|lang, partition, unique*, uri*, state*) = fail
  AbstractMethodDec-6-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  AbstractMethodDec-6-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  AbstractMethodDec-6-import-site(|lang, partition, unique*, uri*, state*) = fail
  AbstractMethodDec-6-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Sort ConstantMod, injected into Final

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ConstantMod(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-ConstantMod(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Final(sibling-uris|lang, partition, unique*, uri*)

rules // Sort ConstantMod, injected into Static

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ConstantMod(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-ConstantMod(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Static(sibling-uris|lang, partition, unique*, uri*)

rules // Sort ConstantMod, injected into Public

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ConstantMod(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-ConstantMod(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Public(sibling-uris|lang, partition, unique*, uri*)

rules // Constructor EnumBodyDecs-1, Sort EnumBodyDecs

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-EnumBodyDecs(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-EnumBodyDecs(sibling-uris|lang, partition, unique*, uri*) = specific-collect-EnumBodyDecs-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-EnumBodyDecs-1(sibling-uris|lang, partition, unique*, uri*) =
    ?EnumBodyDecs(_) 
  ; nabl-state-pop(?state*)
  ; try(EnumBodyDecs-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      EnumBodyDecs-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(EnumBodyDecs-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(EnumBodyDecs-1-state-site)
  ; try(EnumBodyDecs-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-EnumBodyDecs-1(|lang, partition, unique*, child-uri*)
  ; try(EnumBodyDecs-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(EnumBodyDecs-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(EnumBodyDecs-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(EnumBodyDecs-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(EnumBodyDecs-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(EnumBodyDecs-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-EnumBodyDecs-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); EnumBodyDecs(
        spectrav-debug(|"b-0 "); specific-siblings-list-ClassBodyDec(|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  EnumBodyDecs-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  EnumBodyDecs-1-scoping-site = fail
  EnumBodyDecs-1-new-scoping-site = fail
  EnumBodyDecs-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  EnumBodyDecs-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  EnumBodyDecs-1-state-site = fail
  EnumBodyDecs-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  EnumBodyDecs-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  EnumBodyDecs-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  EnumBodyDecs-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  EnumBodyDecs-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Sort EnumConstArgs, injected into Expr

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-EnumConstArgs(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-EnumConstArgs(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)

rules // Constructor EnumConst-3, Sort EnumConst

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-EnumConst(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-EnumConst(sibling-uris|lang, partition, unique*, uri*) = specific-collect-EnumConst-3(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-EnumConst-3(sibling-uris|lang, partition, unique*, uri*) =
    ?EnumConst(_, _, _) 
  ; nabl-state-pop(?state*)
  ; try(EnumConst-3-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      EnumConst-3-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(EnumConst-3-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(EnumConst-3-state-site)
  ; try(EnumConst-3-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-EnumConst-3(|lang, partition, unique*, child-uri*)
  ; try(EnumConst-3-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(EnumConst-3-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(EnumConst-3-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(EnumConst-3-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(EnumConst-3-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(EnumConst-3-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-EnumConst-3(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); EnumConst(
        spectrav-debug(|"b-0 "); specific-collect-ID(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-siblings-option-EnumConstArgs(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 "), spectrav-debug(|"b-2 "); specific-siblings-option-ClassBody(?sibling-uri-2*|lang, partition, unique*, sibling-uri-1*); spectrav-debug(|"a-2 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  EnumConst-3-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  EnumConst-3-scoping-site = fail
  EnumConst-3-new-scoping-site = fail
  EnumConst-3-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  EnumConst-3-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  EnumConst-3-state-site = fail
  EnumConst-3-use-site(|lang, partition, unique*, uri*, state*) = fail
  EnumConst-3-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  EnumConst-3-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  EnumConst-3-import-site(|lang, partition, unique*, uri*, state*) = fail
  EnumConst-3-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor EnumBody-2, Sort EnumBody

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-EnumBody(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-EnumBody(sibling-uris|lang, partition, unique*, uri*) = specific-collect-EnumBody-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-EnumBody-2(sibling-uris|lang, partition, unique*, uri*) =
    ?EnumBody(_, _) 
  ; nabl-state-pop(?state*)
  ; try(EnumBody-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      EnumBody-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(EnumBody-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(EnumBody-2-state-site)
  ; try(EnumBody-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-EnumBody-2(|lang, partition, unique*, child-uri*)
  ; try(EnumBody-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(EnumBody-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(EnumBody-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(EnumBody-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(EnumBody-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(EnumBody-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-EnumBody-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); EnumBody(
        spectrav-debug(|"b-0 "); specific-siblings-list-EnumConst(|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-siblings-option-EnumBodyDecs(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  EnumBody-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  EnumBody-2-scoping-site = fail
  EnumBody-2-new-scoping-site = fail
  EnumBody-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  EnumBody-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  EnumBody-2-state-site = fail
  EnumBody-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  EnumBody-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  EnumBody-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  EnumBody-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  EnumBody-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor EnumDec-2, Sort EnumDec

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-EnumDec(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-EnumDec(sibling-uris|lang, partition, unique*, uri*) = specific-collect-EnumDec-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-EnumDec-2(sibling-uris|lang, partition, unique*, uri*) =
    ?EnumDec(_, _) 
  ; nabl-state-pop(?state*)
  ; try(EnumDec-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      EnumDec-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(EnumDec-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(EnumDec-2-state-site)
  ; try(EnumDec-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-EnumDec-2(|lang, partition, unique*, child-uri*)
  ; try(EnumDec-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(EnumDec-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(EnumDec-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(EnumDec-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(EnumDec-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(EnumDec-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-EnumDec-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); EnumDec(
        spectrav-debug(|"b-0 "); specific-collect-EnumDecHead(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-EnumBody(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  EnumDec-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  EnumDec-2-scoping-site = fail
  EnumDec-2-new-scoping-site = fail
  EnumDec-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  EnumDec-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  EnumDec-2-state-site = fail
  EnumDec-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  EnumDec-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  EnumDec-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  EnumDec-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  EnumDec-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Sort ConstrMod, injected into Private

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ConstrMod(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-ConstrMod(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Private(sibling-uris|lang, partition, unique*, uri*)

rules // Sort ConstrMod, injected into Protected

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ConstrMod(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-ConstrMod(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Protected(sibling-uris|lang, partition, unique*, uri*)

rules // Sort ConstrMod, injected into Public

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ConstrMod(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-ConstrMod(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Public(sibling-uris|lang, partition, unique*, uri*)

rules // Constructor QSuperConstrInv-3, Sort ConstrInv

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ConstrInv(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-ConstrInv(sibling-uris|lang, partition, unique*, uri*) = specific-collect-QSuperConstrInv-3(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-QSuperConstrInv-3(sibling-uris|lang, partition, unique*, uri*) =
    ?QSuperConstrInv(_, _, _) 
  ; nabl-state-pop(?state*)
  ; try(QSuperConstrInv-3-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      QSuperConstrInv-3-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(QSuperConstrInv-3-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(QSuperConstrInv-3-state-site)
  ; try(QSuperConstrInv-3-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-QSuperConstrInv-3(|lang, partition, unique*, child-uri*)
  ; try(QSuperConstrInv-3-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(QSuperConstrInv-3-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(QSuperConstrInv-3-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(QSuperConstrInv-3-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(QSuperConstrInv-3-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(QSuperConstrInv-3-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-QSuperConstrInv-3(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); QSuperConstrInv(
        spectrav-debug(|"b-0 "); specific-collect-Expr(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-OptTypeArgs0(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 "), spectrav-debug(|"b-2 "); specific-siblings-list-Expr(|lang, partition, unique*, uri*); spectrav-debug(|"a-2 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  QSuperConstrInv-3-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  QSuperConstrInv-3-scoping-site = fail
  QSuperConstrInv-3-new-scoping-site = fail
  QSuperConstrInv-3-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  QSuperConstrInv-3-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  QSuperConstrInv-3-state-site = fail
  QSuperConstrInv-3-use-site(|lang, partition, unique*, uri*, state*) = fail
  QSuperConstrInv-3-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  QSuperConstrInv-3-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  QSuperConstrInv-3-import-site(|lang, partition, unique*, uri*, state*) = fail
  QSuperConstrInv-3-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor SuperConstrInv-2, Sort ConstrInv

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ConstrInv(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-ConstrInv(sibling-uris|lang, partition, unique*, uri*) = specific-collect-SuperConstrInv-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-SuperConstrInv-2(sibling-uris|lang, partition, unique*, uri*) =
    ?SuperConstrInv(_, _) 
  ; nabl-state-pop(?state*)
  ; try(SuperConstrInv-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      SuperConstrInv-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(SuperConstrInv-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(SuperConstrInv-2-state-site)
  ; try(SuperConstrInv-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-SuperConstrInv-2(|lang, partition, unique*, child-uri*)
  ; try(SuperConstrInv-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(SuperConstrInv-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(SuperConstrInv-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(SuperConstrInv-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(SuperConstrInv-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(SuperConstrInv-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-SuperConstrInv-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); SuperConstrInv(
        spectrav-debug(|"b-0 "); specific-collect-OptTypeArgs0(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-siblings-list-Expr(|lang, partition, unique*, uri*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  SuperConstrInv-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  SuperConstrInv-2-scoping-site = fail
  SuperConstrInv-2-new-scoping-site = fail
  SuperConstrInv-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  SuperConstrInv-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  SuperConstrInv-2-state-site = fail
  SuperConstrInv-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  SuperConstrInv-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  SuperConstrInv-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  SuperConstrInv-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  SuperConstrInv-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor AltConstrInv-2, Sort ConstrInv

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ConstrInv(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-ConstrInv(sibling-uris|lang, partition, unique*, uri*) = specific-collect-AltConstrInv-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-AltConstrInv-2(sibling-uris|lang, partition, unique*, uri*) =
    ?AltConstrInv(_, _) 
  ; nabl-state-pop(?state*)
  ; try(AltConstrInv-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      AltConstrInv-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(AltConstrInv-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(AltConstrInv-2-state-site)
  ; try(AltConstrInv-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-AltConstrInv-2(|lang, partition, unique*, child-uri*)
  ; try(AltConstrInv-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(AltConstrInv-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(AltConstrInv-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(AltConstrInv-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(AltConstrInv-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(AltConstrInv-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-AltConstrInv-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); AltConstrInv(
        spectrav-debug(|"b-0 "); specific-collect-OptTypeArgs0(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-siblings-list-Expr(|lang, partition, unique*, uri*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  AltConstrInv-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  AltConstrInv-2-scoping-site = fail
  AltConstrInv-2-new-scoping-site = fail
  AltConstrInv-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  AltConstrInv-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  AltConstrInv-2-state-site = fail
  AltConstrInv-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  AltConstrInv-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  AltConstrInv-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  AltConstrInv-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  AltConstrInv-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor StaticInit-1, Sort StaticInit

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-StaticInit(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-StaticInit(sibling-uris|lang, partition, unique*, uri*) = specific-collect-StaticInit-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-StaticInit-1(sibling-uris|lang, partition, unique*, uri*) =
    ?StaticInit(_) 
  ; nabl-state-pop(?state*)
  ; try(StaticInit-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      StaticInit-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(StaticInit-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(StaticInit-1-state-site)
  ; try(StaticInit-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-StaticInit-1(|lang, partition, unique*, child-uri*)
  ; try(StaticInit-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(StaticInit-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(StaticInit-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(StaticInit-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(StaticInit-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(StaticInit-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-StaticInit-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); StaticInit(
        spectrav-debug(|"b-0 "); specific-collect-Block(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  StaticInit-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  StaticInit-1-scoping-site = fail
  StaticInit-1-new-scoping-site = fail
  StaticInit-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  StaticInit-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  StaticInit-1-state-site = fail
  StaticInit-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  StaticInit-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  StaticInit-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  StaticInit-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  StaticInit-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor InstanceInit-1, Sort InstanceInit

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-InstanceInit(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-InstanceInit(sibling-uris|lang, partition, unique*, uri*) = specific-collect-InstanceInit-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-InstanceInit-1(sibling-uris|lang, partition, unique*, uri*) =
    ?InstanceInit(_) 
  ; nabl-state-pop(?state*)
  ; try(InstanceInit-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      InstanceInit-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(InstanceInit-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(InstanceInit-1-state-site)
  ; try(InstanceInit-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-InstanceInit-1(|lang, partition, unique*, child-uri*)
  ; try(InstanceInit-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(InstanceInit-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(InstanceInit-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(InstanceInit-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(InstanceInit-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(InstanceInit-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-InstanceInit-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); InstanceInit(
        spectrav-debug(|"b-0 "); specific-collect-Block(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  InstanceInit-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  InstanceInit-1-scoping-site = fail
  InstanceInit-1-new-scoping-site = fail
  InstanceInit-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  InstanceInit-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  InstanceInit-1-state-site = fail
  InstanceInit-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  InstanceInit-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  InstanceInit-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  InstanceInit-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  InstanceInit-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor NoMethodBody-0, Sort MethodBody

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-MethodBody(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-MethodBody(sibling-uris|lang, partition, unique*, uri*) = specific-collect-NoMethodBody-0(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-NoMethodBody-0(sibling-uris|lang, partition, unique*, uri*) =
    ?NoMethodBody() 
  ; nabl-state-pop(?state*)
  ; try(NoMethodBody-0-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      NoMethodBody-0-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(NoMethodBody-0-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(NoMethodBody-0-state-site)
  ; try(NoMethodBody-0-collect-rewrite(|lang, partition, uri*, uri'*))
  
  ; try(NoMethodBody-0-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(NoMethodBody-0-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(NoMethodBody-0-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(NoMethodBody-0-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(NoMethodBody-0-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(NoMethodBody-0-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  
    
  NoMethodBody-0-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  NoMethodBody-0-scoping-site = fail
  NoMethodBody-0-new-scoping-site = fail
  NoMethodBody-0-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  NoMethodBody-0-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  NoMethodBody-0-state-site = fail
  NoMethodBody-0-use-site(|lang, partition, unique*, uri*, state*) = fail
  NoMethodBody-0-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  NoMethodBody-0-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  NoMethodBody-0-import-site(|lang, partition, unique*, uri*, state*) = fail
  NoMethodBody-0-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Sort MethodBody, injected into Block

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-MethodBody(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-MethodBody(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Block(sibling-uris|lang, partition, unique*, uri*)

rules // Sort ExceptionType, injected into ClassType

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ExceptionType(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-ExceptionType(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ClassType(sibling-uris|lang, partition, unique*, uri*)

rules // Constructor ThrowsDec-1, Sort Throws

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Throws(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Throws(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ThrowsDec-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-ThrowsDec-1(sibling-uris|lang, partition, unique*, uri*) =
    ?ThrowsDec(_) 
  ; nabl-state-pop(?state*)
  ; try(ThrowsDec-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      ThrowsDec-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(ThrowsDec-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(ThrowsDec-1-state-site)
  ; try(ThrowsDec-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-ThrowsDec-1(|lang, partition, unique*, child-uri*)
  ; try(ThrowsDec-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(ThrowsDec-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(ThrowsDec-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(ThrowsDec-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(ThrowsDec-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(ThrowsDec-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-ThrowsDec-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); ThrowsDec(
        spectrav-debug(|"b-0 "); specific-siblings-list-ExceptionType(|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  ThrowsDec-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  ThrowsDec-1-scoping-site = fail
  ThrowsDec-1-new-scoping-site = fail
  ThrowsDec-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  ThrowsDec-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  ThrowsDec-1-state-site = fail
  ThrowsDec-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  ThrowsDec-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  ThrowsDec-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  ThrowsDec-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  ThrowsDec-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Sort MethodMod, injected into StrictFP

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-MethodMod(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-MethodMod(sibling-uris|lang, partition, unique*, uri*) = specific-collect-StrictFP(sibling-uris|lang, partition, unique*, uri*)

rules // Sort MethodMod, injected into Native

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-MethodMod(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-MethodMod(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Native(sibling-uris|lang, partition, unique*, uri*)

rules // Sort MethodMod, injected into Synchronized

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-MethodMod(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-MethodMod(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Synchronized(sibling-uris|lang, partition, unique*, uri*)

rules // Sort MethodMod, injected into Final

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-MethodMod(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-MethodMod(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Final(sibling-uris|lang, partition, unique*, uri*)

rules // Sort MethodMod, injected into Static

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-MethodMod(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-MethodMod(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Static(sibling-uris|lang, partition, unique*, uri*)

rules // Sort MethodMod, injected into Abstract

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-MethodMod(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-MethodMod(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Abstract(sibling-uris|lang, partition, unique*, uri*)

rules // Sort MethodMod, injected into Private

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-MethodMod(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-MethodMod(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Private(sibling-uris|lang, partition, unique*, uri*)

rules // Sort MethodMod, injected into Protected

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-MethodMod(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-MethodMod(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Protected(sibling-uris|lang, partition, unique*, uri*)

rules // Sort MethodMod, injected into Public

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-MethodMod(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-MethodMod(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Public(sibling-uris|lang, partition, unique*, uri*)

rules // Sort VarMod, injected into Final

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-VarMod(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-VarMod(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Final(sibling-uris|lang, partition, unique*, uri*)

rules // Constructor Void-0, Sort ResultType

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ResultType(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-ResultType(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Void-0(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Void-0(sibling-uris|lang, partition, unique*, uri*) =
    ?Void() 
  ; nabl-state-pop(?state*)
  ; try(Void-0-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Void-0-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Void-0-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Void-0-state-site)
  ; try(Void-0-collect-rewrite(|lang, partition, uri*, uri'*))
  
  ; try(Void-0-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Void-0-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Void-0-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Void-0-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Void-0-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Void-0-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  
    
  Void-0-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Void-0-scoping-site = fail
  Void-0-new-scoping-site = fail
  Void-0-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Void-0-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Void-0-state-site = fail
  Void-0-use-site(|lang, partition, unique*, uri*, state*) = fail
  Void-0-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Void-0-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Void-0-import-site(|lang, partition, unique*, uri*, state*) = fail
  Void-0-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Sort ResultType, injected into Type

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ResultType(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-ResultType(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Type(sibling-uris|lang, partition, unique*, uri*)

rules // Constructor MethodParams-1, Sort MethodParams

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-MethodParams(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-MethodParams(sibling-uris|lang, partition, unique*, uri*) = specific-collect-MethodParams-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-MethodParams-1(sibling-uris|lang, partition, unique*, uri*) =
    ?MethodParams(_) 
  ; nabl-state-pop(?state*)
  ; try(MethodParams-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      MethodParams-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(MethodParams-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(MethodParams-1-state-site)
  ; try(MethodParams-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-MethodParams-1(|lang, partition, unique*, child-uri*)
  ; try(MethodParams-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(MethodParams-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(MethodParams-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(MethodParams-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(MethodParams-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(MethodParams-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-MethodParams-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); MethodParams(
        spectrav-debug(|"b-0 "); specific-siblings-list-FormalParam(|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  MethodParams-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  MethodParams-1-scoping-site = fail
  MethodParams-1-new-scoping-site = fail
  MethodParams-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  MethodParams-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  MethodParams-1-state-site = fail
  MethodParams-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  MethodParams-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  MethodParams-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  MethodParams-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  MethodParams-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Sort BlockStm, injected into Stm

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-BlockStm(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-BlockStm(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Stm(sibling-uris|lang, partition, unique*, uri*)

rules // Constructor ClassDecStm-1, Sort BlockStm

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-BlockStm(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-BlockStm(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ClassDecStm-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-ClassDecStm-1(sibling-uris|lang, partition, unique*, uri*) =
    ?ClassDecStm(_) 
  ; nabl-state-pop(?state*)
  ; try(ClassDecStm-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      ClassDecStm-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(ClassDecStm-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(ClassDecStm-1-state-site)
  ; try(ClassDecStm-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-ClassDecStm-1(|lang, partition, unique*, child-uri*)
  ; try(ClassDecStm-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(ClassDecStm-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(ClassDecStm-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(ClassDecStm-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(ClassDecStm-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(ClassDecStm-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-ClassDecStm-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); ClassDecStm(
        spectrav-debug(|"b-0 "); specific-collect-ClassDec(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  ClassDecStm-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  ClassDecStm-1-scoping-site = fail
  ClassDecStm-1-new-scoping-site = fail
  ClassDecStm-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  ClassDecStm-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  ClassDecStm-1-state-site = fail
  ClassDecStm-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  ClassDecStm-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  ClassDecStm-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  ClassDecStm-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  ClassDecStm-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Block-1, Sort Block

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Block(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Block(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Block-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Block-1(sibling-uris|lang, partition, unique*, uri*) =
    ?Block(_) 
  ; nabl-state-pop(?state*)
  ; try(Block-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Block-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Block-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Block-1-state-site)
  ; try(Block-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-Block-1(|lang, partition, unique*, child-uri*)
  ; try(Block-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Block-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Block-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Block-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Block-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Block-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-Block-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); Block(
        spectrav-debug(|"b-0 "); specific-siblings-list-BlockStm(|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  Block-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Block-1-scoping-site = fail
  Block-1-new-scoping-site = fail
  Block-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Block-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Block-1-state-site = fail
  Block-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  Block-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Block-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Block-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  Block-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Catch-2, Sort CatchClause

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-CatchClause(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-CatchClause(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Catch-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Catch-2(sibling-uris|lang, partition, unique*, uri*) =
    ?Catch(_, _) 
  ; nabl-state-pop(?state*)
  ; try(Catch-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Catch-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Catch-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Catch-2-state-site)
  ; try(Catch-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-Catch-2(|lang, partition, unique*, child-uri*)
  ; try(Catch-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Catch-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Catch-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Catch-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Catch-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Catch-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-Catch-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); Catch(
        spectrav-debug(|"b-0 "); specific-collect-FormalParam(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-Block(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  Catch-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Catch-2-scoping-site = fail
  Catch-2-new-scoping-site = fail
  Catch-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Catch-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Catch-2-state-site = fail
  Catch-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  Catch-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Catch-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Catch-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  Catch-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Default-0, Sort SwitchLabel

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-SwitchLabel(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-SwitchLabel(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Default-0(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Default-0(sibling-uris|lang, partition, unique*, uri*) =
    ?Default() 
  ; nabl-state-pop(?state*)
  ; try(Default-0-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Default-0-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Default-0-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Default-0-state-site)
  ; try(Default-0-collect-rewrite(|lang, partition, uri*, uri'*))
  
  ; try(Default-0-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Default-0-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Default-0-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Default-0-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Default-0-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Default-0-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  
    
  Default-0-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Default-0-scoping-site = fail
  Default-0-new-scoping-site = fail
  Default-0-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Default-0-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Default-0-state-site = fail
  Default-0-use-site(|lang, partition, unique*, uri*, state*) = fail
  Default-0-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Default-0-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Default-0-import-site(|lang, partition, unique*, uri*, state*) = fail
  Default-0-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Case-1, Sort SwitchLabel

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-SwitchLabel(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-SwitchLabel(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Case-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Case-1(sibling-uris|lang, partition, unique*, uri*) =
    ?Case(_) 
  ; nabl-state-pop(?state*)
  ; try(Case-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Case-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Case-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Case-1-state-site)
  ; try(Case-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-Case-1(|lang, partition, unique*, child-uri*)
  ; try(Case-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Case-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Case-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Case-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Case-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Case-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-Case-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); Case(
        spectrav-debug(|"b-0 "); specific-collect-Expr(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  Case-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Case-1-scoping-site = fail
  Case-1-new-scoping-site = fail
  Case-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Case-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Case-1-state-site = fail
  Case-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  Case-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Case-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Case-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  Case-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor SwitchGroup-2, Sort SwitchGroup

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-SwitchGroup(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-SwitchGroup(sibling-uris|lang, partition, unique*, uri*) = specific-collect-SwitchGroup-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-SwitchGroup-2(sibling-uris|lang, partition, unique*, uri*) =
    ?SwitchGroup(_, _) 
  ; nabl-state-pop(?state*)
  ; try(SwitchGroup-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      SwitchGroup-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(SwitchGroup-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(SwitchGroup-2-state-site)
  ; try(SwitchGroup-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-SwitchGroup-2(|lang, partition, unique*, child-uri*)
  ; try(SwitchGroup-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(SwitchGroup-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(SwitchGroup-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(SwitchGroup-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(SwitchGroup-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(SwitchGroup-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-SwitchGroup-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); SwitchGroup(
        spectrav-debug(|"b-0 "); specific-siblings-list-SwitchLabel(|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-siblings-list-BlockStm(|lang, partition, unique*, uri*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  SwitchGroup-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  SwitchGroup-2-scoping-site = fail
  SwitchGroup-2-new-scoping-site = fail
  SwitchGroup-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  SwitchGroup-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  SwitchGroup-2-state-site = fail
  SwitchGroup-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  SwitchGroup-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  SwitchGroup-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  SwitchGroup-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  SwitchGroup-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor SwitchBlock-2, Sort SwitchBlock

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-SwitchBlock(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-SwitchBlock(sibling-uris|lang, partition, unique*, uri*) = specific-collect-SwitchBlock-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-SwitchBlock-2(sibling-uris|lang, partition, unique*, uri*) =
    ?SwitchBlock(_, _) 
  ; nabl-state-pop(?state*)
  ; try(SwitchBlock-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      SwitchBlock-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(SwitchBlock-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(SwitchBlock-2-state-site)
  ; try(SwitchBlock-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-SwitchBlock-2(|lang, partition, unique*, child-uri*)
  ; try(SwitchBlock-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(SwitchBlock-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(SwitchBlock-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(SwitchBlock-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(SwitchBlock-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(SwitchBlock-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-SwitchBlock-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); SwitchBlock(
        spectrav-debug(|"b-0 "); specific-siblings-list-SwitchGroup(|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-siblings-list-SwitchLabel(|lang, partition, unique*, uri*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  SwitchBlock-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  SwitchBlock-2-scoping-site = fail
  SwitchBlock-2-new-scoping-site = fail
  SwitchBlock-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  SwitchBlock-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  SwitchBlock-2-state-site = fail
  SwitchBlock-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  SwitchBlock-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  SwitchBlock-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  SwitchBlock-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  SwitchBlock-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Try-3, Sort Stm

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Stm(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Stm(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Try-3(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Try-3(sibling-uris|lang, partition, unique*, uri*) =
    ?Try(_, _, _) 
  ; nabl-state-pop(?state*)
  ; try(Try-3-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Try-3-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Try-3-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Try-3-state-site)
  ; try(Try-3-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-Try-3(|lang, partition, unique*, child-uri*)
  ; try(Try-3-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Try-3-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Try-3-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Try-3-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Try-3-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Try-3-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-Try-3(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); Try(
        spectrav-debug(|"b-0 "); specific-collect-Block(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-siblings-list-CatchClause(|lang, partition, unique*, uri*); spectrav-debug(|"a-1 "), spectrav-debug(|"b-2 "); specific-collect-Block(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-2 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  Try-3-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Try-3-scoping-site = fail
  Try-3-new-scoping-site = fail
  Try-3-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Try-3-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Try-3-state-site = fail
  Try-3-use-site(|lang, partition, unique*, uri*, state*) = fail
  Try-3-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Try-3-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Try-3-import-site(|lang, partition, unique*, uri*, state*) = fail
  Try-3-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Try-2, Sort Stm

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Stm(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Stm(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Try-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Try-2(sibling-uris|lang, partition, unique*, uri*) =
    ?Try(_, _) 
  ; nabl-state-pop(?state*)
  ; try(Try-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Try-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Try-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Try-2-state-site)
  ; try(Try-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-Try-2(|lang, partition, unique*, child-uri*)
  ; try(Try-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Try-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Try-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Try-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Try-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Try-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-Try-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); Try(
        spectrav-debug(|"b-0 "); specific-collect-Block(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-siblings-list-CatchClause(|lang, partition, unique*, uri*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  Try-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Try-2-scoping-site = fail
  Try-2-new-scoping-site = fail
  Try-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Try-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Try-2-state-site = fail
  Try-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  Try-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Try-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Try-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  Try-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Synchronized-2, Sort Stm

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Stm(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Stm(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Synchronized-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Synchronized-2(sibling-uris|lang, partition, unique*, uri*) =
    ?Synchronized(_, _) 
  ; nabl-state-pop(?state*)
  ; try(Synchronized-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Synchronized-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Synchronized-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Synchronized-2-state-site)
  ; try(Synchronized-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-Synchronized-2(|lang, partition, unique*, child-uri*)
  ; try(Synchronized-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Synchronized-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Synchronized-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Synchronized-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Synchronized-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Synchronized-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-Synchronized-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); Synchronized(
        spectrav-debug(|"b-0 "); specific-collect-Expr(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-Block(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  Synchronized-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Synchronized-2-scoping-site = fail
  Synchronized-2-new-scoping-site = fail
  Synchronized-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Synchronized-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Synchronized-2-state-site = fail
  Synchronized-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  Synchronized-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Synchronized-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Synchronized-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  Synchronized-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Throw-1, Sort Stm

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Stm(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Stm(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Throw-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Throw-1(sibling-uris|lang, partition, unique*, uri*) =
    ?Throw(_) 
  ; nabl-state-pop(?state*)
  ; try(Throw-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Throw-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Throw-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Throw-1-state-site)
  ; try(Throw-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-Throw-1(|lang, partition, unique*, child-uri*)
  ; try(Throw-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Throw-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Throw-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Throw-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Throw-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Throw-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-Throw-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); Throw(
        spectrav-debug(|"b-0 "); specific-collect-Expr(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  Throw-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Throw-1-scoping-site = fail
  Throw-1-new-scoping-site = fail
  Throw-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Throw-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Throw-1-state-site = fail
  Throw-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  Throw-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Throw-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Throw-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  Throw-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Return-1, Sort Stm

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Stm(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Stm(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Return-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Return-1(sibling-uris|lang, partition, unique*, uri*) =
    ?Return(_) 
  ; nabl-state-pop(?state*)
  ; try(Return-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Return-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Return-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Return-1-state-site)
  ; try(Return-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-Return-1(|lang, partition, unique*, child-uri*)
  ; try(Return-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Return-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Return-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Return-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Return-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Return-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-Return-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); Return(
        spectrav-debug(|"b-0 "); specific-siblings-option-Expr(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  Return-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Return-1-scoping-site = fail
  Return-1-new-scoping-site = fail
  Return-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Return-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Return-1-state-site = fail
  Return-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  Return-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Return-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Return-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  Return-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Continue-1, Sort Stm

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Stm(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Stm(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Continue-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Continue-1(sibling-uris|lang, partition, unique*, uri*) =
    ?Continue(_) 
  ; nabl-state-pop(?state*)
  ; try(Continue-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Continue-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Continue-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Continue-1-state-site)
  ; try(Continue-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-Continue-1(|lang, partition, unique*, child-uri*)
  ; try(Continue-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Continue-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Continue-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Continue-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Continue-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Continue-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-Continue-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); Continue(
        spectrav-debug(|"b-0 "); specific-siblings-option-ID(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  Continue-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Continue-1-scoping-site = fail
  Continue-1-new-scoping-site = fail
  Continue-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Continue-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Continue-1-state-site = fail
  Continue-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  Continue-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Continue-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Continue-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  Continue-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Break-1, Sort Stm

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Stm(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Stm(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Break-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Break-1(sibling-uris|lang, partition, unique*, uri*) =
    ?Break(_) 
  ; nabl-state-pop(?state*)
  ; try(Break-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Break-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Break-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Break-1-state-site)
  ; try(Break-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-Break-1(|lang, partition, unique*, child-uri*)
  ; try(Break-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Break-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Break-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Break-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Break-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Break-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-Break-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); Break(
        spectrav-debug(|"b-0 "); specific-siblings-option-ID(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  Break-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Break-1-scoping-site = fail
  Break-1-new-scoping-site = fail
  Break-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Break-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Break-1-state-site = fail
  Break-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  Break-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Break-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Break-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  Break-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor ForEach-3, Sort Stm

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Stm(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Stm(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ForEach-3(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-ForEach-3(sibling-uris|lang, partition, unique*, uri*) =
    ?ForEach(_, _, _) 
  ; nabl-state-pop(?state*)
  ; try(ForEach-3-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      ForEach-3-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(ForEach-3-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(ForEach-3-state-site)
  ; try(ForEach-3-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-ForEach-3(|lang, partition, unique*, child-uri*)
  ; try(ForEach-3-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(ForEach-3-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(ForEach-3-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(ForEach-3-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(ForEach-3-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(ForEach-3-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-ForEach-3(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); ForEach(
        spectrav-debug(|"b-0 "); specific-collect-FormalParam(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-Expr(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 "), spectrav-debug(|"b-2 "); specific-collect-Stm(?sibling-uri-2*|lang, partition, unique*, sibling-uri-1*); spectrav-debug(|"a-2 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  ForEach-3-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  ForEach-3-scoping-site = fail
  ForEach-3-new-scoping-site = fail
  ForEach-3-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  ForEach-3-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  ForEach-3-state-site = fail
  ForEach-3-use-site(|lang, partition, unique*, uri*, state*) = fail
  ForEach-3-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  ForEach-3-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  ForEach-3-import-site(|lang, partition, unique*, uri*, state*) = fail
  ForEach-3-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor For-4, Sort Stm

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Stm(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Stm(sibling-uris|lang, partition, unique*, uri*) = specific-collect-For-4(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-For-4(sibling-uris|lang, partition, unique*, uri*) =
    ?For(_, _, _, _) 
  ; nabl-state-pop(?state*)
  ; try(For-4-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      For-4-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(For-4-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(For-4-state-site)
  ; try(For-4-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-For-4(|lang, partition, unique*, child-uri*)
  ; try(For-4-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(For-4-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(For-4-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(For-4-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(For-4-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(For-4-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-For-4(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); For(
        spectrav-debug(|"b-0 "); specific-siblings-list-Expr(|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-siblings-option-Expr(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-1 "), spectrav-debug(|"b-2 "); specific-siblings-list-Expr(|lang, partition, unique*, uri*); spectrav-debug(|"a-2 "), spectrav-debug(|"b-3 "); specific-collect-Stm(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-3 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  For-4-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  For-4-scoping-site = fail
  For-4-new-scoping-site = fail
  For-4-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  For-4-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  For-4-state-site = fail
  For-4-use-site(|lang, partition, unique*, uri*, state*) = fail
  For-4-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  For-4-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  For-4-import-site(|lang, partition, unique*, uri*, state*) = fail
  For-4-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor For-4, Sort Stm

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Stm(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Stm(sibling-uris|lang, partition, unique*, uri*) = specific-collect-For-4(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-For-4(sibling-uris|lang, partition, unique*, uri*) =
    ?For(_, _, _, _) 
  ; nabl-state-pop(?state*)
  ; try(For-4-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      For-4-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(For-4-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(For-4-state-site)
  ; try(For-4-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-For-4(|lang, partition, unique*, child-uri*)
  ; try(For-4-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(For-4-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(For-4-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(For-4-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(For-4-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(For-4-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-For-4(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); For(
        spectrav-debug(|"b-0 "); specific-collect-LocalVarDec(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-siblings-option-Expr(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 "), spectrav-debug(|"b-2 "); specific-siblings-list-Expr(|lang, partition, unique*, uri*); spectrav-debug(|"a-2 "), spectrav-debug(|"b-3 "); specific-collect-Stm(?sibling-uri-2*|lang, partition, unique*, sibling-uri-1*); spectrav-debug(|"a-3 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  For-4-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  For-4-scoping-site = fail
  For-4-new-scoping-site = fail
  For-4-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  For-4-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  For-4-state-site = fail
  For-4-use-site(|lang, partition, unique*, uri*, state*) = fail
  For-4-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  For-4-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  For-4-import-site(|lang, partition, unique*, uri*, state*) = fail
  For-4-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor DoWhile-2, Sort Stm

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Stm(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Stm(sibling-uris|lang, partition, unique*, uri*) = specific-collect-DoWhile-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-DoWhile-2(sibling-uris|lang, partition, unique*, uri*) =
    ?DoWhile(_, _) 
  ; nabl-state-pop(?state*)
  ; try(DoWhile-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      DoWhile-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(DoWhile-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(DoWhile-2-state-site)
  ; try(DoWhile-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-DoWhile-2(|lang, partition, unique*, child-uri*)
  ; try(DoWhile-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(DoWhile-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(DoWhile-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(DoWhile-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(DoWhile-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(DoWhile-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-DoWhile-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); DoWhile(
        spectrav-debug(|"b-0 "); specific-collect-Stm(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-Expr(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  DoWhile-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  DoWhile-2-scoping-site = fail
  DoWhile-2-new-scoping-site = fail
  DoWhile-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  DoWhile-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  DoWhile-2-state-site = fail
  DoWhile-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  DoWhile-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  DoWhile-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  DoWhile-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  DoWhile-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor While-2, Sort Stm

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Stm(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Stm(sibling-uris|lang, partition, unique*, uri*) = specific-collect-While-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-While-2(sibling-uris|lang, partition, unique*, uri*) =
    ?While(_, _) 
  ; nabl-state-pop(?state*)
  ; try(While-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      While-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(While-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(While-2-state-site)
  ; try(While-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-While-2(|lang, partition, unique*, child-uri*)
  ; try(While-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(While-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(While-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(While-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(While-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(While-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-While-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); While(
        spectrav-debug(|"b-0 "); specific-collect-Expr(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-Stm(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  While-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  While-2-scoping-site = fail
  While-2-new-scoping-site = fail
  While-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  While-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  While-2-state-site = fail
  While-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  While-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  While-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  While-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  While-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Switch-2, Sort Stm

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Stm(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Stm(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Switch-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Switch-2(sibling-uris|lang, partition, unique*, uri*) =
    ?Switch(_, _) 
  ; nabl-state-pop(?state*)
  ; try(Switch-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Switch-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Switch-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Switch-2-state-site)
  ; try(Switch-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-Switch-2(|lang, partition, unique*, child-uri*)
  ; try(Switch-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Switch-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Switch-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Switch-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Switch-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Switch-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-Switch-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); Switch(
        spectrav-debug(|"b-0 "); specific-collect-Expr(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-SwitchBlock(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  Switch-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Switch-2-scoping-site = fail
  Switch-2-new-scoping-site = fail
  Switch-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Switch-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Switch-2-state-site = fail
  Switch-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  Switch-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Switch-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Switch-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  Switch-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor AssertStm-2, Sort Stm

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Stm(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Stm(sibling-uris|lang, partition, unique*, uri*) = specific-collect-AssertStm-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-AssertStm-2(sibling-uris|lang, partition, unique*, uri*) =
    ?AssertStm(_, _) 
  ; nabl-state-pop(?state*)
  ; try(AssertStm-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      AssertStm-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(AssertStm-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(AssertStm-2-state-site)
  ; try(AssertStm-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-AssertStm-2(|lang, partition, unique*, child-uri*)
  ; try(AssertStm-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(AssertStm-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(AssertStm-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(AssertStm-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(AssertStm-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(AssertStm-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-AssertStm-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); AssertStm(
        spectrav-debug(|"b-0 "); specific-collect-Expr(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-Expr(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  AssertStm-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  AssertStm-2-scoping-site = fail
  AssertStm-2-new-scoping-site = fail
  AssertStm-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  AssertStm-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  AssertStm-2-state-site = fail
  AssertStm-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  AssertStm-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  AssertStm-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  AssertStm-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  AssertStm-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor AssertStm-1, Sort Stm

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Stm(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Stm(sibling-uris|lang, partition, unique*, uri*) = specific-collect-AssertStm-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-AssertStm-1(sibling-uris|lang, partition, unique*, uri*) =
    ?AssertStm(_) 
  ; nabl-state-pop(?state*)
  ; try(AssertStm-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      AssertStm-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(AssertStm-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(AssertStm-1-state-site)
  ; try(AssertStm-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-AssertStm-1(|lang, partition, unique*, child-uri*)
  ; try(AssertStm-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(AssertStm-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(AssertStm-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(AssertStm-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(AssertStm-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(AssertStm-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-AssertStm-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); AssertStm(
        spectrav-debug(|"b-0 "); specific-collect-Expr(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  AssertStm-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  AssertStm-1-scoping-site = fail
  AssertStm-1-new-scoping-site = fail
  AssertStm-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  AssertStm-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  AssertStm-1-state-site = fail
  AssertStm-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  AssertStm-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  AssertStm-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  AssertStm-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  AssertStm-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor If-3, Sort Stm

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Stm(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Stm(sibling-uris|lang, partition, unique*, uri*) = specific-collect-If-3(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-If-3(sibling-uris|lang, partition, unique*, uri*) =
    ?If(_, _, _) 
  ; nabl-state-pop(?state*)
  ; try(If-3-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      If-3-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(If-3-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(If-3-state-site)
  ; try(If-3-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-If-3(|lang, partition, unique*, child-uri*)
  ; try(If-3-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(If-3-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(If-3-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(If-3-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(If-3-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(If-3-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-If-3(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); If(
        spectrav-debug(|"b-0 "); specific-collect-Expr(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-Stm(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 "), spectrav-debug(|"b-2 "); specific-collect-Stm(?sibling-uri-2*|lang, partition, unique*, sibling-uri-1*); spectrav-debug(|"a-2 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  If-3-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  If-3-scoping-site = fail
  If-3-new-scoping-site = fail
  If-3-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  If-3-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  If-3-state-site = fail
  If-3-use-site(|lang, partition, unique*, uri*, state*) = fail
  If-3-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  If-3-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  If-3-import-site(|lang, partition, unique*, uri*, state*) = fail
  If-3-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor If-2, Sort Stm

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Stm(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Stm(sibling-uris|lang, partition, unique*, uri*) = specific-collect-If-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-If-2(sibling-uris|lang, partition, unique*, uri*) =
    ?If(_, _) 
  ; nabl-state-pop(?state*)
  ; try(If-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      If-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(If-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(If-2-state-site)
  ; try(If-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-If-2(|lang, partition, unique*, child-uri*)
  ; try(If-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(If-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(If-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(If-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(If-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(If-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-If-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); If(
        spectrav-debug(|"b-0 "); specific-collect-Expr(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-Stm(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  If-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  If-2-scoping-site = fail
  If-2-new-scoping-site = fail
  If-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  If-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  If-2-state-site = fail
  If-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  If-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  If-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  If-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  If-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Labeled-2, Sort Stm

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Stm(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Stm(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Labeled-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Labeled-2(sibling-uris|lang, partition, unique*, uri*) =
    ?Labeled(_, _) 
  ; nabl-state-pop(?state*)
  ; try(Labeled-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Labeled-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Labeled-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Labeled-2-state-site)
  ; try(Labeled-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-Labeled-2(|lang, partition, unique*, child-uri*)
  ; try(Labeled-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Labeled-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Labeled-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Labeled-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Labeled-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Labeled-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-Labeled-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); Labeled(
        spectrav-debug(|"b-0 "); specific-collect-ID(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-Stm(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  Labeled-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Labeled-2-scoping-site = fail
  Labeled-2-new-scoping-site = fail
  Labeled-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Labeled-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Labeled-2-state-site = fail
  Labeled-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  Labeled-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Labeled-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Labeled-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  Labeled-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Empty-0, Sort Stm

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Stm(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Stm(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Empty-0(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Empty-0(sibling-uris|lang, partition, unique*, uri*) =
    ?Empty() 
  ; nabl-state-pop(?state*)
  ; try(Empty-0-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Empty-0-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Empty-0-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Empty-0-state-site)
  ; try(Empty-0-collect-rewrite(|lang, partition, uri*, uri'*))
  
  ; try(Empty-0-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Empty-0-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Empty-0-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Empty-0-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Empty-0-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Empty-0-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  
    
  Empty-0-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Empty-0-scoping-site = fail
  Empty-0-new-scoping-site = fail
  Empty-0-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Empty-0-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Empty-0-state-site = fail
  Empty-0-use-site(|lang, partition, unique*, uri*, state*) = fail
  Empty-0-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Empty-0-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Empty-0-import-site(|lang, partition, unique*, uri*, state*) = fail
  Empty-0-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Sort Stm, injected into Block

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Stm(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-Stm(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Block(sibling-uris|lang, partition, unique*, uri*)

rules // Sort FieldMod, injected into Volatile

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-FieldMod(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-FieldMod(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Volatile(sibling-uris|lang, partition, unique*, uri*)

rules // Sort FieldMod, injected into Transient

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-FieldMod(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-FieldMod(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Transient(sibling-uris|lang, partition, unique*, uri*)

rules // Sort FieldMod, injected into Final

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-FieldMod(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-FieldMod(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Final(sibling-uris|lang, partition, unique*, uri*)

rules // Sort FieldMod, injected into Static

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-FieldMod(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-FieldMod(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Static(sibling-uris|lang, partition, unique*, uri*)

rules // Sort FieldMod, injected into Private

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-FieldMod(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-FieldMod(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Private(sibling-uris|lang, partition, unique*, uri*)

rules // Sort FieldMod, injected into Protected

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-FieldMod(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-FieldMod(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Protected(sibling-uris|lang, partition, unique*, uri*)

rules // Sort FieldMod, injected into Public

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-FieldMod(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-FieldMod(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Public(sibling-uris|lang, partition, unique*, uri*)

rules // Sort VarInit, injected into ArrayInit

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-VarInit(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-VarInit(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ArrayInit(sibling-uris|lang, partition, unique*, uri*)

rules // Sort VarInit, injected into Expr

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-VarInit(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-VarInit(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)

rules // Constructor Dim-0, Sort Dim

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Dim(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Dim(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Dim-0(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Dim-0(sibling-uris|lang, partition, unique*, uri*) =
    ?Dim() 
  ; nabl-state-pop(?state*)
  ; try(Dim-0-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Dim-0-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Dim-0-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Dim-0-state-site)
  ; try(Dim-0-collect-rewrite(|lang, partition, uri*, uri'*))
  
  ; try(Dim-0-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Dim-0-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Dim-0-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Dim-0-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Dim-0-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Dim-0-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  
    
  Dim-0-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Dim-0-scoping-site = fail
  Dim-0-new-scoping-site = fail
  Dim-0-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Dim-0-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Dim-0-state-site = fail
  Dim-0-use-site(|lang, partition, unique*, uri*, state*) = fail
  Dim-0-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Dim-0-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Dim-0-import-site(|lang, partition, unique*, uri*, state*) = fail
  Dim-0-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor ArrayVarDecId-2, Sort VarDecId

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-VarDecId(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-VarDecId(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ArrayVarDecId-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-ArrayVarDecId-2(sibling-uris|lang, partition, unique*, uri*) =
    ?ArrayVarDecId(_, _) 
  ; nabl-state-pop(?state*)
  ; try(ArrayVarDecId-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      ArrayVarDecId-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(ArrayVarDecId-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(ArrayVarDecId-2-state-site)
  ; try(ArrayVarDecId-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-ArrayVarDecId-2(|lang, partition, unique*, child-uri*)
  ; try(ArrayVarDecId-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(ArrayVarDecId-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(ArrayVarDecId-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(ArrayVarDecId-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(ArrayVarDecId-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(ArrayVarDecId-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-ArrayVarDecId-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); ArrayVarDecId(
        spectrav-debug(|"b-0 "); specific-collect-ID(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-siblings-list-Dim(|lang, partition, unique*, uri*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  ArrayVarDecId-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  ArrayVarDecId-2-scoping-site = fail
  ArrayVarDecId-2-new-scoping-site = fail
  ArrayVarDecId-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  ArrayVarDecId-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  ArrayVarDecId-2-state-site = fail
  ArrayVarDecId-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  ArrayVarDecId-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  ArrayVarDecId-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  ArrayVarDecId-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  ArrayVarDecId-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Sort VarDecId, injected into ID

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-VarDecId(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-VarDecId(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ID(sibling-uris|lang, partition, unique*, uri*)

rules // Constructor VarDec-2, Sort VarDec

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-VarDec(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-VarDec(sibling-uris|lang, partition, unique*, uri*) = specific-collect-VarDec-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-VarDec-2(sibling-uris|lang, partition, unique*, uri*) =
    ?VarDec(_, _) 
  ; nabl-state-pop(?state*)
  ; try(VarDec-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      VarDec-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(VarDec-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(VarDec-2-state-site)
  ; try(VarDec-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-VarDec-2(|lang, partition, unique*, child-uri*)
  ; try(VarDec-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(VarDec-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(VarDec-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(VarDec-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(VarDec-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(VarDec-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-VarDec-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); VarDec(
        spectrav-debug(|"b-0 "); specific-collect-VarDecId(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-VarInit(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  VarDec-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  VarDec-2-scoping-site = fail
  VarDec-2-new-scoping-site = fail
  VarDec-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  VarDec-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  VarDec-2-state-site = fail
  VarDec-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  VarDec-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  VarDec-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  VarDec-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  VarDec-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor VarDec-1, Sort VarDec

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-VarDec(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-VarDec(sibling-uris|lang, partition, unique*, uri*) = specific-collect-VarDec-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-VarDec-1(sibling-uris|lang, partition, unique*, uri*) =
    ?VarDec(_) 
  ; nabl-state-pop(?state*)
  ; try(VarDec-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      VarDec-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(VarDec-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(VarDec-1-state-site)
  ; try(VarDec-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-VarDec-1(|lang, partition, unique*, child-uri*)
  ; try(VarDec-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(VarDec-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(VarDec-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(VarDec-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(VarDec-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(VarDec-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-VarDec-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); VarDec(
        spectrav-debug(|"b-0 "); specific-collect-VarDecId(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  VarDec-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  VarDec-1-scoping-site = fail
  VarDec-1-new-scoping-site = fail
  VarDec-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  VarDec-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  VarDec-1-state-site = fail
  VarDec-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  VarDec-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  VarDec-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  VarDec-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  VarDec-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor ArrayInit-1, Sort ArrayInit

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ArrayInit(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-ArrayInit(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ArrayInit-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-ArrayInit-1(sibling-uris|lang, partition, unique*, uri*) =
    ?ArrayInit(_) 
  ; nabl-state-pop(?state*)
  ; try(ArrayInit-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      ArrayInit-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(ArrayInit-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(ArrayInit-1-state-site)
  ; try(ArrayInit-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-ArrayInit-1(|lang, partition, unique*, child-uri*)
  ; try(ArrayInit-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(ArrayInit-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(ArrayInit-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(ArrayInit-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(ArrayInit-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(ArrayInit-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-ArrayInit-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); ArrayInit(
        spectrav-debug(|"b-0 "); specific-siblings-list-VarInit(|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  ArrayInit-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  ArrayInit-1-scoping-site = fail
  ArrayInit-1-new-scoping-site = fail
  ArrayInit-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  ArrayInit-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  ArrayInit-1-state-site = fail
  ArrayInit-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  ArrayInit-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  ArrayInit-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  ArrayInit-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  ArrayInit-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor ElemValArrayInit-1, Sort ElemVal

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ElemVal(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-ElemVal(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ElemValArrayInit-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-ElemValArrayInit-1(sibling-uris|lang, partition, unique*, uri*) =
    ?ElemValArrayInit(_) 
  ; nabl-state-pop(?state*)
  ; try(ElemValArrayInit-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      ElemValArrayInit-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(ElemValArrayInit-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(ElemValArrayInit-1-state-site)
  ; try(ElemValArrayInit-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-ElemValArrayInit-1(|lang, partition, unique*, child-uri*)
  ; try(ElemValArrayInit-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(ElemValArrayInit-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(ElemValArrayInit-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(ElemValArrayInit-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(ElemValArrayInit-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(ElemValArrayInit-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-ElemValArrayInit-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); ElemValArrayInit(
        spectrav-debug(|"b-0 "); specific-siblings-list-ElemVal(|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  ElemValArrayInit-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  ElemValArrayInit-1-scoping-site = fail
  ElemValArrayInit-1-new-scoping-site = fail
  ElemValArrayInit-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  ElemValArrayInit-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  ElemValArrayInit-1-state-site = fail
  ElemValArrayInit-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  ElemValArrayInit-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  ElemValArrayInit-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  ElemValArrayInit-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  ElemValArrayInit-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Sort ElemVal, injected into Anno

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ElemVal(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-ElemVal(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Anno(sibling-uris|lang, partition, unique*, uri*)

rules // Sort ElemVal, injected into Expr

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ElemVal(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-ElemVal(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)

rules // Constructor ElemValPair-2, Sort ElemValPair

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ElemValPair(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-ElemValPair(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ElemValPair-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-ElemValPair-2(sibling-uris|lang, partition, unique*, uri*) =
    ?ElemValPair(_, _) 
  ; nabl-state-pop(?state*)
  ; try(ElemValPair-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      ElemValPair-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(ElemValPair-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(ElemValPair-2-state-site)
  ; try(ElemValPair-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-ElemValPair-2(|lang, partition, unique*, child-uri*)
  ; try(ElemValPair-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(ElemValPair-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(ElemValPair-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(ElemValPair-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(ElemValPair-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(ElemValPair-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-ElemValPair-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); ElemValPair(
        spectrav-debug(|"b-0 "); specific-collect-ID(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-ElemVal(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  ElemValPair-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  ElemValPair-2-scoping-site = fail
  ElemValPair-2-new-scoping-site = fail
  ElemValPair-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  ElemValPair-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  ElemValPair-2-state-site = fail
  ElemValPair-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  ElemValPair-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  ElemValPair-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  ElemValPair-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  ElemValPair-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor MarkerAnno-1, Sort Anno

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Anno(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Anno(sibling-uris|lang, partition, unique*, uri*) = specific-collect-MarkerAnno-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-MarkerAnno-1(sibling-uris|lang, partition, unique*, uri*) =
    ?MarkerAnno(_) 
  ; nabl-state-pop(?state*)
  ; try(MarkerAnno-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      MarkerAnno-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(MarkerAnno-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(MarkerAnno-1-state-site)
  ; try(MarkerAnno-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-MarkerAnno-1(|lang, partition, unique*, child-uri*)
  ; try(MarkerAnno-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(MarkerAnno-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(MarkerAnno-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(MarkerAnno-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(MarkerAnno-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(MarkerAnno-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-MarkerAnno-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); MarkerAnno(
        spectrav-debug(|"b-0 "); specific-collect-InterfaceType(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  MarkerAnno-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  MarkerAnno-1-scoping-site = fail
  MarkerAnno-1-new-scoping-site = fail
  MarkerAnno-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  MarkerAnno-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  MarkerAnno-1-state-site = fail
  MarkerAnno-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  MarkerAnno-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  MarkerAnno-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  MarkerAnno-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  MarkerAnno-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor SingleElemAnno-2, Sort Anno

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Anno(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Anno(sibling-uris|lang, partition, unique*, uri*) = specific-collect-SingleElemAnno-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-SingleElemAnno-2(sibling-uris|lang, partition, unique*, uri*) =
    ?SingleElemAnno(_, _) 
  ; nabl-state-pop(?state*)
  ; try(SingleElemAnno-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      SingleElemAnno-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(SingleElemAnno-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(SingleElemAnno-2-state-site)
  ; try(SingleElemAnno-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-SingleElemAnno-2(|lang, partition, unique*, child-uri*)
  ; try(SingleElemAnno-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(SingleElemAnno-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(SingleElemAnno-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(SingleElemAnno-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(SingleElemAnno-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(SingleElemAnno-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-SingleElemAnno-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); SingleElemAnno(
        spectrav-debug(|"b-0 "); specific-collect-InterfaceType(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-ElemVal(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  SingleElemAnno-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  SingleElemAnno-2-scoping-site = fail
  SingleElemAnno-2-new-scoping-site = fail
  SingleElemAnno-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  SingleElemAnno-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  SingleElemAnno-2-state-site = fail
  SingleElemAnno-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  SingleElemAnno-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  SingleElemAnno-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  SingleElemAnno-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  SingleElemAnno-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Anno-2, Sort Anno

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Anno(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Anno(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Anno-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Anno-2(sibling-uris|lang, partition, unique*, uri*) =
    ?Anno(_, _) 
  ; nabl-state-pop(?state*)
  ; try(Anno-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Anno-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Anno-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Anno-2-state-site)
  ; try(Anno-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-Anno-2(|lang, partition, unique*, child-uri*)
  ; try(Anno-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Anno-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Anno-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Anno-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Anno-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Anno-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-Anno-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); Anno(
        spectrav-debug(|"b-0 "); specific-collect-InterfaceType(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-siblings-list-ElemValPair(|lang, partition, unique*, uri*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  Anno-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Anno-2-scoping-site = fail
  Anno-2-new-scoping-site = fail
  Anno-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Anno-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Anno-2-state-site = fail
  Anno-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  Anno-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Anno-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Anno-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  Anno-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor ArrayType-1, Sort ArrayType

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ArrayType(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-ArrayType(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ArrayType-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-ArrayType-1(sibling-uris|lang, partition, unique*, uri*) =
    ?ArrayType(_) 
  ; nabl-state-pop(?state*)
  ; try(ArrayType-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      ArrayType-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(ArrayType-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(ArrayType-1-state-site)
  ; try(ArrayType-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-ArrayType-1(|lang, partition, unique*, child-uri*)
  ; try(ArrayType-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(ArrayType-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(ArrayType-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(ArrayType-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(ArrayType-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(ArrayType-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-ArrayType-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); ArrayType(
        spectrav-debug(|"b-0 "); specific-collect-Type(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  ArrayType-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  ArrayType-1-scoping-site = fail
  ArrayType-1-new-scoping-site = fail
  ArrayType-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  ArrayType-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  ArrayType-1-state-site = fail
  ArrayType-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  ArrayType-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  ArrayType-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  ArrayType-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  ArrayType-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Member-3, Sort TypeDecSpec

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-TypeDecSpec(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-TypeDecSpec(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Member-3(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Member-3(sibling-uris|lang, partition, unique*, uri*) =
    ?Member(_, _, _) 
  ; nabl-state-pop(?state*)
  ; try(Member-3-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Member-3-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Member-3-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Member-3-state-site)
  ; try(Member-3-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-Member-3(|lang, partition, unique*, child-uri*)
  ; try(Member-3-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Member-3-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Member-3-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Member-3-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Member-3-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Member-3-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-Member-3(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); Member(
        spectrav-debug(|"b-0 "); specific-collect-TypeDecSpec(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-TypeArgs(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 "), spectrav-debug(|"b-2 "); specific-collect-ID(?sibling-uri-2*|lang, partition, unique*, sibling-uri-1*); spectrav-debug(|"a-2 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  Member-3-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Member-3-scoping-site = fail
  Member-3-new-scoping-site = fail
  Member-3-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Member-3-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Member-3-state-site = fail
  Member-3-use-site(|lang, partition, unique*, uri*, state*) = fail
  Member-3-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Member-3-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Member-3-import-site(|lang, partition, unique*, uri*, state*) = fail
  Member-3-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Sort TypeDecSpec, injected into TypeName

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-TypeDecSpec(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-TypeDecSpec(sibling-uris|lang, partition, unique*, uri*) = specific-collect-TypeName(sibling-uris|lang, partition, unique*, uri*)

rules // Constructor InterfaceType-2, Sort InterfaceType

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-InterfaceType(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-InterfaceType(sibling-uris|lang, partition, unique*, uri*) = specific-collect-InterfaceType-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-InterfaceType-2(sibling-uris|lang, partition, unique*, uri*) =
    ?InterfaceType(_, _) 
  ; nabl-state-pop(?state*)
  ; try(InterfaceType-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      InterfaceType-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(InterfaceType-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(InterfaceType-2-state-site)
  ; try(InterfaceType-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-InterfaceType-2(|lang, partition, unique*, child-uri*)
  ; try(InterfaceType-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(InterfaceType-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(InterfaceType-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(InterfaceType-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(InterfaceType-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(InterfaceType-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-InterfaceType-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); InterfaceType(
        spectrav-debug(|"b-0 "); specific-collect-TypeDecSpec(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-OptTypeArgs0(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  InterfaceType-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  InterfaceType-2-scoping-site = fail
  InterfaceType-2-new-scoping-site = fail
  InterfaceType-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  InterfaceType-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  InterfaceType-2-state-site = fail
  InterfaceType-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  InterfaceType-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  InterfaceType-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  InterfaceType-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  InterfaceType-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor ClassType-2, Sort ClassType

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ClassType(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-ClassType(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ClassType-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-ClassType-2(sibling-uris|lang, partition, unique*, uri*) =
    ?ClassType(_, _) 
  ; nabl-state-pop(?state*)
  ; try(ClassType-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      ClassType-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(ClassType-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(ClassType-2-state-site)
  ; try(ClassType-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-ClassType-2(|lang, partition, unique*, child-uri*)
  ; try(ClassType-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(ClassType-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(ClassType-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(ClassType-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(ClassType-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(ClassType-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-ClassType-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); ClassType(
        spectrav-debug(|"b-0 "); specific-collect-TypeDecSpec(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-OptTypeArgs0(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  ClassType-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  ClassType-2-scoping-site = fail
  ClassType-2-new-scoping-site = fail
  ClassType-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  ClassType-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  ClassType-2-state-site = fail
  ClassType-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  ClassType-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  ClassType-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  ClassType-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  ClassType-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor ClassOrInterfaceType-2, Sort ClassOrInterfaceType

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ClassOrInterfaceType(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-ClassOrInterfaceType(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ClassOrInterfaceType-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-ClassOrInterfaceType-2(sibling-uris|lang, partition, unique*, uri*) =
    ?ClassOrInterfaceType(_, _) 
  ; nabl-state-pop(?state*)
  ; try(ClassOrInterfaceType-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      ClassOrInterfaceType-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(ClassOrInterfaceType-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(ClassOrInterfaceType-2-state-site)
  ; try(ClassOrInterfaceType-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-ClassOrInterfaceType-2(|lang, partition, unique*, child-uri*)
  ; try(ClassOrInterfaceType-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(ClassOrInterfaceType-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(ClassOrInterfaceType-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(ClassOrInterfaceType-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(ClassOrInterfaceType-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(ClassOrInterfaceType-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-ClassOrInterfaceType-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); ClassOrInterfaceType(
        spectrav-debug(|"b-0 "); specific-collect-TypeDecSpec(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-OptTypeArgs0(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  ClassOrInterfaceType-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  ClassOrInterfaceType-2-scoping-site = fail
  ClassOrInterfaceType-2-new-scoping-site = fail
  ClassOrInterfaceType-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  ClassOrInterfaceType-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  ClassOrInterfaceType-2-state-site = fail
  ClassOrInterfaceType-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  ClassOrInterfaceType-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  ClassOrInterfaceType-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  ClassOrInterfaceType-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  ClassOrInterfaceType-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Sort RefType, injected into ArrayType

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-RefType(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-RefType(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ArrayType(sibling-uris|lang, partition, unique*, uri*)

rules // Sort RefType, injected into ClassOrInterfaceType

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-RefType(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-RefType(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ClassOrInterfaceType(sibling-uris|lang, partition, unique*, uri*)

rules // Sort TypeVarId, injected into ID

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-TypeVarId(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-TypeVarId(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ID(sibling-uris|lang, partition, unique*, uri*)

rules // Constructor TypeParams-1, Sort TypeParams

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-TypeParams(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-TypeParams(sibling-uris|lang, partition, unique*, uri*) = specific-collect-TypeParams-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-TypeParams-1(sibling-uris|lang, partition, unique*, uri*) =
    ?TypeParams(_) 
  ; nabl-state-pop(?state*)
  ; try(TypeParams-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      TypeParams-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(TypeParams-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(TypeParams-1-state-site)
  ; try(TypeParams-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-TypeParams-1(|lang, partition, unique*, child-uri*)
  ; try(TypeParams-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(TypeParams-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(TypeParams-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(TypeParams-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(TypeParams-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(TypeParams-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-TypeParams-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); TypeParams(
        spectrav-debug(|"b-0 "); specific-siblings-list-TypeParam(|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  TypeParams-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  TypeParams-1-scoping-site = fail
  TypeParams-1-new-scoping-site = fail
  TypeParams-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  TypeParams-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  TypeParams-1-state-site = fail
  TypeParams-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  TypeParams-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  TypeParams-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  TypeParams-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  TypeParams-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor TypeBound-1, Sort TypeBound

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-TypeBound(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-TypeBound(sibling-uris|lang, partition, unique*, uri*) = specific-collect-TypeBound-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-TypeBound-1(sibling-uris|lang, partition, unique*, uri*) =
    ?TypeBound(_) 
  ; nabl-state-pop(?state*)
  ; try(TypeBound-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      TypeBound-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(TypeBound-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(TypeBound-1-state-site)
  ; try(TypeBound-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-TypeBound-1(|lang, partition, unique*, child-uri*)
  ; try(TypeBound-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(TypeBound-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(TypeBound-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(TypeBound-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(TypeBound-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(TypeBound-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-TypeBound-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); TypeBound(
        spectrav-debug(|"b-0 "); specific-siblings-list-ClassOrInterfaceType(|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  TypeBound-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  TypeBound-1-scoping-site = fail
  TypeBound-1-new-scoping-site = fail
  TypeBound-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  TypeBound-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  TypeBound-1-state-site = fail
  TypeBound-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  TypeBound-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  TypeBound-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  TypeBound-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  TypeBound-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor TypeParam-2, Sort TypeParam

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-TypeParam(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-TypeParam(sibling-uris|lang, partition, unique*, uri*) = specific-collect-TypeParam-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-TypeParam-2(sibling-uris|lang, partition, unique*, uri*) =
    ?TypeParam(_, _) 
  ; nabl-state-pop(?state*)
  ; try(TypeParam-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      TypeParam-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(TypeParam-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(TypeParam-2-state-site)
  ; try(TypeParam-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-TypeParam-2(|lang, partition, unique*, child-uri*)
  ; try(TypeParam-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(TypeParam-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(TypeParam-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(TypeParam-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(TypeParam-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(TypeParam-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-TypeParam-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); TypeParam(
        spectrav-debug(|"b-0 "); specific-collect-TypeVarId(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-siblings-option-TypeBound(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  TypeParam-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  TypeParam-2-scoping-site = fail
  TypeParam-2-new-scoping-site = fail
  TypeParam-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  TypeParam-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  TypeParam-2-state-site = fail
  TypeParam-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  TypeParam-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  TypeParam-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  TypeParam-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  TypeParam-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor WildcardLowerBound-1, Sort WildcardBound

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-WildcardBound(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-WildcardBound(sibling-uris|lang, partition, unique*, uri*) = specific-collect-WildcardLowerBound-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-WildcardLowerBound-1(sibling-uris|lang, partition, unique*, uri*) =
    ?WildcardLowerBound(_) 
  ; nabl-state-pop(?state*)
  ; try(WildcardLowerBound-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      WildcardLowerBound-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(WildcardLowerBound-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(WildcardLowerBound-1-state-site)
  ; try(WildcardLowerBound-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-WildcardLowerBound-1(|lang, partition, unique*, child-uri*)
  ; try(WildcardLowerBound-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(WildcardLowerBound-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(WildcardLowerBound-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(WildcardLowerBound-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(WildcardLowerBound-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(WildcardLowerBound-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-WildcardLowerBound-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); WildcardLowerBound(
        spectrav-debug(|"b-0 "); specific-collect-RefType(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  WildcardLowerBound-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  WildcardLowerBound-1-scoping-site = fail
  WildcardLowerBound-1-new-scoping-site = fail
  WildcardLowerBound-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  WildcardLowerBound-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  WildcardLowerBound-1-state-site = fail
  WildcardLowerBound-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  WildcardLowerBound-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  WildcardLowerBound-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  WildcardLowerBound-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  WildcardLowerBound-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor WildcardUpperBound-1, Sort WildcardBound

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-WildcardBound(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-WildcardBound(sibling-uris|lang, partition, unique*, uri*) = specific-collect-WildcardUpperBound-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-WildcardUpperBound-1(sibling-uris|lang, partition, unique*, uri*) =
    ?WildcardUpperBound(_) 
  ; nabl-state-pop(?state*)
  ; try(WildcardUpperBound-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      WildcardUpperBound-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(WildcardUpperBound-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(WildcardUpperBound-1-state-site)
  ; try(WildcardUpperBound-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-WildcardUpperBound-1(|lang, partition, unique*, child-uri*)
  ; try(WildcardUpperBound-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(WildcardUpperBound-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(WildcardUpperBound-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(WildcardUpperBound-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(WildcardUpperBound-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(WildcardUpperBound-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-WildcardUpperBound-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); WildcardUpperBound(
        spectrav-debug(|"b-0 "); specific-collect-RefType(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  WildcardUpperBound-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  WildcardUpperBound-1-scoping-site = fail
  WildcardUpperBound-1-new-scoping-site = fail
  WildcardUpperBound-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  WildcardUpperBound-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  WildcardUpperBound-1-state-site = fail
  WildcardUpperBound-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  WildcardUpperBound-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  WildcardUpperBound-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  WildcardUpperBound-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  WildcardUpperBound-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Wildcard-1, Sort ActualTypeArg

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ActualTypeArg(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-ActualTypeArg(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Wildcard-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Wildcard-1(sibling-uris|lang, partition, unique*, uri*) =
    ?Wildcard(_) 
  ; nabl-state-pop(?state*)
  ; try(Wildcard-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Wildcard-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Wildcard-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Wildcard-1-state-site)
  ; try(Wildcard-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-Wildcard-1(|lang, partition, unique*, child-uri*)
  ; try(Wildcard-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Wildcard-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Wildcard-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Wildcard-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Wildcard-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Wildcard-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-Wildcard-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); Wildcard(
        spectrav-debug(|"b-0 "); specific-siblings-option-WildcardBound(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  Wildcard-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Wildcard-1-scoping-site = fail
  Wildcard-1-new-scoping-site = fail
  Wildcard-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Wildcard-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Wildcard-1-state-site = fail
  Wildcard-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  Wildcard-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Wildcard-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Wildcard-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  Wildcard-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Sort ActualTypeArg, injected into Type

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ActualTypeArg(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-ActualTypeArg(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Type(sibling-uris|lang, partition, unique*, uri*)

rules // Constructor TypeArgs-1, Sort TypeArgs

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-TypeArgs(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-TypeArgs(sibling-uris|lang, partition, unique*, uri*) = specific-collect-TypeArgs-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-TypeArgs-1(sibling-uris|lang, partition, unique*, uri*) =
    ?TypeArgs(_) 
  ; nabl-state-pop(?state*)
  ; try(TypeArgs-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      TypeArgs-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(TypeArgs-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(TypeArgs-1-state-site)
  ; try(TypeArgs-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-TypeArgs-1(|lang, partition, unique*, child-uri*)
  ; try(TypeArgs-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(TypeArgs-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(TypeArgs-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(TypeArgs-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(TypeArgs-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(TypeArgs-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-TypeArgs-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); TypeArgs(
        spectrav-debug(|"b-0 "); specific-siblings-list-ActualTypeArg(|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  TypeArgs-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  TypeArgs-1-scoping-site = fail
  TypeArgs-1-new-scoping-site = fail
  TypeArgs-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  TypeArgs-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  TypeArgs-1-state-site = fail
  TypeArgs-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  TypeArgs-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  TypeArgs-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  TypeArgs-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  TypeArgs-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor VoidClass-0, Sort ClassLiteral

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ClassLiteral(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-ClassLiteral(sibling-uris|lang, partition, unique*, uri*) = specific-collect-VoidClass-0(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-VoidClass-0(sibling-uris|lang, partition, unique*, uri*) =
    ?VoidClass() 
  ; nabl-state-pop(?state*)
  ; try(VoidClass-0-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      VoidClass-0-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(VoidClass-0-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(VoidClass-0-state-site)
  ; try(VoidClass-0-collect-rewrite(|lang, partition, uri*, uri'*))
  
  ; try(VoidClass-0-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(VoidClass-0-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(VoidClass-0-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(VoidClass-0-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(VoidClass-0-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(VoidClass-0-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  
    
  VoidClass-0-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  VoidClass-0-scoping-site = fail
  VoidClass-0-new-scoping-site = fail
  VoidClass-0-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  VoidClass-0-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  VoidClass-0-state-site = fail
  VoidClass-0-use-site(|lang, partition, unique*, uri*, state*) = fail
  VoidClass-0-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  VoidClass-0-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  VoidClass-0-import-site(|lang, partition, unique*, uri*, state*) = fail
  VoidClass-0-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Class-1, Sort ClassLiteral

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ClassLiteral(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-ClassLiteral(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Class-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Class-1(sibling-uris|lang, partition, unique*, uri*) =
    ?Class(_) 
  ; nabl-state-pop(?state*)
  ; try(Class-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Class-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Class-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Class-1-state-site)
  ; try(Class-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-Class-1(|lang, partition, unique*, child-uri*)
  ; try(Class-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Class-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Class-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Class-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Class-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Class-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-Class-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); Class(
        spectrav-debug(|"b-0 "); specific-collect-Type(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  Class-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Class-1-scoping-site = fail
  Class-1-new-scoping-site = fail
  Class-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Class-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Class-1-state-site = fail
  Class-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  Class-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Class-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Class-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  Class-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Sort Literal, injected into ClassLiteral

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Literal(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-Literal(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ClassLiteral(sibling-uris|lang, partition, unique*, uri*)

rules // Sort Literal, injected into NullLiteral

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Literal(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-Literal(sibling-uris|lang, partition, unique*, uri*) = specific-collect-NullLiteral(sibling-uris|lang, partition, unique*, uri*)

rules // Sort Literal, injected into StringLiteral

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Literal(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-Literal(sibling-uris|lang, partition, unique*, uri*) = specific-collect-StringLiteral(sibling-uris|lang, partition, unique*, uri*)

rules // Sort Literal, injected into CharLiteral

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Literal(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-Literal(sibling-uris|lang, partition, unique*, uri*) = specific-collect-CharLiteral(sibling-uris|lang, partition, unique*, uri*)

rules // Sort Literal, injected into BoolLiteral

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Literal(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-Literal(sibling-uris|lang, partition, unique*, uri*) = specific-collect-BoolLiteral(sibling-uris|lang, partition, unique*, uri*)

rules // Sort Literal, injected into FloatLiteral

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Literal(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-Literal(sibling-uris|lang, partition, unique*, uri*) = specific-collect-FloatLiteral(sibling-uris|lang, partition, unique*, uri*)

rules // Sort Literal, injected into IntLiteral

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Literal(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-Literal(sibling-uris|lang, partition, unique*, uri*) = specific-collect-IntLiteral(sibling-uris|lang, partition, unique*, uri*)

rules // Constructor AssignOr-2, Sort Expr

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*) = specific-collect-AssignOr-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-AssignOr-2(sibling-uris|lang, partition, unique*, uri*) =
    ?AssignOr(_, _) 
  ; nabl-state-pop(?state*)
  ; try(AssignOr-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      AssignOr-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(AssignOr-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(AssignOr-2-state-site)
  ; try(AssignOr-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-AssignOr-2(|lang, partition, unique*, child-uri*)
  ; try(AssignOr-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(AssignOr-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(AssignOr-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(AssignOr-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(AssignOr-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(AssignOr-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-AssignOr-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); AssignOr(
        spectrav-debug(|"b-0 "); specific-collect-LHS(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-Expr(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  AssignOr-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  AssignOr-2-scoping-site = fail
  AssignOr-2-new-scoping-site = fail
  AssignOr-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  AssignOr-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  AssignOr-2-state-site = fail
  AssignOr-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  AssignOr-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  AssignOr-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  AssignOr-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  AssignOr-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor AssignExcOr-2, Sort Expr

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*) = specific-collect-AssignExcOr-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-AssignExcOr-2(sibling-uris|lang, partition, unique*, uri*) =
    ?AssignExcOr(_, _) 
  ; nabl-state-pop(?state*)
  ; try(AssignExcOr-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      AssignExcOr-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(AssignExcOr-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(AssignExcOr-2-state-site)
  ; try(AssignExcOr-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-AssignExcOr-2(|lang, partition, unique*, child-uri*)
  ; try(AssignExcOr-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(AssignExcOr-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(AssignExcOr-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(AssignExcOr-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(AssignExcOr-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(AssignExcOr-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-AssignExcOr-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); AssignExcOr(
        spectrav-debug(|"b-0 "); specific-collect-LHS(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-Expr(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  AssignExcOr-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  AssignExcOr-2-scoping-site = fail
  AssignExcOr-2-new-scoping-site = fail
  AssignExcOr-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  AssignExcOr-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  AssignExcOr-2-state-site = fail
  AssignExcOr-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  AssignExcOr-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  AssignExcOr-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  AssignExcOr-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  AssignExcOr-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor AssignAnd-2, Sort Expr

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*) = specific-collect-AssignAnd-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-AssignAnd-2(sibling-uris|lang, partition, unique*, uri*) =
    ?AssignAnd(_, _) 
  ; nabl-state-pop(?state*)
  ; try(AssignAnd-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      AssignAnd-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(AssignAnd-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(AssignAnd-2-state-site)
  ; try(AssignAnd-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-AssignAnd-2(|lang, partition, unique*, child-uri*)
  ; try(AssignAnd-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(AssignAnd-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(AssignAnd-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(AssignAnd-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(AssignAnd-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(AssignAnd-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-AssignAnd-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); AssignAnd(
        spectrav-debug(|"b-0 "); specific-collect-LHS(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-Expr(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  AssignAnd-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  AssignAnd-2-scoping-site = fail
  AssignAnd-2-new-scoping-site = fail
  AssignAnd-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  AssignAnd-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  AssignAnd-2-state-site = fail
  AssignAnd-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  AssignAnd-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  AssignAnd-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  AssignAnd-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  AssignAnd-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor AssignURightShift-2, Sort Expr

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*) = specific-collect-AssignURightShift-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-AssignURightShift-2(sibling-uris|lang, partition, unique*, uri*) =
    ?AssignURightShift(_, _) 
  ; nabl-state-pop(?state*)
  ; try(AssignURightShift-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      AssignURightShift-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(AssignURightShift-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(AssignURightShift-2-state-site)
  ; try(AssignURightShift-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-AssignURightShift-2(|lang, partition, unique*, child-uri*)
  ; try(AssignURightShift-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(AssignURightShift-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(AssignURightShift-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(AssignURightShift-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(AssignURightShift-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(AssignURightShift-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-AssignURightShift-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); AssignURightShift(
        spectrav-debug(|"b-0 "); specific-collect-LHS(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-Expr(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  AssignURightShift-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  AssignURightShift-2-scoping-site = fail
  AssignURightShift-2-new-scoping-site = fail
  AssignURightShift-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  AssignURightShift-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  AssignURightShift-2-state-site = fail
  AssignURightShift-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  AssignURightShift-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  AssignURightShift-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  AssignURightShift-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  AssignURightShift-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor AssignRightShift-2, Sort Expr

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*) = specific-collect-AssignRightShift-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-AssignRightShift-2(sibling-uris|lang, partition, unique*, uri*) =
    ?AssignRightShift(_, _) 
  ; nabl-state-pop(?state*)
  ; try(AssignRightShift-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      AssignRightShift-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(AssignRightShift-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(AssignRightShift-2-state-site)
  ; try(AssignRightShift-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-AssignRightShift-2(|lang, partition, unique*, child-uri*)
  ; try(AssignRightShift-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(AssignRightShift-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(AssignRightShift-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(AssignRightShift-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(AssignRightShift-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(AssignRightShift-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-AssignRightShift-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); AssignRightShift(
        spectrav-debug(|"b-0 "); specific-collect-LHS(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-Expr(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  AssignRightShift-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  AssignRightShift-2-scoping-site = fail
  AssignRightShift-2-new-scoping-site = fail
  AssignRightShift-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  AssignRightShift-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  AssignRightShift-2-state-site = fail
  AssignRightShift-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  AssignRightShift-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  AssignRightShift-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  AssignRightShift-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  AssignRightShift-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor AssignLeftShift-2, Sort Expr

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*) = specific-collect-AssignLeftShift-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-AssignLeftShift-2(sibling-uris|lang, partition, unique*, uri*) =
    ?AssignLeftShift(_, _) 
  ; nabl-state-pop(?state*)
  ; try(AssignLeftShift-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      AssignLeftShift-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(AssignLeftShift-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(AssignLeftShift-2-state-site)
  ; try(AssignLeftShift-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-AssignLeftShift-2(|lang, partition, unique*, child-uri*)
  ; try(AssignLeftShift-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(AssignLeftShift-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(AssignLeftShift-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(AssignLeftShift-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(AssignLeftShift-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(AssignLeftShift-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-AssignLeftShift-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); AssignLeftShift(
        spectrav-debug(|"b-0 "); specific-collect-LHS(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-Expr(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  AssignLeftShift-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  AssignLeftShift-2-scoping-site = fail
  AssignLeftShift-2-new-scoping-site = fail
  AssignLeftShift-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  AssignLeftShift-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  AssignLeftShift-2-state-site = fail
  AssignLeftShift-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  AssignLeftShift-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  AssignLeftShift-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  AssignLeftShift-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  AssignLeftShift-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor AssignMinus-2, Sort Expr

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*) = specific-collect-AssignMinus-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-AssignMinus-2(sibling-uris|lang, partition, unique*, uri*) =
    ?AssignMinus(_, _) 
  ; nabl-state-pop(?state*)
  ; try(AssignMinus-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      AssignMinus-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(AssignMinus-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(AssignMinus-2-state-site)
  ; try(AssignMinus-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-AssignMinus-2(|lang, partition, unique*, child-uri*)
  ; try(AssignMinus-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(AssignMinus-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(AssignMinus-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(AssignMinus-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(AssignMinus-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(AssignMinus-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-AssignMinus-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); AssignMinus(
        spectrav-debug(|"b-0 "); specific-collect-LHS(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-Expr(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  AssignMinus-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  AssignMinus-2-scoping-site = fail
  AssignMinus-2-new-scoping-site = fail
  AssignMinus-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  AssignMinus-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  AssignMinus-2-state-site = fail
  AssignMinus-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  AssignMinus-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  AssignMinus-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  AssignMinus-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  AssignMinus-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor AssignPlus-2, Sort Expr

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*) = specific-collect-AssignPlus-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-AssignPlus-2(sibling-uris|lang, partition, unique*, uri*) =
    ?AssignPlus(_, _) 
  ; nabl-state-pop(?state*)
  ; try(AssignPlus-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      AssignPlus-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(AssignPlus-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(AssignPlus-2-state-site)
  ; try(AssignPlus-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-AssignPlus-2(|lang, partition, unique*, child-uri*)
  ; try(AssignPlus-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(AssignPlus-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(AssignPlus-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(AssignPlus-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(AssignPlus-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(AssignPlus-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-AssignPlus-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); AssignPlus(
        spectrav-debug(|"b-0 "); specific-collect-LHS(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-Expr(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  AssignPlus-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  AssignPlus-2-scoping-site = fail
  AssignPlus-2-new-scoping-site = fail
  AssignPlus-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  AssignPlus-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  AssignPlus-2-state-site = fail
  AssignPlus-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  AssignPlus-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  AssignPlus-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  AssignPlus-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  AssignPlus-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor AssignMod-2, Sort Expr

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*) = specific-collect-AssignMod-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-AssignMod-2(sibling-uris|lang, partition, unique*, uri*) =
    ?AssignMod(_, _) 
  ; nabl-state-pop(?state*)
  ; try(AssignMod-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      AssignMod-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(AssignMod-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(AssignMod-2-state-site)
  ; try(AssignMod-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-AssignMod-2(|lang, partition, unique*, child-uri*)
  ; try(AssignMod-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(AssignMod-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(AssignMod-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(AssignMod-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(AssignMod-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(AssignMod-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-AssignMod-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); AssignMod(
        spectrav-debug(|"b-0 "); specific-collect-LHS(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-Expr(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  AssignMod-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  AssignMod-2-scoping-site = fail
  AssignMod-2-new-scoping-site = fail
  AssignMod-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  AssignMod-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  AssignMod-2-state-site = fail
  AssignMod-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  AssignMod-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  AssignMod-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  AssignMod-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  AssignMod-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor AssignDiv-2, Sort Expr

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*) = specific-collect-AssignDiv-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-AssignDiv-2(sibling-uris|lang, partition, unique*, uri*) =
    ?AssignDiv(_, _) 
  ; nabl-state-pop(?state*)
  ; try(AssignDiv-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      AssignDiv-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(AssignDiv-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(AssignDiv-2-state-site)
  ; try(AssignDiv-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-AssignDiv-2(|lang, partition, unique*, child-uri*)
  ; try(AssignDiv-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(AssignDiv-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(AssignDiv-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(AssignDiv-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(AssignDiv-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(AssignDiv-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-AssignDiv-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); AssignDiv(
        spectrav-debug(|"b-0 "); specific-collect-LHS(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-Expr(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  AssignDiv-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  AssignDiv-2-scoping-site = fail
  AssignDiv-2-new-scoping-site = fail
  AssignDiv-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  AssignDiv-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  AssignDiv-2-state-site = fail
  AssignDiv-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  AssignDiv-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  AssignDiv-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  AssignDiv-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  AssignDiv-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor AssignMul-2, Sort Expr

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*) = specific-collect-AssignMul-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-AssignMul-2(sibling-uris|lang, partition, unique*, uri*) =
    ?AssignMul(_, _) 
  ; nabl-state-pop(?state*)
  ; try(AssignMul-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      AssignMul-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(AssignMul-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(AssignMul-2-state-site)
  ; try(AssignMul-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-AssignMul-2(|lang, partition, unique*, child-uri*)
  ; try(AssignMul-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(AssignMul-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(AssignMul-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(AssignMul-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(AssignMul-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(AssignMul-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-AssignMul-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); AssignMul(
        spectrav-debug(|"b-0 "); specific-collect-LHS(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-Expr(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  AssignMul-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  AssignMul-2-scoping-site = fail
  AssignMul-2-new-scoping-site = fail
  AssignMul-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  AssignMul-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  AssignMul-2-state-site = fail
  AssignMul-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  AssignMul-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  AssignMul-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  AssignMul-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  AssignMul-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Assign-2, Sort Expr

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Assign-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Assign-2(sibling-uris|lang, partition, unique*, uri*) =
    ?Assign(_, _) 
  ; nabl-state-pop(?state*)
  ; try(Assign-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Assign-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Assign-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Assign-2-state-site)
  ; try(Assign-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-Assign-2(|lang, partition, unique*, child-uri*)
  ; try(Assign-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Assign-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Assign-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Assign-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Assign-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Assign-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-Assign-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); Assign(
        spectrav-debug(|"b-0 "); specific-collect-LHS(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-Expr(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  Assign-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Assign-2-scoping-site = fail
  Assign-2-new-scoping-site = fail
  Assign-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Assign-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Assign-2-state-site = fail
  Assign-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  Assign-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Assign-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Assign-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  Assign-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Cond-3, Sort Expr

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Cond-3(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Cond-3(sibling-uris|lang, partition, unique*, uri*) =
    ?Cond(_, _, _) 
  ; nabl-state-pop(?state*)
  ; try(Cond-3-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Cond-3-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Cond-3-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Cond-3-state-site)
  ; try(Cond-3-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-Cond-3(|lang, partition, unique*, child-uri*)
  ; try(Cond-3-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Cond-3-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Cond-3-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Cond-3-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Cond-3-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Cond-3-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-Cond-3(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); Cond(
        spectrav-debug(|"b-0 "); specific-collect-Expr(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-CondMid(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 "), spectrav-debug(|"b-2 "); specific-collect-Expr(?sibling-uri-2*|lang, partition, unique*, sibling-uri-1*); spectrav-debug(|"a-2 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  Cond-3-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Cond-3-scoping-site = fail
  Cond-3-new-scoping-site = fail
  Cond-3-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Cond-3-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Cond-3-state-site = fail
  Cond-3-use-site(|lang, partition, unique*, uri*, state*) = fail
  Cond-3-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Cond-3-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Cond-3-import-site(|lang, partition, unique*, uri*, state*) = fail
  Cond-3-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Or-2, Sort Expr

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Or-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Or-2(sibling-uris|lang, partition, unique*, uri*) =
    ?Or(_, _) 
  ; nabl-state-pop(?state*)
  ; try(Or-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Or-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Or-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Or-2-state-site)
  ; try(Or-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-Or-2(|lang, partition, unique*, child-uri*)
  ; try(Or-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Or-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Or-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Or-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Or-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Or-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-Or-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); Or(
        spectrav-debug(|"b-0 "); specific-collect-Expr(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-Expr(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  Or-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Or-2-scoping-site = fail
  Or-2-new-scoping-site = fail
  Or-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Or-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Or-2-state-site = fail
  Or-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  Or-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Or-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Or-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  Or-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor ExcOr-2, Sort Expr

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ExcOr-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-ExcOr-2(sibling-uris|lang, partition, unique*, uri*) =
    ?ExcOr(_, _) 
  ; nabl-state-pop(?state*)
  ; try(ExcOr-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      ExcOr-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(ExcOr-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(ExcOr-2-state-site)
  ; try(ExcOr-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-ExcOr-2(|lang, partition, unique*, child-uri*)
  ; try(ExcOr-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(ExcOr-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(ExcOr-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(ExcOr-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(ExcOr-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(ExcOr-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-ExcOr-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); ExcOr(
        spectrav-debug(|"b-0 "); specific-collect-Expr(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-Expr(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  ExcOr-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  ExcOr-2-scoping-site = fail
  ExcOr-2-new-scoping-site = fail
  ExcOr-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  ExcOr-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  ExcOr-2-state-site = fail
  ExcOr-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  ExcOr-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  ExcOr-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  ExcOr-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  ExcOr-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor And-2, Sort Expr

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*) = specific-collect-And-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-And-2(sibling-uris|lang, partition, unique*, uri*) =
    ?And(_, _) 
  ; nabl-state-pop(?state*)
  ; try(And-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      And-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(And-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(And-2-state-site)
  ; try(And-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-And-2(|lang, partition, unique*, child-uri*)
  ; try(And-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(And-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(And-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(And-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(And-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(And-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-And-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); And(
        spectrav-debug(|"b-0 "); specific-collect-Expr(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-Expr(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  And-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  And-2-scoping-site = fail
  And-2-new-scoping-site = fail
  And-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  And-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  And-2-state-site = fail
  And-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  And-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  And-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  And-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  And-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor LazyOr-2, Sort Expr

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*) = specific-collect-LazyOr-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-LazyOr-2(sibling-uris|lang, partition, unique*, uri*) =
    ?LazyOr(_, _) 
  ; nabl-state-pop(?state*)
  ; try(LazyOr-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      LazyOr-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(LazyOr-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(LazyOr-2-state-site)
  ; try(LazyOr-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-LazyOr-2(|lang, partition, unique*, child-uri*)
  ; try(LazyOr-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(LazyOr-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(LazyOr-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(LazyOr-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(LazyOr-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(LazyOr-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-LazyOr-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); LazyOr(
        spectrav-debug(|"b-0 "); specific-collect-Expr(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-Expr(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  LazyOr-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  LazyOr-2-scoping-site = fail
  LazyOr-2-new-scoping-site = fail
  LazyOr-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  LazyOr-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  LazyOr-2-state-site = fail
  LazyOr-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  LazyOr-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  LazyOr-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  LazyOr-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  LazyOr-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor LazyAnd-2, Sort Expr

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*) = specific-collect-LazyAnd-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-LazyAnd-2(sibling-uris|lang, partition, unique*, uri*) =
    ?LazyAnd(_, _) 
  ; nabl-state-pop(?state*)
  ; try(LazyAnd-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      LazyAnd-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(LazyAnd-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(LazyAnd-2-state-site)
  ; try(LazyAnd-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-LazyAnd-2(|lang, partition, unique*, child-uri*)
  ; try(LazyAnd-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(LazyAnd-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(LazyAnd-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(LazyAnd-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(LazyAnd-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(LazyAnd-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-LazyAnd-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); LazyAnd(
        spectrav-debug(|"b-0 "); specific-collect-Expr(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-Expr(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  LazyAnd-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  LazyAnd-2-scoping-site = fail
  LazyAnd-2-new-scoping-site = fail
  LazyAnd-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  LazyAnd-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  LazyAnd-2-state-site = fail
  LazyAnd-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  LazyAnd-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  LazyAnd-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  LazyAnd-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  LazyAnd-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor NotEq-2, Sort Expr

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*) = specific-collect-NotEq-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-NotEq-2(sibling-uris|lang, partition, unique*, uri*) =
    ?NotEq(_, _) 
  ; nabl-state-pop(?state*)
  ; try(NotEq-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      NotEq-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(NotEq-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(NotEq-2-state-site)
  ; try(NotEq-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-NotEq-2(|lang, partition, unique*, child-uri*)
  ; try(NotEq-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(NotEq-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(NotEq-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(NotEq-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(NotEq-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(NotEq-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-NotEq-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); NotEq(
        spectrav-debug(|"b-0 "); specific-collect-Expr(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-Expr(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  NotEq-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  NotEq-2-scoping-site = fail
  NotEq-2-new-scoping-site = fail
  NotEq-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  NotEq-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  NotEq-2-state-site = fail
  NotEq-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  NotEq-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  NotEq-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  NotEq-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  NotEq-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Eq-2, Sort Expr

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Eq-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Eq-2(sibling-uris|lang, partition, unique*, uri*) =
    ?Eq(_, _) 
  ; nabl-state-pop(?state*)
  ; try(Eq-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Eq-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Eq-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Eq-2-state-site)
  ; try(Eq-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-Eq-2(|lang, partition, unique*, child-uri*)
  ; try(Eq-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Eq-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Eq-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Eq-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Eq-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Eq-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-Eq-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); Eq(
        spectrav-debug(|"b-0 "); specific-collect-Expr(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-Expr(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  Eq-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Eq-2-scoping-site = fail
  Eq-2-new-scoping-site = fail
  Eq-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Eq-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Eq-2-state-site = fail
  Eq-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  Eq-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Eq-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Eq-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  Eq-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor GtEq-2, Sort Expr

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*) = specific-collect-GtEq-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-GtEq-2(sibling-uris|lang, partition, unique*, uri*) =
    ?GtEq(_, _) 
  ; nabl-state-pop(?state*)
  ; try(GtEq-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      GtEq-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(GtEq-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(GtEq-2-state-site)
  ; try(GtEq-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-GtEq-2(|lang, partition, unique*, child-uri*)
  ; try(GtEq-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(GtEq-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(GtEq-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(GtEq-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(GtEq-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(GtEq-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-GtEq-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); GtEq(
        spectrav-debug(|"b-0 "); specific-collect-Expr(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-Expr(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  GtEq-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  GtEq-2-scoping-site = fail
  GtEq-2-new-scoping-site = fail
  GtEq-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  GtEq-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  GtEq-2-state-site = fail
  GtEq-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  GtEq-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  GtEq-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  GtEq-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  GtEq-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor LtEq-2, Sort Expr

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*) = specific-collect-LtEq-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-LtEq-2(sibling-uris|lang, partition, unique*, uri*) =
    ?LtEq(_, _) 
  ; nabl-state-pop(?state*)
  ; try(LtEq-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      LtEq-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(LtEq-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(LtEq-2-state-site)
  ; try(LtEq-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-LtEq-2(|lang, partition, unique*, child-uri*)
  ; try(LtEq-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(LtEq-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(LtEq-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(LtEq-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(LtEq-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(LtEq-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-LtEq-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); LtEq(
        spectrav-debug(|"b-0 "); specific-collect-Expr(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-Expr(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  LtEq-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  LtEq-2-scoping-site = fail
  LtEq-2-new-scoping-site = fail
  LtEq-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  LtEq-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  LtEq-2-state-site = fail
  LtEq-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  LtEq-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  LtEq-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  LtEq-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  LtEq-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Gt-2, Sort Expr

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Gt-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Gt-2(sibling-uris|lang, partition, unique*, uri*) =
    ?Gt(_, _) 
  ; nabl-state-pop(?state*)
  ; try(Gt-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Gt-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Gt-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Gt-2-state-site)
  ; try(Gt-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-Gt-2(|lang, partition, unique*, child-uri*)
  ; try(Gt-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Gt-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Gt-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Gt-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Gt-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Gt-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-Gt-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); Gt(
        spectrav-debug(|"b-0 "); specific-collect-Expr(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-Expr(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  Gt-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Gt-2-scoping-site = fail
  Gt-2-new-scoping-site = fail
  Gt-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Gt-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Gt-2-state-site = fail
  Gt-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  Gt-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Gt-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Gt-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  Gt-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Lt-2, Sort Expr

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Lt-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Lt-2(sibling-uris|lang, partition, unique*, uri*) =
    ?Lt(_, _) 
  ; nabl-state-pop(?state*)
  ; try(Lt-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Lt-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Lt-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Lt-2-state-site)
  ; try(Lt-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-Lt-2(|lang, partition, unique*, child-uri*)
  ; try(Lt-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Lt-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Lt-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Lt-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Lt-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Lt-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-Lt-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); Lt(
        spectrav-debug(|"b-0 "); specific-collect-Expr(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-Expr(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  Lt-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Lt-2-scoping-site = fail
  Lt-2-new-scoping-site = fail
  Lt-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Lt-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Lt-2-state-site = fail
  Lt-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  Lt-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Lt-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Lt-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  Lt-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor URightShift-2, Sort Expr

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*) = specific-collect-URightShift-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-URightShift-2(sibling-uris|lang, partition, unique*, uri*) =
    ?URightShift(_, _) 
  ; nabl-state-pop(?state*)
  ; try(URightShift-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      URightShift-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(URightShift-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(URightShift-2-state-site)
  ; try(URightShift-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-URightShift-2(|lang, partition, unique*, child-uri*)
  ; try(URightShift-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(URightShift-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(URightShift-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(URightShift-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(URightShift-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(URightShift-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-URightShift-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); URightShift(
        spectrav-debug(|"b-0 "); specific-collect-Expr(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-Expr(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  URightShift-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  URightShift-2-scoping-site = fail
  URightShift-2-new-scoping-site = fail
  URightShift-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  URightShift-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  URightShift-2-state-site = fail
  URightShift-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  URightShift-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  URightShift-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  URightShift-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  URightShift-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor RightShift-2, Sort Expr

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*) = specific-collect-RightShift-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-RightShift-2(sibling-uris|lang, partition, unique*, uri*) =
    ?RightShift(_, _) 
  ; nabl-state-pop(?state*)
  ; try(RightShift-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      RightShift-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(RightShift-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(RightShift-2-state-site)
  ; try(RightShift-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-RightShift-2(|lang, partition, unique*, child-uri*)
  ; try(RightShift-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(RightShift-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(RightShift-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(RightShift-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(RightShift-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(RightShift-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-RightShift-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); RightShift(
        spectrav-debug(|"b-0 "); specific-collect-Expr(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-Expr(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  RightShift-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  RightShift-2-scoping-site = fail
  RightShift-2-new-scoping-site = fail
  RightShift-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  RightShift-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  RightShift-2-state-site = fail
  RightShift-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  RightShift-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  RightShift-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  RightShift-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  RightShift-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor LeftShift-2, Sort Expr

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*) = specific-collect-LeftShift-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-LeftShift-2(sibling-uris|lang, partition, unique*, uri*) =
    ?LeftShift(_, _) 
  ; nabl-state-pop(?state*)
  ; try(LeftShift-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      LeftShift-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(LeftShift-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(LeftShift-2-state-site)
  ; try(LeftShift-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-LeftShift-2(|lang, partition, unique*, child-uri*)
  ; try(LeftShift-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(LeftShift-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(LeftShift-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(LeftShift-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(LeftShift-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(LeftShift-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-LeftShift-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); LeftShift(
        spectrav-debug(|"b-0 "); specific-collect-Expr(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-Expr(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  LeftShift-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  LeftShift-2-scoping-site = fail
  LeftShift-2-new-scoping-site = fail
  LeftShift-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  LeftShift-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  LeftShift-2-state-site = fail
  LeftShift-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  LeftShift-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  LeftShift-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  LeftShift-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  LeftShift-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Minus-2, Sort Expr

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Minus-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Minus-2(sibling-uris|lang, partition, unique*, uri*) =
    ?Minus(_, _) 
  ; nabl-state-pop(?state*)
  ; try(Minus-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Minus-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Minus-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Minus-2-state-site)
  ; try(Minus-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-Minus-2(|lang, partition, unique*, child-uri*)
  ; try(Minus-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Minus-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Minus-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Minus-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Minus-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Minus-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-Minus-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); Minus(
        spectrav-debug(|"b-0 "); specific-collect-Expr(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-Expr(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  Minus-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Minus-2-scoping-site = fail
  Minus-2-new-scoping-site = fail
  Minus-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Minus-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Minus-2-state-site = fail
  Minus-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  Minus-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Minus-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Minus-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  Minus-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Plus-2, Sort Expr

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Plus-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Plus-2(sibling-uris|lang, partition, unique*, uri*) =
    ?Plus(_, _) 
  ; nabl-state-pop(?state*)
  ; try(Plus-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Plus-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Plus-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Plus-2-state-site)
  ; try(Plus-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-Plus-2(|lang, partition, unique*, child-uri*)
  ; try(Plus-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Plus-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Plus-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Plus-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Plus-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Plus-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-Plus-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); Plus(
        spectrav-debug(|"b-0 "); specific-collect-Expr(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-Expr(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  Plus-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Plus-2-scoping-site = fail
  Plus-2-new-scoping-site = fail
  Plus-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Plus-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Plus-2-state-site = fail
  Plus-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  Plus-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Plus-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Plus-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  Plus-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Mod-2, Sort Expr

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Mod-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Mod-2(sibling-uris|lang, partition, unique*, uri*) =
    ?Mod(_, _) 
  ; nabl-state-pop(?state*)
  ; try(Mod-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Mod-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Mod-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Mod-2-state-site)
  ; try(Mod-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-Mod-2(|lang, partition, unique*, child-uri*)
  ; try(Mod-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Mod-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Mod-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Mod-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Mod-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Mod-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-Mod-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); Mod(
        spectrav-debug(|"b-0 "); specific-collect-Expr(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-Expr(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  Mod-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Mod-2-scoping-site = fail
  Mod-2-new-scoping-site = fail
  Mod-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Mod-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Mod-2-state-site = fail
  Mod-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  Mod-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Mod-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Mod-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  Mod-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Div-2, Sort Expr

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Div-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Div-2(sibling-uris|lang, partition, unique*, uri*) =
    ?Div(_, _) 
  ; nabl-state-pop(?state*)
  ; try(Div-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Div-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Div-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Div-2-state-site)
  ; try(Div-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-Div-2(|lang, partition, unique*, child-uri*)
  ; try(Div-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Div-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Div-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Div-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Div-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Div-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-Div-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); Div(
        spectrav-debug(|"b-0 "); specific-collect-Expr(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-Expr(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  Div-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Div-2-scoping-site = fail
  Div-2-new-scoping-site = fail
  Div-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Div-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Div-2-state-site = fail
  Div-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  Div-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Div-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Div-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  Div-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Mul-2, Sort Expr

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Mul-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Mul-2(sibling-uris|lang, partition, unique*, uri*) =
    ?Mul(_, _) 
  ; nabl-state-pop(?state*)
  ; try(Mul-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Mul-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Mul-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Mul-2-state-site)
  ; try(Mul-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-Mul-2(|lang, partition, unique*, child-uri*)
  ; try(Mul-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Mul-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Mul-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Mul-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Mul-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Mul-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-Mul-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); Mul(
        spectrav-debug(|"b-0 "); specific-collect-Expr(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-Expr(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  Mul-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Mul-2-scoping-site = fail
  Mul-2-new-scoping-site = fail
  Mul-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Mul-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Mul-2-state-site = fail
  Mul-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  Mul-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Mul-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Mul-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  Mul-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor InstanceOf-2, Sort Expr

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*) = specific-collect-InstanceOf-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-InstanceOf-2(sibling-uris|lang, partition, unique*, uri*) =
    ?InstanceOf(_, _) 
  ; nabl-state-pop(?state*)
  ; try(InstanceOf-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      InstanceOf-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(InstanceOf-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(InstanceOf-2-state-site)
  ; try(InstanceOf-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-InstanceOf-2(|lang, partition, unique*, child-uri*)
  ; try(InstanceOf-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(InstanceOf-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(InstanceOf-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(InstanceOf-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(InstanceOf-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(InstanceOf-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-InstanceOf-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); InstanceOf(
        spectrav-debug(|"b-0 "); specific-collect-Expr(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-RefType(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  InstanceOf-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  InstanceOf-2-scoping-site = fail
  InstanceOf-2-new-scoping-site = fail
  InstanceOf-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  InstanceOf-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  InstanceOf-2-state-site = fail
  InstanceOf-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  InstanceOf-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  InstanceOf-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  InstanceOf-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  InstanceOf-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor CastRef-2, Sort Expr

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*) = specific-collect-CastRef-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-CastRef-2(sibling-uris|lang, partition, unique*, uri*) =
    ?CastRef(_, _) 
  ; nabl-state-pop(?state*)
  ; try(CastRef-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      CastRef-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(CastRef-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(CastRef-2-state-site)
  ; try(CastRef-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-CastRef-2(|lang, partition, unique*, child-uri*)
  ; try(CastRef-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(CastRef-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(CastRef-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(CastRef-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(CastRef-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(CastRef-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-CastRef-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); CastRef(
        spectrav-debug(|"b-0 "); specific-collect-RefType(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-Expr(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  CastRef-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  CastRef-2-scoping-site = fail
  CastRef-2-new-scoping-site = fail
  CastRef-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  CastRef-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  CastRef-2-state-site = fail
  CastRef-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  CastRef-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  CastRef-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  CastRef-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  CastRef-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor CastPrim-2, Sort Expr

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*) = specific-collect-CastPrim-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-CastPrim-2(sibling-uris|lang, partition, unique*, uri*) =
    ?CastPrim(_, _) 
  ; nabl-state-pop(?state*)
  ; try(CastPrim-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      CastPrim-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(CastPrim-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(CastPrim-2-state-site)
  ; try(CastPrim-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-CastPrim-2(|lang, partition, unique*, child-uri*)
  ; try(CastPrim-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(CastPrim-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(CastPrim-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(CastPrim-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(CastPrim-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(CastPrim-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-CastPrim-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); CastPrim(
        spectrav-debug(|"b-0 "); specific-collect-PrimType(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-Expr(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  CastPrim-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  CastPrim-2-scoping-site = fail
  CastPrim-2-new-scoping-site = fail
  CastPrim-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  CastPrim-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  CastPrim-2-state-site = fail
  CastPrim-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  CastPrim-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  CastPrim-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  CastPrim-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  CastPrim-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Not-1, Sort Expr

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Not-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Not-1(sibling-uris|lang, partition, unique*, uri*) =
    ?Not(_) 
  ; nabl-state-pop(?state*)
  ; try(Not-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Not-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Not-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Not-1-state-site)
  ; try(Not-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-Not-1(|lang, partition, unique*, child-uri*)
  ; try(Not-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Not-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Not-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Not-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Not-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Not-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-Not-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); Not(
        spectrav-debug(|"b-0 "); specific-collect-Expr(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  Not-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Not-1-scoping-site = fail
  Not-1-new-scoping-site = fail
  Not-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Not-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Not-1-state-site = fail
  Not-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  Not-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Not-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Not-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  Not-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Complement-1, Sort Expr

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Complement-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Complement-1(sibling-uris|lang, partition, unique*, uri*) =
    ?Complement(_) 
  ; nabl-state-pop(?state*)
  ; try(Complement-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Complement-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Complement-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Complement-1-state-site)
  ; try(Complement-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-Complement-1(|lang, partition, unique*, child-uri*)
  ; try(Complement-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Complement-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Complement-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Complement-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Complement-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Complement-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-Complement-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); Complement(
        spectrav-debug(|"b-0 "); specific-collect-Expr(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  Complement-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Complement-1-scoping-site = fail
  Complement-1-new-scoping-site = fail
  Complement-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Complement-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Complement-1-state-site = fail
  Complement-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  Complement-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Complement-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Complement-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  Complement-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor PreDecr-1, Sort Expr

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*) = specific-collect-PreDecr-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-PreDecr-1(sibling-uris|lang, partition, unique*, uri*) =
    ?PreDecr(_) 
  ; nabl-state-pop(?state*)
  ; try(PreDecr-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      PreDecr-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(PreDecr-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(PreDecr-1-state-site)
  ; try(PreDecr-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-PreDecr-1(|lang, partition, unique*, child-uri*)
  ; try(PreDecr-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(PreDecr-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(PreDecr-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(PreDecr-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(PreDecr-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(PreDecr-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-PreDecr-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); PreDecr(
        spectrav-debug(|"b-0 "); specific-collect-Expr(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  PreDecr-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  PreDecr-1-scoping-site = fail
  PreDecr-1-new-scoping-site = fail
  PreDecr-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  PreDecr-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  PreDecr-1-state-site = fail
  PreDecr-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  PreDecr-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  PreDecr-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  PreDecr-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  PreDecr-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor PreIncr-1, Sort Expr

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*) = specific-collect-PreIncr-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-PreIncr-1(sibling-uris|lang, partition, unique*, uri*) =
    ?PreIncr(_) 
  ; nabl-state-pop(?state*)
  ; try(PreIncr-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      PreIncr-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(PreIncr-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(PreIncr-1-state-site)
  ; try(PreIncr-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-PreIncr-1(|lang, partition, unique*, child-uri*)
  ; try(PreIncr-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(PreIncr-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(PreIncr-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(PreIncr-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(PreIncr-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(PreIncr-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-PreIncr-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); PreIncr(
        spectrav-debug(|"b-0 "); specific-collect-Expr(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  PreIncr-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  PreIncr-1-scoping-site = fail
  PreIncr-1-new-scoping-site = fail
  PreIncr-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  PreIncr-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  PreIncr-1-state-site = fail
  PreIncr-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  PreIncr-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  PreIncr-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  PreIncr-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  PreIncr-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Minus-1, Sort Expr

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Minus-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Minus-1(sibling-uris|lang, partition, unique*, uri*) =
    ?Minus(_) 
  ; nabl-state-pop(?state*)
  ; try(Minus-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Minus-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Minus-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Minus-1-state-site)
  ; try(Minus-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-Minus-1(|lang, partition, unique*, child-uri*)
  ; try(Minus-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Minus-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Minus-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Minus-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Minus-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Minus-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-Minus-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); Minus(
        spectrav-debug(|"b-0 "); specific-collect-Expr(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  Minus-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Minus-1-scoping-site = fail
  Minus-1-new-scoping-site = fail
  Minus-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Minus-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Minus-1-state-site = fail
  Minus-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  Minus-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Minus-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Minus-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  Minus-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Plus-1, Sort Expr

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Plus-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Plus-1(sibling-uris|lang, partition, unique*, uri*) =
    ?Plus(_) 
  ; nabl-state-pop(?state*)
  ; try(Plus-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Plus-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Plus-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Plus-1-state-site)
  ; try(Plus-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-Plus-1(|lang, partition, unique*, child-uri*)
  ; try(Plus-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Plus-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Plus-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Plus-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Plus-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Plus-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-Plus-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); Plus(
        spectrav-debug(|"b-0 "); specific-collect-Expr(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  Plus-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Plus-1-scoping-site = fail
  Plus-1-new-scoping-site = fail
  Plus-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Plus-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Plus-1-state-site = fail
  Plus-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  Plus-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Plus-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Plus-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  Plus-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor PostDecr-1, Sort Expr

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*) = specific-collect-PostDecr-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-PostDecr-1(sibling-uris|lang, partition, unique*, uri*) =
    ?PostDecr(_) 
  ; nabl-state-pop(?state*)
  ; try(PostDecr-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      PostDecr-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(PostDecr-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(PostDecr-1-state-site)
  ; try(PostDecr-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-PostDecr-1(|lang, partition, unique*, child-uri*)
  ; try(PostDecr-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(PostDecr-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(PostDecr-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(PostDecr-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(PostDecr-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(PostDecr-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-PostDecr-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); PostDecr(
        spectrav-debug(|"b-0 "); specific-collect-Expr(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  PostDecr-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  PostDecr-1-scoping-site = fail
  PostDecr-1-new-scoping-site = fail
  PostDecr-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  PostDecr-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  PostDecr-1-state-site = fail
  PostDecr-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  PostDecr-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  PostDecr-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  PostDecr-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  PostDecr-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor PostIncr-1, Sort Expr

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*) = specific-collect-PostIncr-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-PostIncr-1(sibling-uris|lang, partition, unique*, uri*) =
    ?PostIncr(_) 
  ; nabl-state-pop(?state*)
  ; try(PostIncr-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      PostIncr-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(PostIncr-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(PostIncr-1-state-site)
  ; try(PostIncr-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-PostIncr-1(|lang, partition, unique*, child-uri*)
  ; try(PostIncr-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(PostIncr-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(PostIncr-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(PostIncr-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(PostIncr-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(PostIncr-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-PostIncr-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); PostIncr(
        spectrav-debug(|"b-0 "); specific-collect-Expr(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  PostIncr-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  PostIncr-1-scoping-site = fail
  PostIncr-1-new-scoping-site = fail
  PostIncr-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  PostIncr-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  PostIncr-1-state-site = fail
  PostIncr-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  PostIncr-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  PostIncr-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  PostIncr-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  PostIncr-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Sort Expr, injected into ExprName

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ExprName(sibling-uris|lang, partition, unique*, uri*)

rules // Constructor Invoke-2, Sort Expr

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Invoke-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Invoke-2(sibling-uris|lang, partition, unique*, uri*) =
    ?Invoke(_, _) 
  ; nabl-state-pop(?state*)
  ; try(Invoke-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Invoke-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Invoke-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Invoke-2-state-site)
  ; try(Invoke-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-Invoke-2(|lang, partition, unique*, child-uri*)
  ; try(Invoke-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Invoke-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Invoke-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Invoke-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Invoke-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Invoke-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-Invoke-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); Invoke(
        spectrav-debug(|"b-0 "); specific-collect-MethodSpec(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-MethodArgs(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  Invoke-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Invoke-2-scoping-site = fail
  Invoke-2-new-scoping-site = fail
  Invoke-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Invoke-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Invoke-2-state-site = fail
  Invoke-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  Invoke-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Invoke-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Invoke-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  Invoke-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Sort Expr, injected into ArrayAccess

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ArrayAccess(sibling-uris|lang, partition, unique*, uri*)

rules // Sort Expr, injected into FieldAccess

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*) = specific-collect-FieldAccess(sibling-uris|lang, partition, unique*, uri*)

rules // Sort Expr, injected into ArrayCreationExpr

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ArrayCreationExpr(sibling-uris|lang, partition, unique*, uri*)

rules // Constructor QThis-1, Sort Expr

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*) = specific-collect-QThis-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-QThis-1(sibling-uris|lang, partition, unique*, uri*) =
    ?QThis(_) 
  ; nabl-state-pop(?state*)
  ; try(QThis-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      QThis-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(QThis-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(QThis-1-state-site)
  ; try(QThis-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-QThis-1(|lang, partition, unique*, child-uri*)
  ; try(QThis-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(QThis-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(QThis-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(QThis-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(QThis-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(QThis-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-QThis-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); QThis(
        spectrav-debug(|"b-0 "); specific-collect-TypeName(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  QThis-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  QThis-1-scoping-site = fail
  QThis-1-new-scoping-site = fail
  QThis-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  QThis-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  QThis-1-state-site = fail
  QThis-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  QThis-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  QThis-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  QThis-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  QThis-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor This-0, Sort Expr

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*) = specific-collect-This-0(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-This-0(sibling-uris|lang, partition, unique*, uri*) =
    ?This() 
  ; nabl-state-pop(?state*)
  ; try(This-0-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      This-0-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(This-0-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(This-0-state-site)
  ; try(This-0-collect-rewrite(|lang, partition, uri*, uri'*))
  
  ; try(This-0-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(This-0-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(This-0-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(This-0-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(This-0-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(This-0-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  
    
  This-0-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  This-0-scoping-site = fail
  This-0-new-scoping-site = fail
  This-0-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  This-0-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  This-0-state-site = fail
  This-0-use-site(|lang, partition, unique*, uri*, state*) = fail
  This-0-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  This-0-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  This-0-import-site(|lang, partition, unique*, uri*, state*) = fail
  This-0-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor PackageOrTypeName-2, Sort PackageOrTypeName

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-PackageOrTypeName(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-PackageOrTypeName(sibling-uris|lang, partition, unique*, uri*) = specific-collect-PackageOrTypeName-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-PackageOrTypeName-2(sibling-uris|lang, partition, unique*, uri*) =
    ?PackageOrTypeName(_, _) 
  ; nabl-state-pop(?state*)
  ; try(PackageOrTypeName-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      PackageOrTypeName-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(PackageOrTypeName-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(PackageOrTypeName-2-state-site)
  ; try(PackageOrTypeName-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-PackageOrTypeName-2(|lang, partition, unique*, child-uri*)
  ; try(PackageOrTypeName-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(PackageOrTypeName-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(PackageOrTypeName-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(PackageOrTypeName-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(PackageOrTypeName-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(PackageOrTypeName-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-PackageOrTypeName-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); PackageOrTypeName(
        spectrav-debug(|"b-0 "); specific-collect-PackageOrTypeName(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-ID(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  PackageOrTypeName-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  PackageOrTypeName-2-scoping-site = fail
  PackageOrTypeName-2-new-scoping-site = fail
  PackageOrTypeName-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  PackageOrTypeName-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  PackageOrTypeName-2-state-site = fail
  PackageOrTypeName-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  PackageOrTypeName-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  PackageOrTypeName-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  PackageOrTypeName-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  PackageOrTypeName-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor PackageOrTypeName-1, Sort PackageOrTypeName

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-PackageOrTypeName(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-PackageOrTypeName(sibling-uris|lang, partition, unique*, uri*) = specific-collect-PackageOrTypeName-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-PackageOrTypeName-1(sibling-uris|lang, partition, unique*, uri*) =
    ?PackageOrTypeName(_) 
  ; nabl-state-pop(?state*)
  ; try(PackageOrTypeName-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      PackageOrTypeName-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(PackageOrTypeName-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(PackageOrTypeName-1-state-site)
  ; try(PackageOrTypeName-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-PackageOrTypeName-1(|lang, partition, unique*, child-uri*)
  ; try(PackageOrTypeName-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(PackageOrTypeName-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(PackageOrTypeName-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(PackageOrTypeName-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(PackageOrTypeName-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(PackageOrTypeName-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-PackageOrTypeName-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); PackageOrTypeName(
        spectrav-debug(|"b-0 "); specific-collect-ID(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  PackageOrTypeName-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  PackageOrTypeName-1-scoping-site = fail
  PackageOrTypeName-1-new-scoping-site = fail
  PackageOrTypeName-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  PackageOrTypeName-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  PackageOrTypeName-1-state-site = fail
  PackageOrTypeName-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  PackageOrTypeName-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  PackageOrTypeName-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  PackageOrTypeName-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  PackageOrTypeName-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor MethodName-2, Sort MethodName

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-MethodName(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-MethodName(sibling-uris|lang, partition, unique*, uri*) = specific-collect-MethodName-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-MethodName-2(sibling-uris|lang, partition, unique*, uri*) =
    ?MethodName(_, _) 
  ; nabl-state-pop(?state*)
  ; try(MethodName-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      MethodName-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(MethodName-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(MethodName-2-state-site)
  ; try(MethodName-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-MethodName-2(|lang, partition, unique*, child-uri*)
  ; try(MethodName-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(MethodName-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(MethodName-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(MethodName-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(MethodName-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(MethodName-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-MethodName-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); MethodName(
        spectrav-debug(|"b-0 "); specific-collect-AmbName(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-ID(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  MethodName-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  MethodName-2-scoping-site = fail
  MethodName-2-new-scoping-site = fail
  MethodName-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  MethodName-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  MethodName-2-state-site = fail
  MethodName-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  MethodName-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  MethodName-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  MethodName-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  MethodName-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor MethodName-1, Sort MethodName

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-MethodName(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-MethodName(sibling-uris|lang, partition, unique*, uri*) = specific-collect-MethodName-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-MethodName-1(sibling-uris|lang, partition, unique*, uri*) =
    ?MethodName(_) 
  ; nabl-state-pop(?state*)
  ; try(MethodName-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      MethodName-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(MethodName-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(MethodName-1-state-site)
  ; try(MethodName-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-MethodName-1(|lang, partition, unique*, child-uri*)
  ; try(MethodName-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(MethodName-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(MethodName-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(MethodName-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(MethodName-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(MethodName-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-MethodName-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); MethodName(
        spectrav-debug(|"b-0 "); specific-collect-ID(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  MethodName-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  MethodName-1-scoping-site = fail
  MethodName-1-new-scoping-site = fail
  MethodName-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  MethodName-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  MethodName-1-state-site = fail
  MethodName-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  MethodName-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  MethodName-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  MethodName-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  MethodName-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor ExprName-2, Sort ExprName

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ExprName(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-ExprName(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ExprName-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-ExprName-2(sibling-uris|lang, partition, unique*, uri*) =
    ?ExprName(_, _) 
  ; nabl-state-pop(?state*)
  ; try(ExprName-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      ExprName-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(ExprName-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(ExprName-2-state-site)
  ; try(ExprName-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-ExprName-2(|lang, partition, unique*, child-uri*)
  ; try(ExprName-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(ExprName-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(ExprName-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(ExprName-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(ExprName-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(ExprName-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-ExprName-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); ExprName(
        spectrav-debug(|"b-0 "); specific-collect-AmbName(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-ID(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  ExprName-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  ExprName-2-scoping-site = fail
  ExprName-2-new-scoping-site = fail
  ExprName-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  ExprName-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  ExprName-2-state-site = fail
  ExprName-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  ExprName-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  ExprName-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  ExprName-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  ExprName-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor ExprName-1, Sort ExprName

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ExprName(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-ExprName(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ExprName-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-ExprName-1(sibling-uris|lang, partition, unique*, uri*) =
    ?ExprName(_) 
  ; nabl-state-pop(?state*)
  ; try(ExprName-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      ExprName-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(ExprName-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(ExprName-1-state-site)
  ; try(ExprName-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-ExprName-1(|lang, partition, unique*, child-uri*)
  ; try(ExprName-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(ExprName-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(ExprName-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(ExprName-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(ExprName-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(ExprName-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-ExprName-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); ExprName(
        spectrav-debug(|"b-0 "); specific-collect-ID(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  ExprName-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  ExprName-1-scoping-site = fail
  ExprName-1-new-scoping-site = fail
  ExprName-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  ExprName-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  ExprName-1-state-site = fail
  ExprName-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  ExprName-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  ExprName-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  ExprName-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  ExprName-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor TypeName-2, Sort TypeName

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-TypeName(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-TypeName(sibling-uris|lang, partition, unique*, uri*) = specific-collect-TypeName-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-TypeName-2(sibling-uris|lang, partition, unique*, uri*) =
    ?TypeName(_, _) 
  ; nabl-state-pop(?state*)
  ; try(TypeName-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      TypeName-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(TypeName-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(TypeName-2-state-site)
  ; try(TypeName-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-TypeName-2(|lang, partition, unique*, child-uri*)
  ; try(TypeName-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(TypeName-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(TypeName-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(TypeName-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(TypeName-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(TypeName-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-TypeName-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); TypeName(
        spectrav-debug(|"b-0 "); specific-collect-PackageOrTypeName(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-ID(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  TypeName-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  TypeName-2-scoping-site = fail
  TypeName-2-new-scoping-site = fail
  TypeName-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  TypeName-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  TypeName-2-state-site = fail
  TypeName-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  TypeName-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  TypeName-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  TypeName-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  TypeName-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor TypeName-1, Sort TypeName

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-TypeName(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-TypeName(sibling-uris|lang, partition, unique*, uri*) = specific-collect-TypeName-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-TypeName-1(sibling-uris|lang, partition, unique*, uri*) =
    ?TypeName(_) 
  ; nabl-state-pop(?state*)
  ; try(TypeName-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      TypeName-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(TypeName-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(TypeName-1-state-site)
  ; try(TypeName-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-TypeName-1(|lang, partition, unique*, child-uri*)
  ; try(TypeName-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(TypeName-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(TypeName-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(TypeName-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(TypeName-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(TypeName-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-TypeName-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); TypeName(
        spectrav-debug(|"b-0 "); specific-collect-ID(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  TypeName-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  TypeName-1-scoping-site = fail
  TypeName-1-new-scoping-site = fail
  TypeName-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  TypeName-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  TypeName-1-state-site = fail
  TypeName-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  TypeName-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  TypeName-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  TypeName-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  TypeName-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor AmbName-2, Sort AmbName

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-AmbName(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-AmbName(sibling-uris|lang, partition, unique*, uri*) = specific-collect-AmbName-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-AmbName-2(sibling-uris|lang, partition, unique*, uri*) =
    ?AmbName(_, _) 
  ; nabl-state-pop(?state*)
  ; try(AmbName-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      AmbName-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(AmbName-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(AmbName-2-state-site)
  ; try(AmbName-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-AmbName-2(|lang, partition, unique*, child-uri*)
  ; try(AmbName-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(AmbName-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(AmbName-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(AmbName-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(AmbName-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(AmbName-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-AmbName-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); AmbName(
        spectrav-debug(|"b-0 "); specific-collect-AmbName(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-ID(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  AmbName-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  AmbName-2-scoping-site = fail
  AmbName-2-new-scoping-site = fail
  AmbName-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  AmbName-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  AmbName-2-state-site = fail
  AmbName-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  AmbName-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  AmbName-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  AmbName-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  AmbName-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor AmbName-1, Sort AmbName

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-AmbName(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-AmbName(sibling-uris|lang, partition, unique*, uri*) = specific-collect-AmbName-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-AmbName-1(sibling-uris|lang, partition, unique*, uri*) =
    ?AmbName(_) 
  ; nabl-state-pop(?state*)
  ; try(AmbName-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      AmbName-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(AmbName-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(AmbName-1-state-site)
  ; try(AmbName-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-AmbName-1(|lang, partition, unique*, child-uri*)
  ; try(AmbName-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(AmbName-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(AmbName-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(AmbName-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(AmbName-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(AmbName-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-AmbName-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); AmbName(
        spectrav-debug(|"b-0 "); specific-collect-ID(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  AmbName-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  AmbName-1-scoping-site = fail
  AmbName-1-new-scoping-site = fail
  AmbName-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  AmbName-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  AmbName-1-state-site = fail
  AmbName-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  AmbName-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  AmbName-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  AmbName-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  AmbName-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Null-0, Sort NullLiteral

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-NullLiteral(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-NullLiteral(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Null-0(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Null-0(sibling-uris|lang, partition, unique*, uri*) =
    ?Null() 
  ; nabl-state-pop(?state*)
  ; try(Null-0-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Null-0-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Null-0-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Null-0-state-site)
  ; try(Null-0-collect-rewrite(|lang, partition, uri*, uri'*))
  
  ; try(Null-0-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Null-0-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Null-0-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Null-0-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Null-0-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Null-0-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  
    
  Null-0-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Null-0-scoping-site = fail
  Null-0-new-scoping-site = fail
  Null-0-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Null-0-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Null-0-state-site = fail
  Null-0-use-site(|lang, partition, unique*, uri*, state*) = fail
  Null-0-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Null-0-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Null-0-import-site(|lang, partition, unique*, uri*, state*) = fail
  Null-0-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Sort StringChars, injected into String

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-StringChars(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-StringChars(sibling-uris|lang, partition, unique*, uri*) = specific-collect-String(sibling-uris|lang, partition, unique*, uri*)

rules // Sort StringPart, injected into EscapeSeq

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-StringPart(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-StringPart(sibling-uris|lang, partition, unique*, uri*) = specific-collect-EscapeSeq(sibling-uris|lang, partition, unique*, uri*)

rules // Sort StringPart, injected into UnicodeEscape

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-StringPart(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-StringPart(sibling-uris|lang, partition, unique*, uri*) = specific-collect-UnicodeEscape(sibling-uris|lang, partition, unique*, uri*)

rules // Constructor Chars-1, Sort StringPart

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-StringPart(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-StringPart(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Chars-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Chars-1(sibling-uris|lang, partition, unique*, uri*) =
    ?Chars(_) 
  ; nabl-state-pop(?state*)
  ; try(Chars-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Chars-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Chars-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Chars-1-state-site)
  ; try(Chars-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-Chars-1(|lang, partition, unique*, child-uri*)
  ; try(Chars-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Chars-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Chars-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Chars-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Chars-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Chars-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-Chars-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); Chars(
        spectrav-debug(|"b-0 "); specific-collect-StringChars(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  Chars-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Chars-1-scoping-site = fail
  Chars-1-new-scoping-site = fail
  Chars-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Chars-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Chars-1-state-site = fail
  Chars-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  Chars-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Chars-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Chars-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  Chars-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor String-1, Sort StringLiteral

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-StringLiteral(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-StringLiteral(sibling-uris|lang, partition, unique*, uri*) = specific-collect-String-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-String-1(sibling-uris|lang, partition, unique*, uri*) =
    ?String(_) 
  ; nabl-state-pop(?state*)
  ; try(String-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      String-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(String-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(String-1-state-site)
  ; try(String-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-String-1(|lang, partition, unique*, child-uri*)
  ; try(String-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(String-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(String-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(String-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(String-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(String-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-String-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); String(
        spectrav-debug(|"b-0 "); specific-siblings-list-StringPart(|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  String-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  String-1-scoping-site = fail
  String-1-new-scoping-site = fail
  String-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  String-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  String-1-state-site = fail
  String-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  String-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  String-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  String-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  String-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Sort SingleChar, injected into Int

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-SingleChar(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-SingleChar(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Int(sibling-uris|lang, partition, unique*, uri*)

rules // Sort CharContent, injected into EscapeSeq

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-CharContent(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-CharContent(sibling-uris|lang, partition, unique*, uri*) = specific-collect-EscapeSeq(sibling-uris|lang, partition, unique*, uri*)

rules // Sort CharContent, injected into UnicodeEscape

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-CharContent(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-CharContent(sibling-uris|lang, partition, unique*, uri*) = specific-collect-UnicodeEscape(sibling-uris|lang, partition, unique*, uri*)

rules // Constructor Single-1, Sort CharContent

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-CharContent(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-CharContent(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Single-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Single-1(sibling-uris|lang, partition, unique*, uri*) =
    ?Single(_) 
  ; nabl-state-pop(?state*)
  ; try(Single-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Single-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Single-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Single-1-state-site)
  ; try(Single-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-Single-1(|lang, partition, unique*, child-uri*)
  ; try(Single-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Single-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Single-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Single-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Single-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Single-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-Single-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); Single(
        spectrav-debug(|"b-0 "); specific-collect-SingleChar(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  Single-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Single-1-scoping-site = fail
  Single-1-new-scoping-site = fail
  Single-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Single-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Single-1-state-site = fail
  Single-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  Single-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Single-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Single-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  Single-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Char-1, Sort CharLiteral

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-CharLiteral(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-CharLiteral(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Char-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Char-1(sibling-uris|lang, partition, unique*, uri*) =
    ?Char(_) 
  ; nabl-state-pop(?state*)
  ; try(Char-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Char-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Char-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Char-1-state-site)
  ; try(Char-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-Char-1(|lang, partition, unique*, child-uri*)
  ; try(Char-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Char-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Char-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Char-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Char-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Char-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-Char-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); Char(
        spectrav-debug(|"b-0 "); specific-collect-CharContent(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  Char-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Char-1-scoping-site = fail
  Char-1-new-scoping-site = fail
  Char-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Char-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Char-1-state-site = fail
  Char-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  Char-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Char-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Char-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  Char-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Sort LastOcta, injected into Int

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-LastOcta(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-LastOcta(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Int(sibling-uris|lang, partition, unique*, uri*)

rules // Constructor OctaEscape3-3, Sort OctaEscape

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-OctaEscape(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-OctaEscape(sibling-uris|lang, partition, unique*, uri*) = specific-collect-OctaEscape3-3(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-OctaEscape3-3(sibling-uris|lang, partition, unique*, uri*) =
    ?OctaEscape3(_, _, _) 
  ; nabl-state-pop(?state*)
  ; try(OctaEscape3-3-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      OctaEscape3-3-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(OctaEscape3-3-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(OctaEscape3-3-state-site)
  ; try(OctaEscape3-3-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-OctaEscape3-3(|lang, partition, unique*, child-uri*)
  ; try(OctaEscape3-3-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(OctaEscape3-3-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(OctaEscape3-3-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(OctaEscape3-3-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(OctaEscape3-3-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(OctaEscape3-3-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-OctaEscape3-3(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); OctaEscape3(
        spectrav-debug(|"b-0 "); specific-collect-Int(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-Int(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 "), spectrav-debug(|"b-2 "); specific-collect-Int(?sibling-uri-2*|lang, partition, unique*, sibling-uri-1*); spectrav-debug(|"a-2 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  OctaEscape3-3-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  OctaEscape3-3-scoping-site = fail
  OctaEscape3-3-new-scoping-site = fail
  OctaEscape3-3-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  OctaEscape3-3-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  OctaEscape3-3-state-site = fail
  OctaEscape3-3-use-site(|lang, partition, unique*, uri*, state*) = fail
  OctaEscape3-3-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  OctaEscape3-3-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  OctaEscape3-3-import-site(|lang, partition, unique*, uri*, state*) = fail
  OctaEscape3-3-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor OctaEscape2-2, Sort OctaEscape

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-OctaEscape(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-OctaEscape(sibling-uris|lang, partition, unique*, uri*) = specific-collect-OctaEscape2-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-OctaEscape2-2(sibling-uris|lang, partition, unique*, uri*) =
    ?OctaEscape2(_, _) 
  ; nabl-state-pop(?state*)
  ; try(OctaEscape2-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      OctaEscape2-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(OctaEscape2-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(OctaEscape2-2-state-site)
  ; try(OctaEscape2-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-OctaEscape2-2(|lang, partition, unique*, child-uri*)
  ; try(OctaEscape2-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(OctaEscape2-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(OctaEscape2-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(OctaEscape2-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(OctaEscape2-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(OctaEscape2-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-OctaEscape2-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); OctaEscape2(
        spectrav-debug(|"b-0 "); specific-collect-Int(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-Int(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  OctaEscape2-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  OctaEscape2-2-scoping-site = fail
  OctaEscape2-2-new-scoping-site = fail
  OctaEscape2-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  OctaEscape2-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  OctaEscape2-2-state-site = fail
  OctaEscape2-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  OctaEscape2-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  OctaEscape2-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  OctaEscape2-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  OctaEscape2-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor OctaEscape2-2, Sort OctaEscape

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-OctaEscape(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-OctaEscape(sibling-uris|lang, partition, unique*, uri*) = specific-collect-OctaEscape2-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-OctaEscape2-2(sibling-uris|lang, partition, unique*, uri*) =
    ?OctaEscape2(_, _) 
  ; nabl-state-pop(?state*)
  ; try(OctaEscape2-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      OctaEscape2-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(OctaEscape2-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(OctaEscape2-2-state-site)
  ; try(OctaEscape2-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-OctaEscape2-2(|lang, partition, unique*, child-uri*)
  ; try(OctaEscape2-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(OctaEscape2-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(OctaEscape2-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(OctaEscape2-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(OctaEscape2-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(OctaEscape2-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-OctaEscape2-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); OctaEscape2(
        spectrav-debug(|"b-0 "); specific-collect-Int(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-LastOcta(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  OctaEscape2-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  OctaEscape2-2-scoping-site = fail
  OctaEscape2-2-new-scoping-site = fail
  OctaEscape2-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  OctaEscape2-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  OctaEscape2-2-state-site = fail
  OctaEscape2-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  OctaEscape2-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  OctaEscape2-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  OctaEscape2-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  OctaEscape2-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor OctaEscape1-1, Sort OctaEscape

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-OctaEscape(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-OctaEscape(sibling-uris|lang, partition, unique*, uri*) = specific-collect-OctaEscape1-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-OctaEscape1-1(sibling-uris|lang, partition, unique*, uri*) =
    ?OctaEscape1(_) 
  ; nabl-state-pop(?state*)
  ; try(OctaEscape1-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      OctaEscape1-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(OctaEscape1-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(OctaEscape1-1-state-site)
  ; try(OctaEscape1-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-OctaEscape1-1(|lang, partition, unique*, child-uri*)
  ; try(OctaEscape1-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(OctaEscape1-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(OctaEscape1-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(OctaEscape1-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(OctaEscape1-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(OctaEscape1-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-OctaEscape1-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); OctaEscape1(
        spectrav-debug(|"b-0 "); specific-collect-LastOcta(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  OctaEscape1-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  OctaEscape1-1-scoping-site = fail
  OctaEscape1-1-new-scoping-site = fail
  OctaEscape1-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  OctaEscape1-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  OctaEscape1-1-state-site = fail
  OctaEscape1-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  OctaEscape1-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  OctaEscape1-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  OctaEscape1-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  OctaEscape1-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor NamedEscape-1, Sort NamedEscape

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-NamedEscape(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-NamedEscape(sibling-uris|lang, partition, unique*, uri*) = specific-collect-NamedEscape-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-NamedEscape-1(sibling-uris|lang, partition, unique*, uri*) =
    ?NamedEscape(_) 
  ; nabl-state-pop(?state*)
  ; try(NamedEscape-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      NamedEscape-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(NamedEscape-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(NamedEscape-1-state-site)
  ; try(NamedEscape-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-NamedEscape-1(|lang, partition, unique*, child-uri*)
  ; try(NamedEscape-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(NamedEscape-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(NamedEscape-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(NamedEscape-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(NamedEscape-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(NamedEscape-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-NamedEscape-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); NamedEscape(
        spectrav-debug(|"b-0 "); specific-collect-Int(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  NamedEscape-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  NamedEscape-1-scoping-site = fail
  NamedEscape-1-new-scoping-site = fail
  NamedEscape-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  NamedEscape-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  NamedEscape-1-state-site = fail
  NamedEscape-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  NamedEscape-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  NamedEscape-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  NamedEscape-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  NamedEscape-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Sort EscapeSeq, injected into NamedEscape

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-EscapeSeq(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-EscapeSeq(sibling-uris|lang, partition, unique*, uri*) = specific-collect-NamedEscape(sibling-uris|lang, partition, unique*, uri*)

rules // Sort EscapeSeq, injected into OctaEscape

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-EscapeSeq(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-EscapeSeq(sibling-uris|lang, partition, unique*, uri*) = specific-collect-OctaEscape(sibling-uris|lang, partition, unique*, uri*)

rules // Constructor False-0, Sort Bool

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Bool(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Bool(sibling-uris|lang, partition, unique*, uri*) = specific-collect-False-0(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-False-0(sibling-uris|lang, partition, unique*, uri*) =
    ?False() 
  ; nabl-state-pop(?state*)
  ; try(False-0-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      False-0-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(False-0-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(False-0-state-site)
  ; try(False-0-collect-rewrite(|lang, partition, uri*, uri'*))
  
  ; try(False-0-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(False-0-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(False-0-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(False-0-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(False-0-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(False-0-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  
    
  False-0-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  False-0-scoping-site = fail
  False-0-new-scoping-site = fail
  False-0-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  False-0-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  False-0-state-site = fail
  False-0-use-site(|lang, partition, unique*, uri*, state*) = fail
  False-0-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  False-0-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  False-0-import-site(|lang, partition, unique*, uri*, state*) = fail
  False-0-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor True-0, Sort Bool

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Bool(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Bool(sibling-uris|lang, partition, unique*, uri*) = specific-collect-True-0(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-True-0(sibling-uris|lang, partition, unique*, uri*) =
    ?True() 
  ; nabl-state-pop(?state*)
  ; try(True-0-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      True-0-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(True-0-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(True-0-state-site)
  ; try(True-0-collect-rewrite(|lang, partition, uri*, uri'*))
  
  ; try(True-0-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(True-0-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(True-0-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(True-0-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(True-0-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(True-0-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  
    
  True-0-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  True-0-scoping-site = fail
  True-0-new-scoping-site = fail
  True-0-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  True-0-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  True-0-state-site = fail
  True-0-use-site(|lang, partition, unique*, uri*, state*) = fail
  True-0-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  True-0-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  True-0-import-site(|lang, partition, unique*, uri*, state*) = fail
  True-0-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Bool-1, Sort BoolLiteral

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-BoolLiteral(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-BoolLiteral(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Bool-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Bool-1(sibling-uris|lang, partition, unique*, uri*) =
    ?Bool(_) 
  ; nabl-state-pop(?state*)
  ; try(Bool-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Bool-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Bool-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Bool-1-state-site)
  ; try(Bool-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-Bool-1(|lang, partition, unique*, child-uri*)
  ; try(Bool-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Bool-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Bool-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Bool-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Bool-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Bool-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-Bool-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); Bool(
        spectrav-debug(|"b-0 "); specific-collect-Bool(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  Bool-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Bool-1-scoping-site = fail
  Bool-1-new-scoping-site = fail
  Bool-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Bool-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Bool-1-state-site = fail
  Bool-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  Bool-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Bool-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Bool-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  Bool-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Double-1, Sort FloatLiteral

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-FloatLiteral(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-FloatLiteral(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Double-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Double-1(sibling-uris|lang, partition, unique*, uri*) =
    ?Double(_) 
  ; nabl-state-pop(?state*)
  ; try(Double-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Double-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Double-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Double-1-state-site)
  ; try(Double-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-Double-1(|lang, partition, unique*, child-uri*)
  ; try(Double-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Double-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Double-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Double-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Double-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Double-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-Double-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); Double(
        spectrav-debug(|"b-0 "); specific-collect-HexaDoubleLiteral(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  Double-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Double-1-scoping-site = fail
  Double-1-new-scoping-site = fail
  Double-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Double-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Double-1-state-site = fail
  Double-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  Double-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Double-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Double-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  Double-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Double-1, Sort FloatLiteral

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-FloatLiteral(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-FloatLiteral(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Double-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Double-1(sibling-uris|lang, partition, unique*, uri*) =
    ?Double(_) 
  ; nabl-state-pop(?state*)
  ; try(Double-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Double-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Double-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Double-1-state-site)
  ; try(Double-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-Double-1(|lang, partition, unique*, child-uri*)
  ; try(Double-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Double-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Double-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Double-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Double-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Double-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-Double-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); Double(
        spectrav-debug(|"b-0 "); specific-collect-DeciDoubleLiteral(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  Double-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Double-1-scoping-site = fail
  Double-1-new-scoping-site = fail
  Double-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Double-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Double-1-state-site = fail
  Double-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  Double-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Double-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Double-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  Double-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Float-1, Sort FloatLiteral

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-FloatLiteral(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-FloatLiteral(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Float-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Float-1(sibling-uris|lang, partition, unique*, uri*) =
    ?Float(_) 
  ; nabl-state-pop(?state*)
  ; try(Float-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Float-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Float-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Float-1-state-site)
  ; try(Float-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-Float-1(|lang, partition, unique*, child-uri*)
  ; try(Float-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Float-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Float-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Float-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Float-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Float-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-Float-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); Float(
        spectrav-debug(|"b-0 "); specific-collect-HexaFloatLiteral(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  Float-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Float-1-scoping-site = fail
  Float-1-new-scoping-site = fail
  Float-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Float-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Float-1-state-site = fail
  Float-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  Float-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Float-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Float-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  Float-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Float-1, Sort FloatLiteral

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-FloatLiteral(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-FloatLiteral(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Float-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Float-1(sibling-uris|lang, partition, unique*, uri*) =
    ?Float(_) 
  ; nabl-state-pop(?state*)
  ; try(Float-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Float-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Float-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Float-1-state-site)
  ; try(Float-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-Float-1(|lang, partition, unique*, child-uri*)
  ; try(Float-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Float-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Float-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Float-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Float-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Float-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-Float-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); Float(
        spectrav-debug(|"b-0 "); specific-collect-DeciFloatLiteral(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  Float-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Float-1-scoping-site = fail
  Float-1-new-scoping-site = fail
  Float-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Float-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Float-1-state-site = fail
  Float-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  Float-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Float-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Float-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  Float-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Sort HexaDoubleLiteral, injected into String

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-HexaDoubleLiteral(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-HexaDoubleLiteral(sibling-uris|lang, partition, unique*, uri*) = specific-collect-String(sibling-uris|lang, partition, unique*, uri*)

rules // Sort DeciDoubleLiteral, injected into String

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-DeciDoubleLiteral(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-DeciDoubleLiteral(sibling-uris|lang, partition, unique*, uri*) = specific-collect-String(sibling-uris|lang, partition, unique*, uri*)

rules // Sort HexaFloatLiteral, injected into String

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-HexaFloatLiteral(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-HexaFloatLiteral(sibling-uris|lang, partition, unique*, uri*) = specific-collect-String(sibling-uris|lang, partition, unique*, uri*)

rules // Sort DeciFloatLiteral, injected into String

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-DeciFloatLiteral(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-DeciFloatLiteral(sibling-uris|lang, partition, unique*, uri*) = specific-collect-String(sibling-uris|lang, partition, unique*, uri*)

rules // Constructor Octa-1, Sort IntLiteral

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-IntLiteral(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-IntLiteral(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Octa-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Octa-1(sibling-uris|lang, partition, unique*, uri*) =
    ?Octa(_) 
  ; nabl-state-pop(?state*)
  ; try(Octa-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Octa-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Octa-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Octa-1-state-site)
  ; try(Octa-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-Octa-1(|lang, partition, unique*, child-uri*)
  ; try(Octa-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Octa-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Octa-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Octa-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Octa-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Octa-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-Octa-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); Octa(
        spectrav-debug(|"b-0 "); specific-collect-OctaLiteral(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  Octa-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Octa-1-scoping-site = fail
  Octa-1-new-scoping-site = fail
  Octa-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Octa-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Octa-1-state-site = fail
  Octa-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  Octa-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Octa-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Octa-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  Octa-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Hexa-1, Sort IntLiteral

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-IntLiteral(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-IntLiteral(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Hexa-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Hexa-1(sibling-uris|lang, partition, unique*, uri*) =
    ?Hexa(_) 
  ; nabl-state-pop(?state*)
  ; try(Hexa-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Hexa-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Hexa-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Hexa-1-state-site)
  ; try(Hexa-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-Hexa-1(|lang, partition, unique*, child-uri*)
  ; try(Hexa-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Hexa-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Hexa-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Hexa-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Hexa-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Hexa-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-Hexa-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); Hexa(
        spectrav-debug(|"b-0 "); specific-collect-HexaLiteral(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  Hexa-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Hexa-1-scoping-site = fail
  Hexa-1-new-scoping-site = fail
  Hexa-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Hexa-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Hexa-1-state-site = fail
  Hexa-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  Hexa-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Hexa-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Hexa-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  Hexa-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Deci-1, Sort IntLiteral

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-IntLiteral(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-IntLiteral(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Deci-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Deci-1(sibling-uris|lang, partition, unique*, uri*) =
    ?Deci(_) 
  ; nabl-state-pop(?state*)
  ; try(Deci-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Deci-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Deci-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Deci-1-state-site)
  ; try(Deci-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-Deci-1(|lang, partition, unique*, child-uri*)
  ; try(Deci-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Deci-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Deci-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Deci-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Deci-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Deci-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-Deci-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); Deci(
        spectrav-debug(|"b-0 "); specific-collect-DeciLiteral(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  Deci-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Deci-1-scoping-site = fail
  Deci-1-new-scoping-site = fail
  Deci-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Deci-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Deci-1-state-site = fail
  Deci-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  Deci-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Deci-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Deci-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  Deci-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Sort OctaLiteral, injected into String

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-OctaLiteral(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-OctaLiteral(sibling-uris|lang, partition, unique*, uri*) = specific-collect-String(sibling-uris|lang, partition, unique*, uri*)

rules // Sort HexaLiteral, injected into String

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-HexaLiteral(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-HexaLiteral(sibling-uris|lang, partition, unique*, uri*) = specific-collect-String(sibling-uris|lang, partition, unique*, uri*)

rules // Sort DeciLiteral, injected into String

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-DeciLiteral(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-DeciLiteral(sibling-uris|lang, partition, unique*, uri*) = specific-collect-String(sibling-uris|lang, partition, unique*, uri*)

rules // Constructor StrictFP-0, Sort StrictFP

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-StrictFP(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-StrictFP(sibling-uris|lang, partition, unique*, uri*) = specific-collect-StrictFP-0(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-StrictFP-0(sibling-uris|lang, partition, unique*, uri*) =
    ?StrictFP() 
  ; nabl-state-pop(?state*)
  ; try(StrictFP-0-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      StrictFP-0-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(StrictFP-0-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(StrictFP-0-state-site)
  ; try(StrictFP-0-collect-rewrite(|lang, partition, uri*, uri'*))
  
  ; try(StrictFP-0-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(StrictFP-0-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(StrictFP-0-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(StrictFP-0-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(StrictFP-0-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(StrictFP-0-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  
    
  StrictFP-0-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  StrictFP-0-scoping-site = fail
  StrictFP-0-new-scoping-site = fail
  StrictFP-0-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  StrictFP-0-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  StrictFP-0-state-site = fail
  StrictFP-0-use-site(|lang, partition, unique*, uri*, state*) = fail
  StrictFP-0-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  StrictFP-0-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  StrictFP-0-import-site(|lang, partition, unique*, uri*, state*) = fail
  StrictFP-0-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Synchronized-0, Sort Synchronized

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Synchronized(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Synchronized(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Synchronized-0(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Synchronized-0(sibling-uris|lang, partition, unique*, uri*) =
    ?Synchronized() 
  ; nabl-state-pop(?state*)
  ; try(Synchronized-0-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Synchronized-0-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Synchronized-0-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Synchronized-0-state-site)
  ; try(Synchronized-0-collect-rewrite(|lang, partition, uri*, uri'*))
  
  ; try(Synchronized-0-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Synchronized-0-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Synchronized-0-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Synchronized-0-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Synchronized-0-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Synchronized-0-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  
    
  Synchronized-0-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Synchronized-0-scoping-site = fail
  Synchronized-0-new-scoping-site = fail
  Synchronized-0-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Synchronized-0-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Synchronized-0-state-site = fail
  Synchronized-0-use-site(|lang, partition, unique*, uri*, state*) = fail
  Synchronized-0-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Synchronized-0-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Synchronized-0-import-site(|lang, partition, unique*, uri*, state*) = fail
  Synchronized-0-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Volatile-0, Sort Volatile

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Volatile(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Volatile(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Volatile-0(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Volatile-0(sibling-uris|lang, partition, unique*, uri*) =
    ?Volatile() 
  ; nabl-state-pop(?state*)
  ; try(Volatile-0-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Volatile-0-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Volatile-0-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Volatile-0-state-site)
  ; try(Volatile-0-collect-rewrite(|lang, partition, uri*, uri'*))
  
  ; try(Volatile-0-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Volatile-0-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Volatile-0-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Volatile-0-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Volatile-0-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Volatile-0-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  
    
  Volatile-0-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Volatile-0-scoping-site = fail
  Volatile-0-new-scoping-site = fail
  Volatile-0-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Volatile-0-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Volatile-0-state-site = fail
  Volatile-0-use-site(|lang, partition, unique*, uri*, state*) = fail
  Volatile-0-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Volatile-0-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Volatile-0-import-site(|lang, partition, unique*, uri*, state*) = fail
  Volatile-0-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Transient-0, Sort Transient

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Transient(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Transient(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Transient-0(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Transient-0(sibling-uris|lang, partition, unique*, uri*) =
    ?Transient() 
  ; nabl-state-pop(?state*)
  ; try(Transient-0-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Transient-0-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Transient-0-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Transient-0-state-site)
  ; try(Transient-0-collect-rewrite(|lang, partition, uri*, uri'*))
  
  ; try(Transient-0-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Transient-0-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Transient-0-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Transient-0-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Transient-0-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Transient-0-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  
    
  Transient-0-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Transient-0-scoping-site = fail
  Transient-0-new-scoping-site = fail
  Transient-0-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Transient-0-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Transient-0-state-site = fail
  Transient-0-use-site(|lang, partition, unique*, uri*, state*) = fail
  Transient-0-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Transient-0-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Transient-0-import-site(|lang, partition, unique*, uri*, state*) = fail
  Transient-0-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Native-0, Sort Native

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Native(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Native(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Native-0(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Native-0(sibling-uris|lang, partition, unique*, uri*) =
    ?Native() 
  ; nabl-state-pop(?state*)
  ; try(Native-0-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Native-0-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Native-0-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Native-0-state-site)
  ; try(Native-0-collect-rewrite(|lang, partition, uri*, uri'*))
  
  ; try(Native-0-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Native-0-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Native-0-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Native-0-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Native-0-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Native-0-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  
    
  Native-0-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Native-0-scoping-site = fail
  Native-0-new-scoping-site = fail
  Native-0-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Native-0-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Native-0-state-site = fail
  Native-0-use-site(|lang, partition, unique*, uri*, state*) = fail
  Native-0-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Native-0-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Native-0-import-site(|lang, partition, unique*, uri*, state*) = fail
  Native-0-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Static-0, Sort Static

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Static(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Static(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Static-0(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Static-0(sibling-uris|lang, partition, unique*, uri*) =
    ?Static() 
  ; nabl-state-pop(?state*)
  ; try(Static-0-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Static-0-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Static-0-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Static-0-state-site)
  ; try(Static-0-collect-rewrite(|lang, partition, uri*, uri'*))
  
  ; try(Static-0-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Static-0-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Static-0-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Static-0-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Static-0-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Static-0-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  
    
  Static-0-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Static-0-scoping-site = fail
  Static-0-new-scoping-site = fail
  Static-0-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Static-0-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Static-0-state-site = fail
  Static-0-use-site(|lang, partition, unique*, uri*, state*) = fail
  Static-0-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Static-0-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Static-0-import-site(|lang, partition, unique*, uri*, state*) = fail
  Static-0-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Final-0, Sort Final

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Final(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Final(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Final-0(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Final-0(sibling-uris|lang, partition, unique*, uri*) =
    ?Final() 
  ; nabl-state-pop(?state*)
  ; try(Final-0-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Final-0-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Final-0-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Final-0-state-site)
  ; try(Final-0-collect-rewrite(|lang, partition, uri*, uri'*))
  
  ; try(Final-0-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Final-0-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Final-0-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Final-0-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Final-0-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Final-0-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  
    
  Final-0-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Final-0-scoping-site = fail
  Final-0-new-scoping-site = fail
  Final-0-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Final-0-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Final-0-state-site = fail
  Final-0-use-site(|lang, partition, unique*, uri*, state*) = fail
  Final-0-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Final-0-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Final-0-import-site(|lang, partition, unique*, uri*, state*) = fail
  Final-0-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Abstract-0, Sort Abstract

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Abstract(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Abstract(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Abstract-0(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Abstract-0(sibling-uris|lang, partition, unique*, uri*) =
    ?Abstract() 
  ; nabl-state-pop(?state*)
  ; try(Abstract-0-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Abstract-0-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Abstract-0-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Abstract-0-state-site)
  ; try(Abstract-0-collect-rewrite(|lang, partition, uri*, uri'*))
  
  ; try(Abstract-0-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Abstract-0-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Abstract-0-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Abstract-0-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Abstract-0-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Abstract-0-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  
    
  Abstract-0-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Abstract-0-scoping-site = fail
  Abstract-0-new-scoping-site = fail
  Abstract-0-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Abstract-0-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Abstract-0-state-site = fail
  Abstract-0-use-site(|lang, partition, unique*, uri*, state*) = fail
  Abstract-0-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Abstract-0-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Abstract-0-import-site(|lang, partition, unique*, uri*, state*) = fail
  Abstract-0-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Protected-0, Sort Protected

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Protected(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Protected(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Protected-0(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Protected-0(sibling-uris|lang, partition, unique*, uri*) =
    ?Protected() 
  ; nabl-state-pop(?state*)
  ; try(Protected-0-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Protected-0-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Protected-0-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Protected-0-state-site)
  ; try(Protected-0-collect-rewrite(|lang, partition, uri*, uri'*))
  
  ; try(Protected-0-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Protected-0-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Protected-0-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Protected-0-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Protected-0-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Protected-0-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  
    
  Protected-0-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Protected-0-scoping-site = fail
  Protected-0-new-scoping-site = fail
  Protected-0-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Protected-0-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Protected-0-state-site = fail
  Protected-0-use-site(|lang, partition, unique*, uri*, state*) = fail
  Protected-0-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Protected-0-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Protected-0-import-site(|lang, partition, unique*, uri*, state*) = fail
  Protected-0-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Private-0, Sort Private

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Private(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Private(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Private-0(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Private-0(sibling-uris|lang, partition, unique*, uri*) =
    ?Private() 
  ; nabl-state-pop(?state*)
  ; try(Private-0-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Private-0-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Private-0-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Private-0-state-site)
  ; try(Private-0-collect-rewrite(|lang, partition, uri*, uri'*))
  
  ; try(Private-0-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Private-0-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Private-0-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Private-0-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Private-0-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Private-0-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  
    
  Private-0-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Private-0-scoping-site = fail
  Private-0-new-scoping-site = fail
  Private-0-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Private-0-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Private-0-state-site = fail
  Private-0-use-site(|lang, partition, unique*, uri*, state*) = fail
  Private-0-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Private-0-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Private-0-import-site(|lang, partition, unique*, uri*, state*) = fail
  Private-0-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Public-0, Sort Public

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Public(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Public(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Public-0(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Public-0(sibling-uris|lang, partition, unique*, uri*) =
    ?Public() 
  ; nabl-state-pop(?state*)
  ; try(Public-0-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Public-0-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Public-0-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Public-0-state-site)
  ; try(Public-0-collect-rewrite(|lang, partition, uri*, uri'*))
  
  ; try(Public-0-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Public-0-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Public-0-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Public-0-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Public-0-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Public-0-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  
    
  Public-0-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Public-0-scoping-site = fail
  Public-0-new-scoping-site = fail
  Public-0-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Public-0-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Public-0-state-site = fail
  Public-0-use-site(|lang, partition, unique*, uri*, state*) = fail
  Public-0-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Public-0-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Public-0-import-site(|lang, partition, unique*, uri*, state*) = fail
  Public-0-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Sort ID, injected into String

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ID(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-ID(sibling-uris|lang, partition, unique*, uri*) = specific-collect-String(sibling-uris|lang, partition, unique*, uri*)

rules // Sort UnicodeEscape, injected into String

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-UnicodeEscape(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-UnicodeEscape(sibling-uris|lang, partition, unique*, uri*) = specific-collect-String(sibling-uris|lang, partition, unique*, uri*)

rules // Constructor Public-0, Sort Access

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Access(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Access(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Public-0(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Public-0(sibling-uris|lang, partition, unique*, uri*) =
    ?Public() 
  ; nabl-state-pop(?state*)
  ; try(Public-0-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Public-0-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Public-0-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Public-0-state-site)
  ; try(Public-0-collect-rewrite(|lang, partition, uri*, uri'*))
  
  ; try(Public-0-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Public-0-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Public-0-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Public-0-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Public-0-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Public-0-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  
    
  Public-0-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Public-0-scoping-site = fail
  Public-0-new-scoping-site = fail
  Public-0-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Public-0-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Public-0-state-site = fail
  Public-0-use-site(|lang, partition, unique*, uri*, state*) = fail
  Public-0-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Public-0-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Public-0-import-site(|lang, partition, unique*, uri*, state*) = fail
  Public-0-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Private-0, Sort Access

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Access(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Access(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Private-0(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Private-0(sibling-uris|lang, partition, unique*, uri*) =
    ?Private() 
  ; nabl-state-pop(?state*)
  ; try(Private-0-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Private-0-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Private-0-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Private-0-state-site)
  ; try(Private-0-collect-rewrite(|lang, partition, uri*, uri'*))
  
  ; try(Private-0-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Private-0-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Private-0-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Private-0-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Private-0-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Private-0-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  
    
  Private-0-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Private-0-scoping-site = fail
  Private-0-new-scoping-site = fail
  Private-0-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Private-0-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Private-0-state-site = fail
  Private-0-use-site(|lang, partition, unique*, uri*, state*) = fail
  Private-0-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Private-0-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Private-0-import-site(|lang, partition, unique*, uri*, state*) = fail
  Private-0-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Protected-0, Sort Access

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Access(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Access(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Protected-0(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Protected-0(sibling-uris|lang, partition, unique*, uri*) =
    ?Protected() 
  ; nabl-state-pop(?state*)
  ; try(Protected-0-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Protected-0-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Protected-0-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Protected-0-state-site)
  ; try(Protected-0-collect-rewrite(|lang, partition, uri*, uri'*))
  
  ; try(Protected-0-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Protected-0-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Protected-0-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Protected-0-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Protected-0-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Protected-0-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  
    
  Protected-0-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Protected-0-scoping-site = fail
  Protected-0-new-scoping-site = fail
  Protected-0-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Protected-0-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Protected-0-state-site = fail
  Protected-0-use-site(|lang, partition, unique*, uri*, state*) = fail
  Protected-0-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Protected-0-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Protected-0-import-site(|lang, partition, unique*, uri*, state*) = fail
  Protected-0-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Default-0, Sort Access

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Access(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Access(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Default-0(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Default-0(sibling-uris|lang, partition, unique*, uri*) =
    ?Default() 
  ; nabl-state-pop(?state*)
  ; try(Default-0-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Default-0-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Default-0-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Default-0-state-site)
  ; try(Default-0-collect-rewrite(|lang, partition, uri*, uri'*))
  
  ; try(Default-0-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Default-0-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Default-0-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Default-0-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Default-0-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Default-0-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  
    
  Default-0-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Default-0-scoping-site = fail
  Default-0-new-scoping-site = fail
  Default-0-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Default-0-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Default-0-state-site = fail
  Default-0-use-site(|lang, partition, unique*, uri*, state*) = fail
  Default-0-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Default-0-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Default-0-import-site(|lang, partition, unique*, uri*, state*) = fail
  Default-0-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Static-0, Sort Context

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Context(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Context(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Static-0(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Static-0(sibling-uris|lang, partition, unique*, uri*) =
    ?Static() 
  ; nabl-state-pop(?state*)
  ; try(Static-0-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Static-0-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Static-0-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Static-0-state-site)
  ; try(Static-0-collect-rewrite(|lang, partition, uri*, uri'*))
  
  ; try(Static-0-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Static-0-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Static-0-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Static-0-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Static-0-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Static-0-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  
    
  Static-0-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Static-0-scoping-site = fail
  Static-0-new-scoping-site = fail
  Static-0-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Static-0-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Static-0-state-site = fail
  Static-0-use-site(|lang, partition, unique*, uri*, state*) = fail
  Static-0-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Static-0-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Static-0-import-site(|lang, partition, unique*, uri*, state*) = fail
  Static-0-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Instance-0, Sort Context

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Context(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Context(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Instance-0(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Instance-0(sibling-uris|lang, partition, unique*, uri*) =
    ?Instance() 
  ; nabl-state-pop(?state*)
  ; try(Instance-0-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Instance-0-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Instance-0-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Instance-0-state-site)
  ; try(Instance-0-collect-rewrite(|lang, partition, uri*, uri'*))
  
  ; try(Instance-0-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Instance-0-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Instance-0-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Instance-0-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Instance-0-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Instance-0-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  
    
  Instance-0-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Instance-0-scoping-site = fail
  Instance-0-new-scoping-site = fail
  Instance-0-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Instance-0-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Instance-0-state-site = fail
  Instance-0-use-site(|lang, partition, unique*, uri*, state*) = fail
  Instance-0-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Instance-0-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Instance-0-import-site(|lang, partition, unique*, uri*, state*) = fail
  Instance-0-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor ClassDec-8, Sort ClassDec

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ClassDec(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-ClassDec(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ClassDec-8(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-ClassDec-8(sibling-uris|lang, partition, unique*, uri*) =
    ?ClassDec(_, _, _, _, _, _, _, _) 
  ; nabl-state-pop(?state*)
  ; try(ClassDec-8-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      ClassDec-8-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(ClassDec-8-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(ClassDec-8-state-site)
  ; try(ClassDec-8-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-ClassDec-8(|lang, partition, unique*, child-uri*)
  ; try(ClassDec-8-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(ClassDec-8-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(ClassDec-8-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(ClassDec-8-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(ClassDec-8-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(ClassDec-8-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-ClassDec-8(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); ClassDec(
        spectrav-debug(|"b-0 "); specific-collect-Access(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), 
        spectrav-debug(|"b-1 "); specific-collect-Context(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 "), 
        spectrav-debug(|"b-2 "); specific-siblings-list-ClassMod(|lang, partition, unique*, uri*); spectrav-debug(|"a-2 "), 
        spectrav-debug(|"b-3 "); specific-collect-ID(?sibling-uri-2*|lang, partition, unique*, sibling-uri-1*); spectrav-debug(|"a-3 "), 
        spectrav-debug(|"b-4 "); specific-siblings-option-TypeParams(?sibling-uri-3*|lang, partition, unique*, sibling-uri-2*); spectrav-debug(|"a-4 "), 
        spectrav-debug(|"b-5 "); specific-collect-Super(?sibling-uri-4*|lang, partition, unique*, sibling-uri-3*); spectrav-debug(|"a-5 "), 
        spectrav-debug(|"b-6 "); specific-siblings-list-ImplementsDec(|lang, partition, unique*, uri*); spectrav-debug(|"a-6 "), 
        spectrav-debug(|"b-7 "); specific-collect-ClassBody(?sibling-uri-5*|lang, partition, unique*, sibling-uri-4*); spectrav-debug(|"a-7 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  ClassDec-8-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  ClassDec-8-scoping-site = fail
  ClassDec-8-new-scoping-site = fail
  ClassDec-8-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  ClassDec-8-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  ClassDec-8-state-site = fail
  ClassDec-8-use-site(|lang, partition, unique*, uri*, state*) = fail
  ClassDec-8-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  ClassDec-8-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  ClassDec-8-import-site(|lang, partition, unique*, uri*, state*) = fail
  ClassDec-8-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor ImplementsDec-2, Sort ImplementsDec

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ImplementsDec(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-ImplementsDec(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ImplementsDec-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-ImplementsDec-2(sibling-uris|lang, partition, unique*, uri*) =
    ?ImplementsDec(_, _) 
  ; nabl-state-pop(?state*)
  ; try(ImplementsDec-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      ImplementsDec-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(ImplementsDec-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(ImplementsDec-2-state-site)
  ; try(ImplementsDec-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-ImplementsDec-2(|lang, partition, unique*, child-uri*)
  ; try(ImplementsDec-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(ImplementsDec-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(ImplementsDec-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(ImplementsDec-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(ImplementsDec-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(ImplementsDec-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-ImplementsDec-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); ImplementsDec(
        spectrav-debug(|"b-0 "); specific-collect-ID(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-InterfaceType(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  ImplementsDec-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  ImplementsDec-2-scoping-site = fail
  ImplementsDec-2-new-scoping-site = fail
  ImplementsDec-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  ImplementsDec-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  ImplementsDec-2-state-site = fail
  ImplementsDec-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  ImplementsDec-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  ImplementsDec-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  ImplementsDec-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  ImplementsDec-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor FieldDec-5, Sort FieldDec

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-FieldDec(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-FieldDec(sibling-uris|lang, partition, unique*, uri*) = specific-collect-FieldDec-5(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-FieldDec-5(sibling-uris|lang, partition, unique*, uri*) =
    ?FieldDec(_, _, _, _, _) 
  ; nabl-state-pop(?state*)
  ; try(FieldDec-5-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      FieldDec-5-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(FieldDec-5-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(FieldDec-5-state-site)
  ; try(FieldDec-5-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-FieldDec-5(|lang, partition, unique*, child-uri*)
  ; try(FieldDec-5-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(FieldDec-5-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(FieldDec-5-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(FieldDec-5-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(FieldDec-5-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(FieldDec-5-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-FieldDec-5(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); FieldDec(
        spectrav-debug(|"b-0 "); specific-collect-Access(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-Context(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 "), spectrav-debug(|"b-2 "); specific-siblings-list-FieldMod(|lang, partition, unique*, uri*); spectrav-debug(|"a-2 "), spectrav-debug(|"b-3 "); specific-collect-Type(?sibling-uri-2*|lang, partition, unique*, sibling-uri-1*); spectrav-debug(|"a-3 "), spectrav-debug(|"b-4 "); specific-collect-VarDec(?sibling-uri-3*|lang, partition, unique*, sibling-uri-2*); spectrav-debug(|"a-4 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  FieldDec-5-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  FieldDec-5-scoping-site = fail
  FieldDec-5-new-scoping-site = fail
  FieldDec-5-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  FieldDec-5-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  FieldDec-5-state-site = fail
  FieldDec-5-use-site(|lang, partition, unique*, uri*, state*) = fail
  FieldDec-5-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  FieldDec-5-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  FieldDec-5-import-site(|lang, partition, unique*, uri*, state*) = fail
  FieldDec-5-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor MethodDec-9, Sort MethodDec

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-MethodDec(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-MethodDec(sibling-uris|lang, partition, unique*, uri*) = specific-collect-MethodDec-9(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-MethodDec-9(sibling-uris|lang, partition, unique*, uri*) =
    ?MethodDec(_, _, _, _, _, _, _, _, _) 
  ; nabl-state-pop(?state*)
  ; try(MethodDec-9-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      MethodDec-9-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(MethodDec-9-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(MethodDec-9-state-site)
  ; try(MethodDec-9-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-MethodDec-9(|lang, partition, unique*, child-uri*)
  ; try(MethodDec-9-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(MethodDec-9-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(MethodDec-9-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(MethodDec-9-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(MethodDec-9-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(MethodDec-9-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-MethodDec-9(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); MethodDec(
        spectrav-debug(|"b-0 "); specific-collect-Access(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-Context(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 "), spectrav-debug(|"b-2 "); specific-siblings-list-MethodMod(|lang, partition, unique*, uri*); spectrav-debug(|"a-2 "), spectrav-debug(|"b-3 "); specific-siblings-option-TypeParams(?sibling-uri-2*|lang, partition, unique*, sibling-uri-1*); spectrav-debug(|"a-3 "), spectrav-debug(|"b-4 "); specific-collect-ResultType(?sibling-uri-3*|lang, partition, unique*, sibling-uri-2*); spectrav-debug(|"a-4 "), spectrav-debug(|"b-5 "); specific-collect-ID(?sibling-uri-4*|lang, partition, unique*, sibling-uri-3*); spectrav-debug(|"a-5 "), spectrav-debug(|"b-6 "); specific-collect-MethodParams(?sibling-uri-5*|lang, partition, unique*, sibling-uri-4*); spectrav-debug(|"a-6 "), spectrav-debug(|"b-7 "); specific-siblings-option-Throws(?sibling-uri-6*|lang, partition, unique*, sibling-uri-5*); spectrav-debug(|"a-7 "), spectrav-debug(|"b-8 "); specific-collect-MethodBody(?sibling-uri-7*|lang, partition, unique*, sibling-uri-6*); spectrav-debug(|"a-8 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  MethodDec-9-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  MethodDec-9-scoping-site = fail
  MethodDec-9-new-scoping-site = fail
  MethodDec-9-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  MethodDec-9-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  MethodDec-9-state-site = fail
  MethodDec-9-use-site(|lang, partition, unique*, uri*, state*) = fail
  MethodDec-9-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  MethodDec-9-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  MethodDec-9-import-site(|lang, partition, unique*, uri*, state*) = fail
  MethodDec-9-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor ConstrDec-7, Sort ConstrDec

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ConstrDec(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-ConstrDec(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ConstrDec-7(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-ConstrDec-7(sibling-uris|lang, partition, unique*, uri*) =
    ?ConstrDec(_, _, _, _, _, _, _) 
  ; nabl-state-pop(?state*)
  ; try(ConstrDec-7-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      ConstrDec-7-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(ConstrDec-7-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(ConstrDec-7-state-site)
  ; try(ConstrDec-7-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-ConstrDec-7(|lang, partition, unique*, child-uri*)
  ; try(ConstrDec-7-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(ConstrDec-7-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(ConstrDec-7-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(ConstrDec-7-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(ConstrDec-7-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(ConstrDec-7-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-ConstrDec-7(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); ConstrDec(
        spectrav-debug(|"b-0 "); specific-collect-Access(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-siblings-list-ConstrMod(|lang, partition, unique*, uri*); spectrav-debug(|"a-1 "), spectrav-debug(|"b-2 "); specific-siblings-option-TypeParams(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-2 "), spectrav-debug(|"b-3 "); specific-collect-ID(?sibling-uri-2*|lang, partition, unique*, sibling-uri-1*); spectrav-debug(|"a-3 "), spectrav-debug(|"b-4 "); specific-siblings-list-FormalParam(|lang, partition, unique*, uri*); spectrav-debug(|"a-4 "), spectrav-debug(|"b-5 "); specific-siblings-option-Throws(?sibling-uri-3*|lang, partition, unique*, sibling-uri-2*); spectrav-debug(|"a-5 "), spectrav-debug(|"b-6 "); specific-collect-ConstrBody(?sibling-uri-4*|lang, partition, unique*, sibling-uri-3*); spectrav-debug(|"a-6 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  ConstrDec-7-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  ConstrDec-7-scoping-site = fail
  ConstrDec-7-new-scoping-site = fail
  ConstrDec-7-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  ConstrDec-7-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  ConstrDec-7-state-site = fail
  ConstrDec-7-use-site(|lang, partition, unique*, uri*, state*) = fail
  ConstrDec-7-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  ConstrDec-7-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  ConstrDec-7-import-site(|lang, partition, unique*, uri*, state*) = fail
  ConstrDec-7-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor ConstrBody-1, Sort ConstrBody

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ConstrBody(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-ConstrBody(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ConstrBody-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-ConstrBody-1(sibling-uris|lang, partition, unique*, uri*) =
    ?ConstrBody(_) 
  ; nabl-state-pop(?state*)
  ; try(ConstrBody-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      ConstrBody-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(ConstrBody-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(ConstrBody-1-state-site)
  ; try(ConstrBody-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-ConstrBody-1(|lang, partition, unique*, child-uri*)
  ; try(ConstrBody-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(ConstrBody-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(ConstrBody-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(ConstrBody-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(ConstrBody-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(ConstrBody-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-ConstrBody-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); ConstrBody(
        spectrav-debug(|"b-0 "); specific-siblings-list-BlockStm(|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  ConstrBody-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  ConstrBody-1-scoping-site = fail
  ConstrBody-1-new-scoping-site = fail
  ConstrBody-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  ConstrBody-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  ConstrBody-1-state-site = fail
  ConstrBody-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  ConstrBody-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  ConstrBody-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  ConstrBody-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  ConstrBody-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor InterfaceDec-6, Sort InterfaceDec

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-InterfaceDec(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-InterfaceDec(sibling-uris|lang, partition, unique*, uri*) = specific-collect-InterfaceDec-6(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-InterfaceDec-6(sibling-uris|lang, partition, unique*, uri*) =
    ?InterfaceDec(_, _, _, _, _, _) 
  ; nabl-state-pop(?state*)
  ; try(InterfaceDec-6-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      InterfaceDec-6-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(InterfaceDec-6-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(InterfaceDec-6-state-site)
  ; try(InterfaceDec-6-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-InterfaceDec-6(|lang, partition, unique*, child-uri*)
  ; try(InterfaceDec-6-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(InterfaceDec-6-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(InterfaceDec-6-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(InterfaceDec-6-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(InterfaceDec-6-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(InterfaceDec-6-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-InterfaceDec-6(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); InterfaceDec(
        spectrav-debug(|"b-0 "); specific-collect-Access(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-siblings-list-InterfaceMod(|lang, partition, unique*, uri*); spectrav-debug(|"a-1 "), spectrav-debug(|"b-2 "); specific-collect-ID(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-2 "), spectrav-debug(|"b-3 "); specific-siblings-option-TypeParams(?sibling-uri-2*|lang, partition, unique*, sibling-uri-1*); spectrav-debug(|"a-3 "), spectrav-debug(|"b-4 "); specific-siblings-list-ExtendsInterface(|lang, partition, unique*, uri*); spectrav-debug(|"a-4 "), spectrav-debug(|"b-5 "); specific-siblings-list-InterfaceMemberDec(|lang, partition, unique*, uri*); spectrav-debug(|"a-5 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  InterfaceDec-6-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  InterfaceDec-6-scoping-site = fail
  InterfaceDec-6-new-scoping-site = fail
  InterfaceDec-6-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  InterfaceDec-6-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  InterfaceDec-6-state-site = fail
  InterfaceDec-6-use-site(|lang, partition, unique*, uri*, state*) = fail
  InterfaceDec-6-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  InterfaceDec-6-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  InterfaceDec-6-import-site(|lang, partition, unique*, uri*, state*) = fail
  InterfaceDec-6-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor ExtendsInterfaces-2, Sort ExtendsInterface

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ExtendsInterface(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-ExtendsInterface(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ExtendsInterfaces-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-ExtendsInterfaces-2(sibling-uris|lang, partition, unique*, uri*) =
    ?ExtendsInterfaces(_, _) 
  ; nabl-state-pop(?state*)
  ; try(ExtendsInterfaces-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      ExtendsInterfaces-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(ExtendsInterfaces-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(ExtendsInterfaces-2-state-site)
  ; try(ExtendsInterfaces-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-ExtendsInterfaces-2(|lang, partition, unique*, child-uri*)
  ; try(ExtendsInterfaces-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(ExtendsInterfaces-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(ExtendsInterfaces-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(ExtendsInterfaces-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(ExtendsInterfaces-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(ExtendsInterfaces-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-ExtendsInterfaces-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); ExtendsInterfaces(
        spectrav-debug(|"b-0 "); specific-collect-ID(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-InterfaceType(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  ExtendsInterfaces-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  ExtendsInterfaces-2-scoping-site = fail
  ExtendsInterfaces-2-new-scoping-site = fail
  ExtendsInterfaces-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  ExtendsInterfaces-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  ExtendsInterfaces-2-state-site = fail
  ExtendsInterfaces-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  ExtendsInterfaces-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  ExtendsInterfaces-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  ExtendsInterfaces-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  ExtendsInterfaces-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor ConstantDec-2, Sort ConstantDec

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ConstantDec(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-ConstantDec(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ConstantDec-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-ConstantDec-2(sibling-uris|lang, partition, unique*, uri*) =
    ?ConstantDec(_, _) 
  ; nabl-state-pop(?state*)
  ; try(ConstantDec-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      ConstantDec-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(ConstantDec-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(ConstantDec-2-state-site)
  ; try(ConstantDec-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-ConstantDec-2(|lang, partition, unique*, child-uri*)
  ; try(ConstantDec-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(ConstantDec-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(ConstantDec-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(ConstantDec-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(ConstantDec-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(ConstantDec-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-ConstantDec-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); ConstantDec(
        spectrav-debug(|"b-0 "); specific-collect-Type(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-VarDec(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  ConstantDec-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  ConstantDec-2-scoping-site = fail
  ConstantDec-2-new-scoping-site = fail
  ConstantDec-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  ConstantDec-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  ConstantDec-2-state-site = fail
  ConstantDec-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  ConstantDec-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  ConstantDec-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  ConstantDec-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  ConstantDec-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor NewArray-2, Sort Expr

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*) = specific-collect-NewArray-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-NewArray-2(sibling-uris|lang, partition, unique*, uri*) =
    ?NewArray(_, _) 
  ; nabl-state-pop(?state*)
  ; try(NewArray-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      NewArray-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(NewArray-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(NewArray-2-state-site)
  ; try(NewArray-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-NewArray-2(|lang, partition, unique*, child-uri*)
  ; try(NewArray-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(NewArray-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(NewArray-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(NewArray-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(NewArray-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(NewArray-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-NewArray-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); NewArray(
        spectrav-debug(|"b-0 "); specific-collect-ArrayBaseType(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-siblings-list-Dim(|lang, partition, unique*, uri*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  NewArray-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  NewArray-2-scoping-site = fail
  NewArray-2-new-scoping-site = fail
  NewArray-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  NewArray-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  NewArray-2-state-site = fail
  NewArray-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  NewArray-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  NewArray-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  NewArray-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  NewArray-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor NewInstance-5, Sort Expr

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*) = specific-collect-NewInstance-5(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-NewInstance-5(sibling-uris|lang, partition, unique*, uri*) =
    ?NewInstance(_, _, _, _, _) 
  ; nabl-state-pop(?state*)
  ; try(NewInstance-5-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      NewInstance-5-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(NewInstance-5-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(NewInstance-5-state-site)
  ; try(NewInstance-5-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-NewInstance-5(|lang, partition, unique*, child-uri*)
  ; try(NewInstance-5-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(NewInstance-5-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(NewInstance-5-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(NewInstance-5-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(NewInstance-5-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(NewInstance-5-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-NewInstance-5(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); NewInstance(
        spectrav-debug(|"b-0 "); specific-siblings-option-TypeArgs(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-ClassOrInterfaceType(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 "), spectrav-debug(|"b-2 "); specific-collect-ClassOrInterfaceType(?sibling-uri-2*|lang, partition, unique*, sibling-uri-1*); spectrav-debug(|"a-2 "), spectrav-debug(|"b-3 "); specific-siblings-list-Expr(|lang, partition, unique*, uri*); spectrav-debug(|"a-3 "), spectrav-debug(|"b-4 "); specific-siblings-option-ClassBody(?sibling-uri-3*|lang, partition, unique*, sibling-uri-2*); spectrav-debug(|"a-4 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  NewInstance-5-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  NewInstance-5-scoping-site = fail
  NewInstance-5-new-scoping-site = fail
  NewInstance-5-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  NewInstance-5-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  NewInstance-5-state-site = fail
  NewInstance-5-use-site(|lang, partition, unique*, uri*, state*) = fail
  NewInstance-5-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  NewInstance-5-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  NewInstance-5-import-site(|lang, partition, unique*, uri*, state*) = fail
  NewInstance-5-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor QNewInstance-7, Sort Expr

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*) = specific-collect-QNewInstance-7(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-QNewInstance-7(sibling-uris|lang, partition, unique*, uri*) =
    ?QNewInstance(_, _, _, _, _, _, _) 
  ; nabl-state-pop(?state*)
  ; try(QNewInstance-7-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      QNewInstance-7-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(QNewInstance-7-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(QNewInstance-7-state-site)
  ; try(QNewInstance-7-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-QNewInstance-7(|lang, partition, unique*, child-uri*)
  ; try(QNewInstance-7-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(QNewInstance-7-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(QNewInstance-7-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(QNewInstance-7-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(QNewInstance-7-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(QNewInstance-7-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-QNewInstance-7(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); QNewInstance(
        spectrav-debug(|"b-0 "); specific-collect-Expr(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-siblings-option-TypeArgs(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 "), spectrav-debug(|"b-2 "); specific-collect-ID(?sibling-uri-2*|lang, partition, unique*, sibling-uri-1*); spectrav-debug(|"a-2 "), spectrav-debug(|"b-3 "); specific-collect-ID(?sibling-uri-3*|lang, partition, unique*, sibling-uri-2*); spectrav-debug(|"a-3 "), spectrav-debug(|"b-4 "); specific-collect-TypeArgs(?sibling-uri-4*|lang, partition, unique*, sibling-uri-3*); spectrav-debug(|"a-4 "), spectrav-debug(|"b-5 "); specific-siblings-list-Expr(|lang, partition, unique*, uri*); spectrav-debug(|"a-5 "), spectrav-debug(|"b-6 "); specific-siblings-option-ClassBody(?sibling-uri-5*|lang, partition, unique*, sibling-uri-4*); spectrav-debug(|"a-6 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  QNewInstance-7-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  QNewInstance-7-scoping-site = fail
  QNewInstance-7-new-scoping-site = fail
  QNewInstance-7-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  QNewInstance-7-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  QNewInstance-7-state-site = fail
  QNewInstance-7-use-site(|lang, partition, unique*, uri*, state*) = fail
  QNewInstance-7-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  QNewInstance-7-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  QNewInstance-7-import-site(|lang, partition, unique*, uri*, state*) = fail
  QNewInstance-7-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor CompilationUnit-3, Sort CompilationUnit

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-CompilationUnit(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-CompilationUnit(sibling-uris|lang, partition, unique*, uri*) = specific-collect-CompilationUnit-3(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-CompilationUnit-3(sibling-uris|lang, partition, unique*, uri*) =
    ?CompilationUnit(_, _, _) 
  ; nabl-state-pop(?state*)
  ; try(CompilationUnit-3-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      CompilationUnit-3-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(CompilationUnit-3-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(CompilationUnit-3-state-site)
  ; try(CompilationUnit-3-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-CompilationUnit-3(|lang, partition, unique*, child-uri*)
  ; try(CompilationUnit-3-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(CompilationUnit-3-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(CompilationUnit-3-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(CompilationUnit-3-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(CompilationUnit-3-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(CompilationUnit-3-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-CompilationUnit-3(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); CompilationUnit(
        spectrav-debug(|"b-0 "); specific-collect-ID(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-siblings-list-ImportDec(|lang, partition, unique*, uri*); spectrav-debug(|"a-1 "), spectrav-debug(|"b-2 "); specific-collect-PackageDec(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-2 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  CompilationUnit-3-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  CompilationUnit-3-scoping-site = fail
  CompilationUnit-3-new-scoping-site = fail
  CompilationUnit-3-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  CompilationUnit-3-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  CompilationUnit-3-state-site = fail
  CompilationUnit-3-use-site(|lang, partition, unique*, uri*, state*) = fail
  CompilationUnit-3-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  CompilationUnit-3-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  CompilationUnit-3-import-site(|lang, partition, unique*, uri*, state*) = fail
  CompilationUnit-3-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor DefaultPackageDec-2, Sort PackageDec

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-PackageDec(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-PackageDec(sibling-uris|lang, partition, unique*, uri*) = specific-collect-DefaultPackageDec-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-DefaultPackageDec-2(sibling-uris|lang, partition, unique*, uri*) =
    ?DefaultPackageDec(_, _) 
  ; nabl-state-pop(?state*)
  ; try(DefaultPackageDec-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      DefaultPackageDec-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(DefaultPackageDec-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(DefaultPackageDec-2-state-site)
  ; try(DefaultPackageDec-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-DefaultPackageDec-2(|lang, partition, unique*, child-uri*)
  ; try(DefaultPackageDec-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(DefaultPackageDec-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(DefaultPackageDec-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(DefaultPackageDec-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(DefaultPackageDec-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(DefaultPackageDec-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-DefaultPackageDec-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); DefaultPackageDec(
        spectrav-debug(|"b-0 "); specific-collect-ID(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-PackageDec(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  DefaultPackageDec-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  DefaultPackageDec-2-scoping-site = fail
  DefaultPackageDec-2-new-scoping-site = fail
  DefaultPackageDec-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  DefaultPackageDec-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  DefaultPackageDec-2-state-site = fail
  DefaultPackageDec-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  DefaultPackageDec-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  DefaultPackageDec-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  DefaultPackageDec-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  DefaultPackageDec-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor DefaultPackageDec-2, Sort PackageDec

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-PackageDec(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-PackageDec(sibling-uris|lang, partition, unique*, uri*) = specific-collect-DefaultPackageDec-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-DefaultPackageDec-2(sibling-uris|lang, partition, unique*, uri*) =
    ?DefaultPackageDec(_, _) 
  ; nabl-state-pop(?state*)
  ; try(DefaultPackageDec-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      DefaultPackageDec-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(DefaultPackageDec-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(DefaultPackageDec-2-state-site)
  ; try(DefaultPackageDec-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-DefaultPackageDec-2(|lang, partition, unique*, child-uri*)
  ; try(DefaultPackageDec-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(DefaultPackageDec-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(DefaultPackageDec-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(DefaultPackageDec-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(DefaultPackageDec-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(DefaultPackageDec-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-DefaultPackageDec-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); DefaultPackageDec(
        spectrav-debug(|"b-0 "); specific-collect-ID(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-siblings-list-TypeDec(|lang, partition, unique*, uri*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  DefaultPackageDec-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  DefaultPackageDec-2-scoping-site = fail
  DefaultPackageDec-2-new-scoping-site = fail
  DefaultPackageDec-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  DefaultPackageDec-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  DefaultPackageDec-2-state-site = fail
  DefaultPackageDec-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  DefaultPackageDec-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  DefaultPackageDec-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  DefaultPackageDec-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  DefaultPackageDec-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor PackageDec-2, Sort PackageDec

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-PackageDec(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-PackageDec(sibling-uris|lang, partition, unique*, uri*) = specific-collect-PackageDec-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-PackageDec-2(sibling-uris|lang, partition, unique*, uri*) =
    ?PackageDec(_, _) 
  ; nabl-state-pop(?state*)
  ; try(PackageDec-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      PackageDec-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(PackageDec-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(PackageDec-2-state-site)
  ; try(PackageDec-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-PackageDec-2(|lang, partition, unique*, child-uri*)
  ; try(PackageDec-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(PackageDec-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(PackageDec-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(PackageDec-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(PackageDec-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(PackageDec-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-PackageDec-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); PackageDec(
        spectrav-debug(|"b-0 "); specific-collect-ID(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-PackageDec(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  PackageDec-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  PackageDec-2-scoping-site = fail
  PackageDec-2-new-scoping-site = fail
  PackageDec-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  PackageDec-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  PackageDec-2-state-site = fail
  PackageDec-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  PackageDec-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  PackageDec-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  PackageDec-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  PackageDec-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor PackageDec-3, Sort PackageDec

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-PackageDec(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-PackageDec(sibling-uris|lang, partition, unique*, uri*) = specific-collect-PackageDec-3(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-PackageDec-3(sibling-uris|lang, partition, unique*, uri*) =
    ?PackageDec(_, _, _) 
  ; nabl-state-pop(?state*)
  ; try(PackageDec-3-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      PackageDec-3-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(PackageDec-3-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(PackageDec-3-state-site)
  ; try(PackageDec-3-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-PackageDec-3(|lang, partition, unique*, child-uri*)
  ; try(PackageDec-3-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(PackageDec-3-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(PackageDec-3-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(PackageDec-3-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(PackageDec-3-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(PackageDec-3-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-PackageDec-3(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); PackageDec(
        spectrav-debug(|"b-0 "); specific-siblings-list-Anno(|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-ID(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-1 "), spectrav-debug(|"b-2 "); specific-siblings-list-TypeDec(|lang, partition, unique*, uri*); spectrav-debug(|"a-2 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  PackageDec-3-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  PackageDec-3-scoping-site = fail
  PackageDec-3-new-scoping-site = fail
  PackageDec-3-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  PackageDec-3-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  PackageDec-3-state-site = fail
  PackageDec-3-use-site(|lang, partition, unique*, uri*, state*) = fail
  PackageDec-3-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  PackageDec-3-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  PackageDec-3-import-site(|lang, partition, unique*, uri*, state*) = fail
  PackageDec-3-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor DefaultPackageName-1, Sort PackageName

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-PackageName(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-PackageName(sibling-uris|lang, partition, unique*, uri*) = specific-collect-DefaultPackageName-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-DefaultPackageName-1(sibling-uris|lang, partition, unique*, uri*) =
    ?DefaultPackageName(_) 
  ; nabl-state-pop(?state*)
  ; try(DefaultPackageName-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      DefaultPackageName-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(DefaultPackageName-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(DefaultPackageName-1-state-site)
  ; try(DefaultPackageName-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-DefaultPackageName-1(|lang, partition, unique*, child-uri*)
  ; try(DefaultPackageName-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(DefaultPackageName-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(DefaultPackageName-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(DefaultPackageName-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(DefaultPackageName-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(DefaultPackageName-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-DefaultPackageName-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); DefaultPackageName(
        spectrav-debug(|"b-0 "); specific-collect-ID(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  DefaultPackageName-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  DefaultPackageName-1-scoping-site = fail
  DefaultPackageName-1-new-scoping-site = fail
  DefaultPackageName-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  DefaultPackageName-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  DefaultPackageName-1-state-site = fail
  DefaultPackageName-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  DefaultPackageName-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  DefaultPackageName-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  DefaultPackageName-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  DefaultPackageName-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor PackageName-1, Sort PackageName

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-PackageName(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-PackageName(sibling-uris|lang, partition, unique*, uri*) = specific-collect-PackageName-1(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-PackageName-1(sibling-uris|lang, partition, unique*, uri*) =
    ?PackageName(_) 
  ; nabl-state-pop(?state*)
  ; try(PackageName-1-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      PackageName-1-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(PackageName-1-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(PackageName-1-state-site)
  ; try(PackageName-1-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-PackageName-1(|lang, partition, unique*, child-uri*)
  ; try(PackageName-1-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(PackageName-1-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(PackageName-1-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(PackageName-1-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(PackageName-1-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(PackageName-1-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-PackageName-1(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); PackageName(
        spectrav-debug(|"b-0 "); specific-collect-ID(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  PackageName-1-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  PackageName-1-scoping-site = fail
  PackageName-1-new-scoping-site = fail
  PackageName-1-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  PackageName-1-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  PackageName-1-state-site = fail
  PackageName-1-use-site(|lang, partition, unique*, uri*, state*) = fail
  PackageName-1-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  PackageName-1-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  PackageName-1-import-site(|lang, partition, unique*, uri*, state*) = fail
  PackageName-1-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor PackageName-2, Sort PackageName

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-PackageName(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-PackageName(sibling-uris|lang, partition, unique*, uri*) = specific-collect-PackageName-2(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-PackageName-2(sibling-uris|lang, partition, unique*, uri*) =
    ?PackageName(_, _) 
  ; nabl-state-pop(?state*)
  ; try(PackageName-2-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      PackageName-2-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(PackageName-2-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(PackageName-2-state-site)
  ; try(PackageName-2-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-PackageName-2(|lang, partition, unique*, child-uri*)
  ; try(PackageName-2-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(PackageName-2-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(PackageName-2-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(PackageName-2-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(PackageName-2-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(PackageName-2-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-PackageName-2(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); PackageName(
        spectrav-debug(|"b-0 "); specific-collect-PackageName(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-ID(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  PackageName-2-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  PackageName-2-scoping-site = fail
  PackageName-2-new-scoping-site = fail
  PackageName-2-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  PackageName-2-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  PackageName-2-state-site = fail
  PackageName-2-use-site(|lang, partition, unique*, uri*, state*) = fail
  PackageName-2-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  PackageName-2-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  PackageName-2-import-site(|lang, partition, unique*, uri*, state*) = fail
  PackageName-2-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Default-0, Sort ID

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-ID(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-ID(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Default-0(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Default-0(sibling-uris|lang, partition, unique*, uri*) =
    ?Default() 
  ; nabl-state-pop(?state*)
  ; try(Default-0-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Default-0-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Default-0-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Default-0-state-site)
  ; try(Default-0-collect-rewrite(|lang, partition, uri*, uri'*))
  
  ; try(Default-0-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Default-0-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Default-0-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Default-0-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Default-0-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Default-0-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  
    
  Default-0-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Default-0-scoping-site = fail
  Default-0-new-scoping-site = fail
  Default-0-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Default-0-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Default-0-state-site = fail
  Default-0-use-site(|lang, partition, unique*, uri*, state*) = fail
  Default-0-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Default-0-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Default-0-import-site(|lang, partition, unique*, uri*, state*) = fail
  Default-0-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Sort PackageOrTypeName, injected into PackageName

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-PackageOrTypeName(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-PackageOrTypeName(sibling-uris|lang, partition, unique*, uri*) = specific-collect-PackageName(sibling-uris|lang, partition, unique*, uri*)

rules // Sort BlockStm, injected into LocalVarDec

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-BlockStm(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-BlockStm(sibling-uris|lang, partition, unique*, uri*) = specific-collect-LocalVarDec(sibling-uris|lang, partition, unique*, uri*)

rules // Sort Stm, injected into Expr

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Stm(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-Stm(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)

rules // Sort Expr, injected into Literal

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*)
  
  specific-collect-Expr(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Literal(sibling-uris|lang, partition, unique*, uri*)

rules // Constructor LocalVarDec-4, Sort LocalVarDec

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-LocalVarDec(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-LocalVarDec(sibling-uris|lang, partition, unique*, uri*) = specific-collect-LocalVarDec-4(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-LocalVarDec-4(sibling-uris|lang, partition, unique*, uri*) =
    ?LocalVarDec(_, _, _, _) 
  ; nabl-state-pop(?state*)
  ; try(LocalVarDec-4-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      LocalVarDec-4-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(LocalVarDec-4-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(LocalVarDec-4-state-site)
  ; try(LocalVarDec-4-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-LocalVarDec-4(|lang, partition, unique*, child-uri*)
  ; try(LocalVarDec-4-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(LocalVarDec-4-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(LocalVarDec-4-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(LocalVarDec-4-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(LocalVarDec-4-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(LocalVarDec-4-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-LocalVarDec-4(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); LocalVarDec(
        spectrav-debug(|"b-0 "); specific-siblings-list-Anno_VarMod0(|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-Type(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-1 "), spectrav-debug(|"b-2 "); specific-collect-VarDec(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-2 "), spectrav-debug(|"b-3 "); specific-collect-Int(?sibling-uri-2*|lang, partition, unique*, sibling-uri-1*); spectrav-debug(|"a-3 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  LocalVarDec-4-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  LocalVarDec-4-scoping-site = fail
  LocalVarDec-4-new-scoping-site = fail
  LocalVarDec-4-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  LocalVarDec-4-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  LocalVarDec-4-state-site = fail
  LocalVarDec-4-use-site(|lang, partition, unique*, uri*, state*) = fail
  LocalVarDec-4-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  LocalVarDec-4-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  LocalVarDec-4-import-site(|lang, partition, unique*, uri*, state*) = fail
  LocalVarDec-4-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor VarArityParam-4, Sort FormalParam

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-FormalParam(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-FormalParam(sibling-uris|lang, partition, unique*, uri*) = specific-collect-VarArityParam-4(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-VarArityParam-4(sibling-uris|lang, partition, unique*, uri*) =
    ?VarArityParam(_, _, _, _) 
  ; nabl-state-pop(?state*)
  ; try(VarArityParam-4-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      VarArityParam-4-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(VarArityParam-4-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(VarArityParam-4-state-site)
  ; try(VarArityParam-4-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-VarArityParam-4(|lang, partition, unique*, child-uri*)
  ; try(VarArityParam-4-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(VarArityParam-4-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(VarArityParam-4-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(VarArityParam-4-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(VarArityParam-4-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(VarArityParam-4-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-VarArityParam-4(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); VarArityParam(
        spectrav-debug(|"b-0 "); specific-siblings-list-Anno_VarMod0(|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-Type(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-1 "), spectrav-debug(|"b-2 "); specific-collect-VarDecId(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-2 "), spectrav-debug(|"b-3 "); specific-collect-Int(?sibling-uri-2*|lang, partition, unique*, sibling-uri-1*); spectrav-debug(|"a-3 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  VarArityParam-4-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  VarArityParam-4-scoping-site = fail
  VarArityParam-4-new-scoping-site = fail
  VarArityParam-4-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  VarArityParam-4-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  VarArityParam-4-state-site = fail
  VarArityParam-4-use-site(|lang, partition, unique*, uri*, state*) = fail
  VarArityParam-4-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  VarArityParam-4-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  VarArityParam-4-import-site(|lang, partition, unique*, uri*, state*) = fail
  VarArityParam-4-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor Param-4, Sort FormalParam

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-FormalParam(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-FormalParam(sibling-uris|lang, partition, unique*, uri*) = specific-collect-Param-4(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-Param-4(sibling-uris|lang, partition, unique*, uri*) =
    ?Param(_, _, _, _) 
  ; nabl-state-pop(?state*)
  ; try(Param-4-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      Param-4-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(Param-4-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(Param-4-state-site)
  ; try(Param-4-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-Param-4(|lang, partition, unique*, child-uri*)
  ; try(Param-4-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(Param-4-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(Param-4-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(Param-4-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(Param-4-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(Param-4-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-Param-4(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); Param(
        spectrav-debug(|"b-0 "); specific-siblings-list-Anno_VarMod0(|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-Type(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-1 "), spectrav-debug(|"b-2 "); specific-collect-VarDecId(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-2 "), spectrav-debug(|"b-3 "); specific-collect-Int(?sibling-uri-2*|lang, partition, unique*, sibling-uri-1*); spectrav-debug(|"a-3 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  Param-4-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  Param-4-scoping-site = fail
  Param-4-new-scoping-site = fail
  Param-4-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  Param-4-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  Param-4-state-site = fail
  Param-4-use-site(|lang, partition, unique*, uri*, state*) = fail
  Param-4-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  Param-4-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  Param-4-import-site(|lang, partition, unique*, uri*, state*) = fail
  Param-4-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor EnumDecHead-3, Sort EnumDecHead

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-EnumDecHead(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-EnumDecHead(sibling-uris|lang, partition, unique*, uri*) = specific-collect-EnumDecHead-3(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-EnumDecHead-3(sibling-uris|lang, partition, unique*, uri*) =
    ?EnumDecHead(_, _, _) 
  ; nabl-state-pop(?state*)
  ; try(EnumDecHead-3-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      EnumDecHead-3-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(EnumDecHead-3-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(EnumDecHead-3-state-site)
  ; try(EnumDecHead-3-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-EnumDecHead-3(|lang, partition, unique*, child-uri*)
  ; try(EnumDecHead-3-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(EnumDecHead-3-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(EnumDecHead-3-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(EnumDecHead-3-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(EnumDecHead-3-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(EnumDecHead-3-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-EnumDecHead-3(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); EnumDecHead(
        spectrav-debug(|"b-0 "); specific-siblings-list-Anno_ClassMod0(|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-ID(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-1 "), spectrav-debug(|"b-2 "); specific-siblings-list-ExtendsInterface(|lang, partition, unique*, uri*); spectrav-debug(|"a-2 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  EnumDecHead-3-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  EnumDecHead-3-scoping-site = fail
  EnumDecHead-3-new-scoping-site = fail
  EnumDecHead-3-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  EnumDecHead-3-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  EnumDecHead-3-state-site = fail
  EnumDecHead-3-use-site(|lang, partition, unique*, uri*, state*) = fail
  EnumDecHead-3-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  EnumDecHead-3-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  EnumDecHead-3-import-site(|lang, partition, unique*, uri*, state*) = fail
  EnumDecHead-3-prop-site(|lang, partition, uri*, state*, implicit*) = fail

rules // Constructor UnicodeEscape-5, Sort UnicodeEscape

  generic-collect(sibling-uris|lang, partition, unique*, uri*) = specific-collect-UnicodeEscape(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-UnicodeEscape(sibling-uris|lang, partition, unique*, uri*) = specific-collect-UnicodeEscape-5(sibling-uris|lang, partition, unique*, uri*)

  specific-collect-UnicodeEscape-5(sibling-uris|lang, partition, unique*, uri*) =
    ?UnicodeEscape(_, _, _, _, _) 
  ; nabl-state-pop(?state*)
  ; try(UnicodeEscape-5-scoping-site)
  ; (
       nabl-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ nabl-new-scope-site(?uri'*|lang, partition, unique*, uri*)
    <+ match(?uri'*|uri*) 
  ) 
  ; (
      UnicodeEscape-5-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    ; try(UnicodeEscape-5-new-scoping-site)
      <+ match(sibling-uris|uri*)
    ; match(?child-uri*|uri'*)
  )    
  ; try(UnicodeEscape-5-state-site)
  ; try(UnicodeEscape-5-collect-rewrite(|lang, partition, uri*, uri'*))
  ; specific-siblings-UnicodeEscape-5(|lang, partition, unique*, child-uri*)
  ; try(UnicodeEscape-5-external-def-site(|lang, partition, unique*, uri'*, state*, implicit*))
  ; try(UnicodeEscape-5-use-site(|lang, partition, unique*, uri'*, state*))
  ; try(UnicodeEscape-5-import-site(|lang, partition, unique*, child-uri*, state*))
  ; try(UnicodeEscape-5-filtering-site(|lang, partition, unique*, uri*, state*))
  ; try(UnicodeEscape-5-disambiguation-site(|lang, partition, unique*, uri*, state*))
  ; try(UnicodeEscape-5-prop-site(|lang, partition, uri*, state*, implicit*))
  ; nabl-annotate-properties(|lang, partition, uri*, uri'*)
    
  specific-siblings-UnicodeEscape-5(|lang, partition, unique*, uri*) =
    preserve-annotations-attachments(
      spectrav-debug(|"a "); UnicodeEscape(
        spectrav-debug(|"b-0 "); specific-collect-String(?sibling-uri-0*|lang, partition, unique*, uri*); spectrav-debug(|"a-0 "), spectrav-debug(|"b-1 "); specific-collect-Int(?sibling-uri-1*|lang, partition, unique*, sibling-uri-0*); spectrav-debug(|"a-1 "), spectrav-debug(|"b-2 "); specific-collect-Int(?sibling-uri-2*|lang, partition, unique*, sibling-uri-1*); spectrav-debug(|"a-2 "), spectrav-debug(|"b-3 "); specific-collect-Int(?sibling-uri-3*|lang, partition, unique*, sibling-uri-2*); spectrav-debug(|"a-3 "), spectrav-debug(|"b-4 "); specific-collect-Int(?sibling-uri-4*|lang, partition, unique*, sibling-uri-3*); spectrav-debug(|"a-4 ")  
      ); spectrav-debug(|"b ")
    )
  
  
    
  UnicodeEscape-5-collect-rewrite(|lang, partition, old-uri*, new-uri*) = fail
  UnicodeEscape-5-scoping-site = fail
  UnicodeEscape-5-new-scoping-site = fail
  UnicodeEscape-5-def-site(child-uris, sibiling-uris, implicits| lang, partition, unique*, uri*, state*) = fail
  UnicodeEscape-5-external-def-site(|lang, partition, unique*, uri*, state*, implicit*) = fail
  UnicodeEscape-5-state-site = fail
  UnicodeEscape-5-use-site(|lang, partition, unique*, uri*, state*) = fail
  UnicodeEscape-5-filtering-site(|lang, partition, unique*, uri*, state*) = fail
  UnicodeEscape-5-disambiguation-site(|lang, partition, unique*, uri*, state*) = fail
  UnicodeEscape-5-import-site(|lang, partition, unique*, uri*, state*) = fail
  UnicodeEscape-5-prop-site(|lang, partition, uri*, state*, implicit*) = fail

